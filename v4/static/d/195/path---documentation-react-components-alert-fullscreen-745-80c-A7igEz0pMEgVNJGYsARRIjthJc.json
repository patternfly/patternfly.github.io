{"data":{"mdx":{"rawBody":"---\ntitle: 'Alert'\ncssPrefix: 'pf-c-alert'\n---\nimport { Alert, AlertActionLink, AlertActionCloseButton } from '@patternfly/react-core';\n\n## Info Alert\n```js\nimport React from 'react';\nimport { Alert, AlertActionLink, AlertActionCloseButton } from '@patternfly/react-core';\n\nclass InfoAlert extends React.Component {\n  constructor(props) {\n    super(props);\n    super(props)\n    this.state = { alertOneVisible: true, alertTwoVisible: true };\n    this.hideAlertOne = () => this.setState({ alertOneVisible: false });\n    this.hideAlertTwo = () => this.setState({ alertTwoVisible: false });\n  }\n  \n  render() {\n    const { alertOneVisible, alertTwoVisible } = this.state;\n    return (\n      <React.Fragment>\n        {alertOneVisible && (\n          <Alert\n            variant=\"info\"\n            title=\"Info alert title\"\n            action={<AlertActionCloseButton onClose={this.hideAlertOne} />}\n          >\n            Info alert description. <a href=\"#\">This is a link.</a>\n          </Alert>\n        )}\n        {alertTwoVisible && (\n          <Alert\n            variant=\"info\"\n            title=\"Info alert title\"\n            action={<AlertActionCloseButton onClose={this.hideAlertTwo} />}\n          />\n        )}\n        <Alert variant=\"info\" title=\"Info alert title\" action={<AlertActionLink>Action Button</AlertActionLink>} />\n        <Alert variant=\"info\" title=\"Info alert title\" />\n      </React.Fragment>\n    );\n  }\n}\n```\n\n## Success Alert\n```js\nimport React from 'react';\nimport { Alert, AlertActionLink, AlertActionCloseButton } from '@patternfly/react-core';\n\nclass SuccessAlert extends React.Component {\n  constructor(props) {\n    super(props);\n    super(props)\n    this.state = { alertOneVisible: true, alertTwoVisible: true };\n    this.hideAlertOne = () => this.setState({ alertOneVisible: false });\n    this.hideAlertTwo = () => this.setState({ alertTwoVisible: false });\n  }\n  render() {\n    const { alertOneVisible, alertTwoVisible } = this.state;\n    return (\n      <React.Fragment>\n        {alertOneVisible && (\n          <Alert\n            variant=\"success\"\n            title=\"Success alert title\"\n            action={<AlertActionCloseButton onClose={this.hideAlertOne} />}\n          >\n            Success alert description. <a href=\"#\">This is a link.</a>\n          </Alert>\n        )}\n        {alertTwoVisible && (\n          <Alert\n            variant=\"success\"\n            title=\"Success alert title\"\n            action={<AlertActionCloseButton onClose={this.hideAlertTwo} />}\n          />\n        )}\n        <Alert\n          variant=\"success\"\n          title=\"Success alert title\"\n          action={<AlertActionLink>Action Button</AlertActionLink>}\n        />\n        <Alert variant=\"success\" title=\"Success alert title\" />\n      </React.Fragment>\n    );\n  }\n}\n```\n\n## Warning Alert\n```js\nimport React from 'react';\nimport { Alert, AlertActionLink, AlertActionCloseButton } from '@patternfly/react-core';\n\nclass WarningAlert extends React.Component {\n  constructor(props) {\n    super(props);\n    super(props)\n    this.state = { alertOneVisible: true, alertTwoVisible: true };\n    this.hideAlertOne = () => this.setState({ alertOneVisible: false });\n    this.hideAlertTwo = () => this.setState({ alertTwoVisible: false });\n  }\n  render() {\n    const { alertOneVisible, alertTwoVisible } = this.state;\n    return (\n      <React.Fragment>\n        {alertOneVisible && (\n          <Alert\n            variant=\"warning\"\n            title=\"Warning alert title\"\n            action={<AlertActionCloseButton onClose={this.hideAlertOne} />}\n          >\n            Warning alert description. <a href=\"#\">This is a link.</a>\n          </Alert>\n        )}\n        {alertTwoVisible && (\n          <Alert\n            variant=\"warning\"\n            title=\"Warning alert title\"\n            action={<AlertActionCloseButton onClose={this.hideAlertTwo} />}\n          />\n        )}\n        <Alert\n          variant=\"warning\"\n          title=\"Warning alert title\"\n          action={<AlertActionLink>Action Button</AlertActionLink>}\n        />\n        <Alert variant=\"warning\" title=\"Warning alert title\" />\n      </React.Fragment>\n    );\n  }\n}\n```\n\n## Danger Alert\n```js\nimport React from 'react';\nimport { Alert, AlertActionLink, AlertActionCloseButton } from '@patternfly/react-core';\n\nclass DangerAlert extends React.Component {\n  constructor(props) {\n    super(props);\n    super(props)\n    this.state = { alertOneVisible: true, alertTwoVisible: true };\n    this.hideAlertOne = () => this.setState({ alertOneVisible: false });\n    this.hideAlertTwo = () => this.setState({ alertTwoVisible: false });\n  }\n  render() {\n    const { alertOneVisible, alertTwoVisible } = this.state;\n    return (\n      <React.Fragment>\n        {alertOneVisible && (\n          <Alert\n            variant=\"danger\"\n            title=\"Danger alert title\"\n            action={<AlertActionCloseButton action={<AlertActionCloseButton onClose={this.hideAlertOne} />} />}\n          >\n            Danger alert description. <a href=\"#\">This is a link.</a>\n          </Alert>\n        )}\n        {alertTwoVisible && (\n          <Alert\n            variant=\"danger\"\n            title=\"Danger alert title\"\n            action={<AlertActionCloseButton onClose={this.hideAlertTwo} />}\n          />\n        )}\n        <Alert variant=\"danger\" title=\"Danger alert title\" action={<AlertActionLink>Action Button</AlertActionLink>} />\n        <Alert variant=\"danger\" title=\"Danger alert title\" />\n      </React.Fragment>\n    );\n  }\n}\n```\n","code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Alert\",\n  \"cssPrefix\": \"pf-c-alert\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"info-alert\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#info-alert\",\n    \"aria-label\": \"info alert permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Info Alert\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Alert, AlertActionLink, AlertActionCloseButton } from '@patternfly/react-core';\\n\\nclass InfoAlert extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    super(props)\\n    this.state = { alertOneVisible: true, alertTwoVisible: true };\\n    this.hideAlertOne = () => this.setState({ alertOneVisible: false });\\n    this.hideAlertTwo = () => this.setState({ alertTwoVisible: false });\\n  }\\n  \\n  render() {\\n    const { alertOneVisible, alertTwoVisible } = this.state;\\n    return (\\n      <React.Fragment>\\n        {alertOneVisible && (\\n          <Alert\\n            variant=\\\"info\\\"\\n            title=\\\"Info alert title\\\"\\n            action={<AlertActionCloseButton onClose={this.hideAlertOne} />}\\n          >\\n            Info alert description. <a href=\\\"#\\\">This is a link.</a>\\n          </Alert>\\n        )}\\n        {alertTwoVisible && (\\n          <Alert\\n            variant=\\\"info\\\"\\n            title=\\\"Info alert title\\\"\\n            action={<AlertActionCloseButton onClose={this.hideAlertTwo} />}\\n          />\\n        )}\\n        <Alert variant=\\\"info\\\" title=\\\"Info alert title\\\" action={<AlertActionLink>Action Button</AlertActionLink>} />\\n        <Alert variant=\\\"info\\\" title=\\\"Info alert title\\\" />\\n      </React.Fragment>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"success-alert\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#success-alert\",\n    \"aria-label\": \"success alert permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Success Alert\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Alert, AlertActionLink, AlertActionCloseButton } from '@patternfly/react-core';\\n\\nclass SuccessAlert extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    super(props)\\n    this.state = { alertOneVisible: true, alertTwoVisible: true };\\n    this.hideAlertOne = () => this.setState({ alertOneVisible: false });\\n    this.hideAlertTwo = () => this.setState({ alertTwoVisible: false });\\n  }\\n  render() {\\n    const { alertOneVisible, alertTwoVisible } = this.state;\\n    return (\\n      <React.Fragment>\\n        {alertOneVisible && (\\n          <Alert\\n            variant=\\\"success\\\"\\n            title=\\\"Success alert title\\\"\\n            action={<AlertActionCloseButton onClose={this.hideAlertOne} />}\\n          >\\n            Success alert description. <a href=\\\"#\\\">This is a link.</a>\\n          </Alert>\\n        )}\\n        {alertTwoVisible && (\\n          <Alert\\n            variant=\\\"success\\\"\\n            title=\\\"Success alert title\\\"\\n            action={<AlertActionCloseButton onClose={this.hideAlertTwo} />}\\n          />\\n        )}\\n        <Alert\\n          variant=\\\"success\\\"\\n          title=\\\"Success alert title\\\"\\n          action={<AlertActionLink>Action Button</AlertActionLink>}\\n        />\\n        <Alert variant=\\\"success\\\" title=\\\"Success alert title\\\" />\\n      </React.Fragment>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"warning-alert\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#warning-alert\",\n    \"aria-label\": \"warning alert permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Warning Alert\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Alert, AlertActionLink, AlertActionCloseButton } from '@patternfly/react-core';\\n\\nclass WarningAlert extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    super(props)\\n    this.state = { alertOneVisible: true, alertTwoVisible: true };\\n    this.hideAlertOne = () => this.setState({ alertOneVisible: false });\\n    this.hideAlertTwo = () => this.setState({ alertTwoVisible: false });\\n  }\\n  render() {\\n    const { alertOneVisible, alertTwoVisible } = this.state;\\n    return (\\n      <React.Fragment>\\n        {alertOneVisible && (\\n          <Alert\\n            variant=\\\"warning\\\"\\n            title=\\\"Warning alert title\\\"\\n            action={<AlertActionCloseButton onClose={this.hideAlertOne} />}\\n          >\\n            Warning alert description. <a href=\\\"#\\\">This is a link.</a>\\n          </Alert>\\n        )}\\n        {alertTwoVisible && (\\n          <Alert\\n            variant=\\\"warning\\\"\\n            title=\\\"Warning alert title\\\"\\n            action={<AlertActionCloseButton onClose={this.hideAlertTwo} />}\\n          />\\n        )}\\n        <Alert\\n          variant=\\\"warning\\\"\\n          title=\\\"Warning alert title\\\"\\n          action={<AlertActionLink>Action Button</AlertActionLink>}\\n        />\\n        <Alert variant=\\\"warning\\\" title=\\\"Warning alert title\\\" />\\n      </React.Fragment>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"danger-alert\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#danger-alert\",\n    \"aria-label\": \"danger alert permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Danger Alert\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Alert, AlertActionLink, AlertActionCloseButton } from '@patternfly/react-core';\\n\\nclass DangerAlert extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    super(props)\\n    this.state = { alertOneVisible: true, alertTwoVisible: true };\\n    this.hideAlertOne = () => this.setState({ alertOneVisible: false });\\n    this.hideAlertTwo = () => this.setState({ alertTwoVisible: false });\\n  }\\n  render() {\\n    const { alertOneVisible, alertTwoVisible } = this.state;\\n    return (\\n      <React.Fragment>\\n        {alertOneVisible && (\\n          <Alert\\n            variant=\\\"danger\\\"\\n            title=\\\"Danger alert title\\\"\\n            action={<AlertActionCloseButton action={<AlertActionCloseButton onClose={this.hideAlertOne} />} />}\\n          >\\n            Danger alert description. <a href=\\\"#\\\">This is a link.</a>\\n          </Alert>\\n        )}\\n        {alertTwoVisible && (\\n          <Alert\\n            variant=\\\"danger\\\"\\n            title=\\\"Danger alert title\\\"\\n            action={<AlertActionCloseButton onClose={this.hideAlertTwo} />}\\n          />\\n        )}\\n        <Alert variant=\\\"danger\\\" title=\\\"Danger alert title\\\" action={<AlertActionLink>Action Button</AlertActionLink>} />\\n        <Alert variant=\\\"danger\\\" title=\\\"Danger alert title\\\" />\\n      </React.Fragment>\\n    );\\n  }\\n}\\n\")));\n}\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"fileAbsolutePath":"/home/travis/build/patternfly/patternfly-org/packages/patternfly-4/_repos/react-core/src/components/Alert/Alert.md","fullscreen":true}}