{"data":{"mdx":{"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Toolbar\",\n  \"section\": \"demos\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"toolbar-demo\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#toolbar-demo\",\n    \"aria-label\": \"toolbar demo permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Toolbar Demo\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport {\\n  Button,\\n  Dropdown,\\n  DropdownPosition,\\n  DropdownToggle,\\n  DropdownItem,\\n  KebabToggle,\\n  TextInput,\\n  Toolbar,\\n  ToolbarGroup,\\n  ToolbarItem,\\n  ToolbarSection\\n} from '@patternfly/react-core';\\nimport { ListUlIcon, SortAlphaDownIcon, TableIcon } from '@patternfly/react-icons';\\n\\nclass ComplexToolbarDemo extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isDropDownOpen: false,\\n      isKebabOpen: false,\\n      searchValue: ''\\n    };\\n    this.handleTextInputChange = value => {\\n      this.setState({ searchValue: value });\\n    };\\n\\n    this.onDropDownToggle = isOpen => {\\n      this.setState({\\n        isDropDownOpen: isOpen\\n      });\\n    };\\n\\n    this.onDropDownSelect = event => {\\n      this.setState({\\n        isDropDownOpen: !this.state.isDropDownOpen\\n      });\\n    };\\n\\n    this.onKebabToggle = isOpen => {\\n      this.setState({\\n        isKebabOpen: isOpen\\n      });\\n    };\\n\\n    this.onKebabSelect = event => {\\n      this.setState({\\n        isKebabOpen: !this.state.isKebabOpen\\n      });\\n    };\\n\\n    this.buildSearchBox = () => {\\n      let { value } = this.state.searchValue;\\n      return (\\n        <TextInput value={value ? value : ''} type=\\\"search\\\" onChange={this.handleTextInputChange} aria-label=\\\"search text input\\\" />\\n      );\\n    };\\n\\n    this.buildDropdown = () => {\\n      const { isDropDownOpen } = this.state;\\n      return (\\n        <Dropdown\\n            onToggle={this.onDropDownToggle}\\n            onSelect={this.onDropDownSelect}\\n            position={DropdownPosition.right}\\n            toggle={<DropdownToggle onToggle={this.onDropDownToggle}>All</DropdownToggle>}\\n            isOpen={isDropDownOpen}\\n            dropdownItems={[\\n            <DropdownItem key=\\\"item-1\\\">Item 1</DropdownItem>,\\n            <DropdownItem key=\\\"item-2\\\">Item 2</DropdownItem>,\\n            <DropdownItem key=\\\"item-3\\\">Item 3</DropdownItem>,\\n            <DropdownItem isDisabled key=\\\"all\\\">\\n                All\\n            </DropdownItem>\\n            ]}\\n        />\\n      );\\n    };\\n\\n    this.buildKebab = () => {\\n      const { isKebabOpen } = this.state;\\n\\n      return (\\n        <Dropdown\\n            onToggle={this.onKebabToggle}\\n            onSelect={this.onKebabSelect}\\n            position={DropdownPosition.right}\\n            toggle={<KebabToggle onToggle={this.onKebabToggle} />}\\n            isOpen={isKebabOpen}\\n            isPlain\\n            dropdownItems={[\\n            <DropdownItem key=\\\"link\\\">Link</DropdownItem>,\\n            <DropdownItem component=\\\"button\\\" key=\\\"action_button\\\">\\n                Action\\n            </DropdownItem>,\\n            <DropdownItem isDisabled key=\\\"disabled_link\\\">\\n                Disabled Link\\n            </DropdownItem>,\\n            <DropdownItem isDisabled component=\\\"button\\\" key=\\\"disabled_button\\\">\\n                Disabled Action\\n            </DropdownItem>\\n            ]}\\n        />\\n      );\\n    };\\n  }\\n\\n  render() {\\n    return (\\n      <Toolbar className=\\\"pf-l-toolbar pf-u-justify-content-space-between pf-u-mx-xl pf-u-my-md\\\">\\n        <ToolbarGroup>\\n          <ToolbarItem className=\\\"pf-u-mr-xl\\\">{this.buildSearchBox()}</ToolbarItem>\\n          <ToolbarItem className=\\\"pf-u-mr-md\\\">{this.buildDropdown()}</ToolbarItem>\\n          <ToolbarItem>\\n            <Button variant=\\\"plain\\\" aria-label=\\\"Sort A-Z\\\">\\n              <SortAlphaDownIcon />\\n            </Button>\\n          </ToolbarItem>\\n        </ToolbarGroup>\\n        <ToolbarGroup>\\n          <ToolbarItem>\\n            <Button variant=\\\"plain\\\" aria-label=\\\"Insert Table\\\">\\n              <TableIcon />\\n            </Button>\\n          </ToolbarItem>\\n          <ToolbarItem className=\\\"pf-u-mx-md\\\">\\n            <Button variant=\\\"plain\\\" aria-label=\\\"Insert Bulleted List\\\">\\n              <ListUlIcon />\\n            </Button>\\n          </ToolbarItem>\\n          <ToolbarItem>\\n            <Button variant=\\\"plain\\\" aria-label=\\\"Action 1\\\">\\n              Action\\n            </Button>\\n          </ToolbarItem>\\n          <ToolbarItem className=\\\"pf-u-mx-md\\\">\\n            <Button aria-label=\\\"Action 2\\\">Action</Button>\\n          </ToolbarItem>\\n          <ToolbarItem>{this.buildKebab()}</ToolbarItem>\\n        </ToolbarGroup>\\n        <ToolbarSection aria-label=\\\"Toolbar Section\\\">\\n          <ToolbarGroup>\\n            <ToolbarItem>17 of 80 items</ToolbarItem>\\n          </ToolbarGroup>\\n        </ToolbarSection>\\n      </Toolbar>\\n    );\\n  }\\n}\\n\")));\n}\nMDXContent.isMDXComponent = true;"},"frontmatter":{"title":"Toolbar","section":"demos","cssPrefix":null}},"metadata":null,"allGetStartedNavigationJson":{"edges":[{"node":{"text":"About","path":"/get-started/about"}},{"node":{"text":"Develop","path":"/get-started/developers"}},{"node":{"text":"Design","path":"/get-started/designers"}}]},"allDesignGuidelinesNavigationJson":{"edges":[{"node":{"text":"Styles","path":"/design-guidelines/styles/","subNav":[{"text":"Colors","path":"/design-guidelines/styles/colors"},{"text":"Icons","path":"/design-guidelines/styles/icons"},{"text":"Typography","path":"/design-guidelines/styles/typography"},{"text":"Spacers","path":"/design-guidelines/styles/spacers"}]}},{"node":{"text":"Usage and behavior","path":"/design-guidelines/usage-and-behavior/","subNav":[{"text":"About modal","path":"/design-guidelines/usage-and-behavior/about-modal"},{"text":"Alerts and notifications","path":"/design-guidelines/usage-and-behavior/alerts-and-notifications"},{"text":"Buttons and links","path":"/design-guidelines/usage-and-behavior/buttons-and-links"},{"text":"Data input","path":"/design-guidelines/usage-and-behavior/data-input"},{"text":"Empty state","path":"/design-guidelines/usage-and-behavior/empty-state"},{"text":"Filters","path":"/design-guidelines/usage-and-behavior/filters"},{"text":"Forms","path":"/design-guidelines/usage-and-behavior/forms"},{"text":"Lists and tables","path":"/design-guidelines/usage-and-behavior/lists-and-tables"},{"text":"Login","path":"/design-guidelines/usage-and-behavior/login"},{"text":"Modal","path":"/design-guidelines/usage-and-behavior/modal"},{"text":"Navigation system","path":"/design-guidelines/usage-and-behavior/navigation-system"},{"text":"Progress bar","path":"/design-guidelines/usage-and-behavior/progress-bar"},{"text":"Toolbar","path":"/design-guidelines/usage-and-behavior/toolbar"}]}},{"node":{"text":"Content","path":"/design-guidelines/content","subNav":[{"text":"Writing","path":"/design-guidelines/content/writing"},{"text":"Voice","path":"/design-guidelines/content/voice-and-tone"},{"text":"Style guide","path":"/design-guidelines/content/grammar-and-terminology"}]}}]}},"pageContext":{"title":"Toolbar","fileAbsolutePath":"/home/travis/build/patternfly/patternfly-org/packages/patternfly-4/_repos/react-core/src/demos/ToolbarDemo.md","pathRegex":"/demos/.*/"}}