{"data":{"mdx":{"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Context selector\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"simple-context-selector\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#simple-context-selector\",\n    \"aria-label\": \"simple context selector permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Simple context selector\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { ContextSelector, ContextSelectorItem } from '@patternfly/react-core';\\n\\nclass SimpleContextSelector extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.items = [\\n      'My Project',\\n      'OpenShift Cluster',\\n      'Production Ansible',\\n      'AWS',\\n      'Azure',\\n      'My Project 2',\\n      'OpenShift Cluster ',\\n      'Production Ansible 2 ',\\n      'AWS 2',\\n      'Azure 2'\\n    ];\\n\\n    this.state = {\\n      isOpen: false,\\n      selected: this.items[0],\\n      searchValue: '',\\n      filteredItems: this.items\\n    };\\n\\n    this.onToggle = (event, isOpen) => {\\n      this.setState({\\n        isOpen\\n      });\\n    };\\n\\n    this.onSelect = (event, value) => {\\n      this.setState({\\n        selected: value,\\n        isOpen: !this.state.isOpen\\n      });\\n    };\\n\\n    this.onSearchInputChange = value => {\\n      this.setState({ searchValue: value });\\n    };\\n\\n    this.onSearchButtonClick = event => {\\n      const filtered =\\n        this.state.searchValue === ''\\n          ? this.items\\n          : this.items.filter(str => str.toLowerCase().indexOf(this.state.searchValue.toLowerCase()) !== -1);\\n\\n      this.setState({ filteredItems: filtered || [] });\\n    };\\n  }\\n\\n  render() {\\n    const { isOpen, selected, searchValue, filteredItems } = this.state;\\n    return (\\n      <ContextSelector\\n        toggleText={selected}\\n        onSearchInputChange={this.onSearchInputChange}\\n        isOpen={isOpen}\\n        searchInputValue={searchValue}\\n        onToggle={this.onToggle}\\n        onSelect={this.onSelect}\\n        onSearchButtonClick={this.onSearchButtonClick}\\n        screenReaderLabel=\\\"Selected Project:\\\"\\n      >\\n        {filteredItems.map((item, index) => (\\n          <ContextSelectorItem key={index}>{item}</ContextSelectorItem>\\n        ))}\\n      </ContextSelector>\\n    );\\n  }\\n}\\n\")));\n}\nMDXContent.isMDXComponent = true;"},"frontmatter":{"title":"Context selector","section":null,"cssPrefix":null}},"metadata":{"edges":[{"node":{"path":"src/components/ContextSelector/ContextSelector.js","name":"ContextSelector","description":"","props":[{"name":"children","description":"content rendered inside the Context Selector","required":false,"type":{"name":"node"},"defaultValue":{"value":"null"}},{"name":"className","description":"Classes applied to root element of Context Selector","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"isOpen","description":"Flag to indicate if Context Selector is opened","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"onToggle","description":"Function callback called when user clicks toggle button","required":false,"type":{"name":"func"},"defaultValue":{"value":"() => {}"}},{"name":"onSelect","description":"Function callback called when user selects item","required":false,"type":{"name":"func"},"defaultValue":{"value":"() => {}"}},{"name":"screenReaderLabel","description":"Labels the Context Selector for Screen Readers","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"toggleText","description":"Text that appears in the Context Selector Toggle","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"searchButtonAriaLabel","description":"aria-label for the Context Selector Search Button","required":false,"type":{"name":"string"},"defaultValue":{"value":"'Search menu items'"}},{"name":"searchInputValue","description":"Value in the Search field","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"onSearchInputChange","description":"Function callback called when user changes the Search Input","required":false,"type":{"name":"func"},"defaultValue":{"value":"() => {}"}},{"name":"searchInputPlaceholder","description":"Search Input placeholder","required":false,"type":{"name":"string"},"defaultValue":{"value":"'Search'"}},{"name":"onSearchButtonClick","description":"Function callback for when Search Button is clicked","required":false,"type":{"name":"func"},"defaultValue":{"value":"() => {}"}}]}},{"node":{"path":"src/components/ContextSelector/ContextSelectorItem.js","name":"ContextSelectorItem","description":"","props":[{"name":"children","description":"Anything which can be rendered as Context Selector item","required":false,"type":{"name":"node"},"defaultValue":{"value":"null"}},{"name":"className","description":"Classes applied to root element of the Context Selector item","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"isDisabled","description":"Render Context  Selector item as disabled","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isHovered","description":"Forces display of the hover state of the element","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"onClick","description":"Callback for click event","required":false,"type":{"name":"func"},"defaultValue":{"value":"() => {}"}},{"name":"","description":"Additional props are spread to the button element","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/ContextSelector/ContextSelectorMenuList.js","name":"ContextSelectorMenuList","description":"","props":[{"name":"children","description":"Content rendered inside the Context Selector Menu","required":false,"type":{"name":"node"},"defaultValue":{"value":"null"}},{"name":"className","description":"Classess applied to root element of Context Selector menu","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"isOpen","description":"Flag to indicate if Context Selector menu is opened","required":false,"type":{"name":"bool"},"defaultValue":{"value":"true"}},{"name":"","description":"Additional props are spread to the container component","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/ContextSelector/ContextSelectorToggle.js","name":"ContextSelectorToggle","description":"","props":[{"name":"id","description":"HTML ID of toggle","required":true,"type":{"name":"string"},"defaultValue":null},{"name":"className","description":"Classes applied to root element of toggle","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"toggleText","description":"Text that appears in the Context Selector Toggle","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"isOpen","description":"Flag to indicate if menu is opened","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"onToggle","description":"Callback called when toggle is clicked","required":false,"type":{"name":"func"},"defaultValue":{"value":"() => {}"}},{"name":"onEnter","description":"Callback for toggle open on keyboard entry","required":false,"type":{"name":"func"},"defaultValue":{"value":"() => {}"}},{"name":"parentRef","description":"Element which wraps toggle","required":false,"type":{"name":"any"},"defaultValue":{"value":"null"}},{"name":"isFocused","description":"Forces focus state","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isHovered","description":"Forces hover state","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isActive","description":"Forces active state","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"","description":"Additional props are spread to the container <button>","required":false,"type":{"name":"any"},"defaultValue":null}]}}]},"allGetStartedNavigationJson":{"edges":[{"node":{"text":"About","path":"/get-started/about"}},{"node":{"text":"Develop","path":"/get-started/developers"}},{"node":{"text":"Design","path":"/get-started/designers"}},{"node":{"text":"Migrate from PatternFly 3","path":"/get-started/migrate"}},{"node":{"text":"Accessibility guide","path":"/get-started/accessibility-guide"}}]},"allDesignGuidelinesNavigationJson":{"edges":[{"node":{"text":"Styles","path":"/design-guidelines/styles/","subNav":[{"text":"Colors","path":"/design-guidelines/styles/colors"},{"text":"Colors for charts","path":"/design-guidelines/styles/colors-for-charts"},{"text":"Icons","path":"/design-guidelines/styles/icons"},{"text":"Typography","path":"/design-guidelines/styles/typography"},{"text":"Spacers","path":"/design-guidelines/styles/spacers"}]}},{"node":{"text":"Usage and behavior","path":"/design-guidelines/usage-and-behavior/","subNav":[{"text":"About modal","path":"/design-guidelines/usage-and-behavior/about-modal"},{"text":"Alerts and notifications","path":"/design-guidelines/usage-and-behavior/alerts-and-notifications"},{"text":"Buttons and links","path":"/design-guidelines/usage-and-behavior/buttons-and-links"},{"text":"Charts","path":"/design-guidelines/usage-and-behavior/charts"},{"text":"Data input","path":"/design-guidelines/usage-and-behavior/data-input"},{"text":"Empty state","path":"/design-guidelines/usage-and-behavior/empty-state"},{"text":"Filters","path":"/design-guidelines/usage-and-behavior/filters"},{"text":"Forms","path":"/design-guidelines/usage-and-behavior/forms"},{"text":"Lists and tables","path":"/design-guidelines/usage-and-behavior/lists-and-tables"},{"text":"Login","path":"/design-guidelines/usage-and-behavior/login"},{"text":"Modal dialog","path":"/design-guidelines/usage-and-behavior/modal"},{"text":"Navigation system","path":"/design-guidelines/usage-and-behavior/navigation-system"},{"text":"Progress bar","path":"/design-guidelines/usage-and-behavior/progress-bar"},{"text":"Toolbar","path":"/design-guidelines/usage-and-behavior/toolbar"}]}},{"node":{"text":"Content","path":"/design-guidelines/content","subNav":[{"text":"Writing","path":"/design-guidelines/content/writing"},{"text":"Voice","path":"/design-guidelines/content/voice-and-tone"},{"text":"Style guide","path":"/design-guidelines/content/grammar-and-terminology"}]}}]}},"pageContext":{"title":"Context selector","fileAbsolutePath":"/home/travis/build/patternfly/patternfly-org/packages/patternfly-4/_repos/react-core/src/components/ContextSelector/ContextSelector.md","pathRegex":"/ContextSelector/.*/"}}