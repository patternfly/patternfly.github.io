{"data":{"mdx":{"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Dropdown\",\n  \"cssPrefix\": \"pf-c-dropdown\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"simple-dropdown\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#simple-dropdown\",\n    \"aria-label\": \"simple dropdown permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Simple Dropdown\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Dropdown, DropdownToggle, DropdownItem, DropdownSeparator, DropdownPosition, DropdownDirection, KebabToggle } from '@patternfly/react-core';\\nimport { ThIcon } from '@patternfly/react-icons';\\n\\nclass SimpleDropdown extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: false\\n    };\\n    this.onToggle = isOpen => {\\n      this.setState({\\n        isOpen\\n      });\\n    };\\n    this.onSelect = event => {\\n      this.setState({\\n        isOpen: !this.state.isOpen\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isOpen } = this.state;\\n    const dropdownItems = [\\n      <DropdownItem key=\\\"link\\\">Link</DropdownItem>,\\n      <DropdownItem key=\\\"action\\\" component=\\\"button\\\">\\n        Action\\n      </DropdownItem>,\\n      <DropdownItem key=\\\"disabled link\\\" isDisabled>\\n        Disabled Link\\n      </DropdownItem>,\\n      <DropdownItem key=\\\"disabled action\\\" isDisabled component=\\\"button\\\">\\n        Disabled Action\\n      </DropdownItem>,\\n      <DropdownSeparator key=\\\"separator\\\" />,\\n      <DropdownItem key=\\\"separated link\\\">Separated Link</DropdownItem>,\\n      <DropdownItem key=\\\"separated action\\\" component=\\\"button\\\">\\n        Separated Action\\n      </DropdownItem>\\n    ];\\n    return (\\n      <Dropdown\\n        onSelect={this.onSelect}\\n        toggle={<DropdownToggle onToggle={this.onToggle}>Dropdown</DropdownToggle>}\\n        isOpen={isOpen}\\n        dropdownItems={dropdownItems}\\n      />\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"dropdown-disabled\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#dropdown-disabled\",\n    \"aria-label\": \"dropdown disabled permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Dropdown (disabled)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Dropdown, DropdownToggle, DropdownItem, DropdownSeparator, DropdownPosition, DropdownDirection, KebabToggle } from '@patternfly/react-core';\\nimport { ThIcon } from '@patternfly/react-icons';\\n\\nclass DisabledDropdown extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: false\\n    };\\n    this.onToggle = isOpen => {\\n      this.setState({\\n        isOpen\\n      });\\n    };\\n    this.onSelect = event => {\\n      this.setState({\\n        isOpen: !this.state.isOpen\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isOpen } = this.state;\\n    const dropdownItems = [\\n      <DropdownItem key=\\\"link\\\">Link</DropdownItem>,\\n      <DropdownItem key=\\\"action\\\" component=\\\"button\\\">\\n        Action\\n      </DropdownItem>,\\n      <DropdownItem key=\\\"disabled link\\\" isDisabled>\\n        Disabled Link\\n      </DropdownItem>,\\n      <DropdownItem key=\\\"disabled action\\\" isDisabled component=\\\"button\\\">\\n        Disabled Action\\n      </DropdownItem>,\\n      <DropdownSeparator key=\\\"separator\\\" />,\\n      <DropdownItem key=\\\"separated link\\\">Separated Link</DropdownItem>,\\n      <DropdownItem key=\\\"separated action\\\" component=\\\"button\\\">\\n        Separated Action\\n      </DropdownItem>\\n    ];\\n    return (\\n      <Dropdown\\n        onSelect={this.onSelect}\\n        toggle={\\n          <DropdownToggle isDisabled onToggle={this.onToggle}>\\n            Dropdown\\n          </DropdownToggle>\\n        }\\n        isOpen={isOpen}\\n        dropdownItems={dropdownItems}\\n      />\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"dropdown-position-right\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#dropdown-position-right\",\n    \"aria-label\": \"dropdown position right permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Dropdown (position right)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Dropdown, DropdownToggle, DropdownItem, DropdownSeparator, DropdownPosition, DropdownDirection, KebabToggle } from '@patternfly/react-core';\\nimport { ThIcon } from '@patternfly/react-icons';\\n\\nclass PositionRightDropdown extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: false\\n    };\\n    this.onToggle = isOpen => {\\n      this.setState({\\n        isOpen\\n      });\\n    };\\n    this.onSelect = event => {\\n      this.setState({\\n        isOpen: !this.state.isOpen\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isOpen } = this.state;\\n    const dropdownItems = [\\n      <DropdownItem key=\\\"link\\\">Link</DropdownItem>,\\n      <DropdownItem key=\\\"action\\\" component=\\\"button\\\">\\n        Action\\n      </DropdownItem>,\\n      <DropdownItem key=\\\"disabled link\\\" isDisabled>\\n        Disabled Link\\n      </DropdownItem>,\\n      <DropdownItem key=\\\"disabled action\\\" isDisabled component=\\\"button\\\">\\n        Disabled Action\\n      </DropdownItem>,\\n      <DropdownSeparator key=\\\"separator\\\" />,\\n      <DropdownItem key=\\\"separated link\\\">Separated Link</DropdownItem>,\\n      <DropdownItem key=\\\"separated action\\\" component=\\\"button\\\">\\n        Separated Action\\n      </DropdownItem>\\n    ];\\n    return (\\n      <Dropdown\\n        onSelect={this.onSelect}\\n        position={DropdownPosition.right}\\n        toggle={<DropdownToggle onToggle={this.onToggle}>Dropdown</DropdownToggle>}\\n        isOpen={isOpen}\\n        dropdownItems={dropdownItems}\\n      />\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"dropdown-direction-up\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#dropdown-direction-up\",\n    \"aria-label\": \"dropdown direction up permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Dropdown (direction up)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Dropdown, DropdownToggle, DropdownItem, DropdownSeparator, DropdownPosition, DropdownDirection, KebabToggle } from '@patternfly/react-core';\\nimport { ThIcon } from '@patternfly/react-icons';\\n\\nclass DirectionUpDropdown extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: false\\n    };\\n    this.onToggle = isOpen => {\\n      this.setState({\\n        isOpen\\n      });\\n    };\\n    this.onSelect = event => {\\n      this.setState({\\n        isOpen: !this.state.isOpen\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isOpen } = this.state;\\n    const dropdownItems = [\\n      <DropdownItem key=\\\"link\\\">Link</DropdownItem>,\\n      <DropdownItem key=\\\"action\\\" component=\\\"button\\\">\\n        Action\\n      </DropdownItem>,\\n      <DropdownItem key=\\\"disabled link\\\" isDisabled>\\n        Disabled Link\\n      </DropdownItem>,\\n      <DropdownItem key=\\\"disabled action\\\" isDisabled component=\\\"button\\\">\\n        Disabled Action\\n      </DropdownItem>,\\n      <DropdownSeparator key=\\\"separator\\\" />,\\n      <DropdownItem key=\\\"separated link\\\">Separated Link</DropdownItem>,\\n      <DropdownItem key=\\\"separated action\\\" component=\\\"button\\\">\\n        Separated Action\\n      </DropdownItem>\\n    ];\\n    return (\\n      <Dropdown\\n        direction={DropdownDirection.up}\\n        onSelect={this.onSelect}\\n        toggle={<DropdownToggle onToggle={this.onToggle}>Dropdown</DropdownToggle>}\\n        isOpen={isOpen}\\n        dropdownItems={dropdownItems}\\n      />\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"dropdown-with-kebab\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#dropdown-with-kebab\",\n    \"aria-label\": \"dropdown with kebab permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Dropdown with Kebab\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Dropdown, DropdownToggle, DropdownItem, DropdownSeparator, DropdownPosition, DropdownDirection, KebabToggle } from '@patternfly/react-core';\\nimport { ThIcon } from '@patternfly/react-icons';\\n\\nclass KebabDropdown extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: false\\n    };\\n    this.onToggle = isOpen => {\\n      this.setState({\\n        isOpen\\n      });\\n    };\\n    this.onSelect = event => {\\n      this.setState({\\n        isOpen: !this.state.isOpen\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isOpen } = this.state;\\n    const dropdownItems = [\\n      <DropdownItem key=\\\"link\\\">Link</DropdownItem>,\\n      <DropdownItem key=\\\"action\\\" component=\\\"button\\\">\\n        Action\\n      </DropdownItem>,\\n      <DropdownItem key=\\\"disabled link\\\" isDisabled>\\n        Disabled Link\\n      </DropdownItem>,\\n      <DropdownItem key=\\\"disabled action\\\" isDisabled component=\\\"button\\\">\\n        Disabled Action\\n      </DropdownItem>,\\n      <DropdownSeparator key=\\\"separator\\\" />,\\n      <DropdownItem key=\\\"separated link\\\">Separated Link</DropdownItem>,\\n      <DropdownItem key=\\\"separated action\\\" component=\\\"button\\\">\\n        Separated Action\\n      </DropdownItem>\\n    ];\\n    return (\\n      <Dropdown\\n        onSelect={this.onSelect}\\n        toggle={<KebabToggle onToggle={this.onToggle} />}\\n        isOpen={isOpen}\\n        isPlain\\n        dropdownItems={dropdownItems}\\n      />\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"dropdown-icon-only\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#dropdown-icon-only\",\n    \"aria-label\": \"dropdown icon only permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Dropdown (icon only)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Dropdown, DropdownToggle, DropdownItem, DropdownSeparator, DropdownPosition, DropdownDirection, KebabToggle } from '@patternfly/react-core';\\nimport { ThIcon } from '@patternfly/react-icons';\\n\\nclass IconDropdown extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: false\\n    };\\n    this.onToggle = isOpen => {\\n      this.setState({\\n        isOpen\\n      });\\n    };\\n    this.onSelect = event => {\\n      this.setState({\\n        isOpen: !this.state.isOpen\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isOpen } = this.state;\\n    const dropdownItems = [\\n      <DropdownItem key=\\\"link\\\">Link</DropdownItem>,\\n      <DropdownItem key=\\\"action\\\" component=\\\"button\\\">\\n        Action\\n      </DropdownItem>,\\n      <DropdownItem key=\\\"disabled link\\\" isDisabled>\\n        Disabled Link\\n      </DropdownItem>,\\n      <DropdownItem key=\\\"disabled action\\\" isDisabled component=\\\"button\\\">\\n        Disabled Action\\n      </DropdownItem>,\\n      <DropdownSeparator key=\\\"separator\\\" />,\\n      <DropdownItem key=\\\"separated link\\\">Separated Link</DropdownItem>,\\n      <DropdownItem key=\\\"separated action\\\" component=\\\"button\\\">\\n        Separated Action\\n      </DropdownItem>\\n    ];\\n    return (\\n      <Dropdown\\n        onSelect={this.onSelect}\\n        toggle={\\n          <DropdownToggle iconComponent={null} onToggle={this.onToggle}>\\n            <ThIcon />\\n          </DropdownToggle>\\n        }\\n        isOpen={isOpen}\\n        isPlain\\n        dropdownItems={dropdownItems}\\n      />\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"dropdown-panel\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#dropdown-panel\",\n    \"aria-label\": \"dropdown panel permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Dropdown Panel\"), mdx(\"p\", null, \"The Basic Dropdown is provided for flexibility in allowing various content within a dropdown.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Dropdown, DropdownToggle, DropdownItem, DropdownSeparator, DropdownPosition, DropdownDirection, KebabToggle } from '@patternfly/react-core';\\nimport { ThIcon } from '@patternfly/react-icons';\\n\\nclass DropdownPanel extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: false\\n    };\\n    this.onToggle = isOpen => {\\n      this.setState({\\n        isOpen\\n      });\\n    };\\n    this.onSelect = event => {\\n      this.setState({\\n        isOpen: !this.state.isOpen\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isOpen } = this.state;\\n    return (\\n      <Dropdown\\n        onSelect={this.onSelect}\\n        toggle={<DropdownToggle onToggle={this.onToggle}>Expanded Dropdown</DropdownToggle>}\\n        isOpen={isOpen}\\n      >\\n        <div>[Panel contents here]</div>\\n      </Dropdown>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"react-router-link-usage\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#react-router-link-usage\",\n    \"aria-label\": \"react router link usage permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"React Router Link usage\"), mdx(\"p\", null, \"A react-router Link may be wrapped by DropdownItem or used directly within Dropdown. Here's some example HTML:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-nolive\"\n  }), \"/** Wrapped Link for DropdownItem list **/\\n<DropdownItem key=\\\"link\\\">\\n  <Link to={'/'}>Link</Link>\\n</DropdownItem>\\n\\n/** Direct child of Dropdown **/\\n<Dropdown\\nonSelect={this.onSelect}\\ntoggle={\\n  <DropdownToggle onToggle={this.onToggle}>\\n    Expanded Dropdown\\n  </DropdownToggle>\\n}\\nisOpen={isOpen}\\n>\\n  <Link to={'/'}>Link</Link>\\n</Dropdown>\\n\")));\n}\nMDXContent.isMDXComponent = true;"},"frontmatter":{"title":"Dropdown","section":null,"cssPrefix":"pf-c-dropdown"}},"metadata":{"edges":[{"node":{"path":"src/components/Dropdown/Dropdown.js","name":"Dropdown","description":"","props":[{"name":"children","description":"Anything which can be rendered in a dropdown","required":false,"type":{"name":"custom"},"defaultValue":{"value":"null"}},{"name":"className","description":"Classes applied to root element of dropdown","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"dropdownItems","description":"Array of DropdownItem nodes that will be rendered in the dropdown Menu list","required":false,"type":{"name":"array"},"defaultValue":{"value":"[]"}},{"name":"isOpen","description":"Flag to indicate if menu is opened","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isPlain","description":"Display the toggle with no border or background","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"position","description":"Indicates where menu will be alligned horizontally","required":false,"type":{"name":"enum"},"defaultValue":{"value":"DropdownPosition.left"}},{"name":"direction","description":"Display menu above or below dropdown toggle","required":false,"type":{"name":"enum"},"defaultValue":{"value":"DropdownDirection.down"}},{"name":"toggle","description":"Placeholder to use custom toggle elements","required":true,"type":{"name":"node"},"defaultValue":null},{"name":"onSelect","description":"Function callback called when user selects item","required":false,"type":{"name":"func"},"defaultValue":{"value":"Function.prototype"}},{"name":"","description":"Additional props are spread to the container <div>","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/Dropdown/DropdownItem.js","name":"DropdownItem","description":"","props":[{"name":"children","description":"Anything which can be rendered as dropdown item","required":false,"type":{"name":"node"},"defaultValue":{"value":"null"}},{"name":"className","description":"Classes applied to root element of dropdown item","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"component","description":"Indicates which component will be used as dropdown item","required":false,"type":{"name":"custom"},"defaultValue":{"value":"'a'"}},{"name":"isDisabled","description":"Render dropdown item as disabled option","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isHovered","description":"Forces display of the hover state of the element","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"href","description":"Default hyperlink location","required":false,"type":{"name":"string"},"defaultValue":{"value":"'#'"}},{"name":"index","description":"","required":false,"type":{"name":"number"},"defaultValue":{"value":"-1"}},{"name":"context","description":"","required":false,"type":{"name":"shape"},"defaultValue":{"value":"{\n  keyHandler: Function.prototype,\n  sendRef: Function.prototype\n}"}},{"name":"","description":"Additional props are spread to the container component","required":false,"type":{"name":"any"},"defaultValue":null},{"name":"onClick","description":"Callback for click event","required":false,"type":{"name":"func"},"defaultValue":{"value":"Function.prototype"}}]}},{"node":{"path":"src/components/Dropdown/DropdownMenu.js","name":"DropdownMenu","description":"","props":[{"name":"children","description":"Anything which can be rendered as dropdown items","required":false,"type":{"name":"node"},"defaultValue":{"value":"null"}},{"name":"className","description":"Classess applied to root element of dropdown menu","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"isOpen","description":"Flag to indicate if menu is opened","required":false,"type":{"name":"bool"},"defaultValue":{"value":"true"}},{"name":"component","description":"Indicates which component will be used as dropdown menu","required":false,"type":{"name":"custom"},"defaultValue":{"value":"'ul'"}},{"name":"position","description":"Indicates where menu will be alligned horizontally","required":false,"type":{"name":"enum"},"defaultValue":{"value":"DropdownPosition.left"}},{"name":"","description":"Additional props are spread to the container component","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/Dropdown/DropdownToggle.js","name":"DropdownToggle","description":"","props":[{"name":"id","description":"HTML ID of dropdown toggle","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"children","description":"Anything which can be rendered as dropdown toggle","required":true,"type":{"name":"node"},"defaultValue":null},{"name":"className","description":"Classes applied to root element of dropdown toggle","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"isOpen","description":"Flag to indicate if menu is opened","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"onToggle","description":"Callback called when toggle is clicked","required":false,"type":{"name":"func"},"defaultValue":{"value":"Function.prototype"}},{"name":"parentRef","description":"Element which wraps toggle","required":false,"type":{"name":"any"},"defaultValue":{"value":"null"}},{"name":"isFocused","description":"Forces focus state","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isHovered","description":"Forces hover state","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isActive","description":"Forces active state","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isPlain","description":"Display the toggle with no border or background","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"iconComponent","description":"The icon to display for the toggle. Defaults to CaretDownIcon. Set to null to not show an icon.","required":false,"type":{"name":"func"},"defaultValue":{"value":"CaretDownIcon"}},{"name":"","description":"Additional props are spread to the container component","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/Dropdown/Item.js","name":"Item","description":"","props":[{"name":"children","description":"Anything which can be rendered as dropdown item","required":false,"type":{"name":"node"},"defaultValue":{"value":"null"}},{"name":"className","description":"Classess applied to root element of dropdown item","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"component","description":"Indicates which component will be used as dropdown item","required":false,"type":{"name":"custom"},"defaultValue":{"value":"'a'"}},{"name":"isDisabled","description":"Render dropdown item as disabled option","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isHovered","description":"Forces display of the hover state of the element","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"href","description":"Default hyperlink location","required":false,"type":{"name":"string"},"defaultValue":{"value":"'#'"}},{"name":"","description":"Additional props are passed to the DropdownItem","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/Dropdown/KebabToggle.js","name":"Kebab","description":"","props":[{"name":"id","description":"HTML ID of dropdown toggle","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"children","description":"Anything which can be rendered as dropdown toggle","required":false,"type":{"name":"node"},"defaultValue":{"value":"null"}},{"name":"className","description":"Classess applied to root element of dropdown toggle","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"isOpen","description":"Flag to indicate if menu is opened","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"aria-label","description":"Label Toggle button","required":false,"type":{"name":"string"},"defaultValue":{"value":"'Actions'"}},{"name":"onToggle","description":"Callback called when toggle is clicked","required":false,"type":{"name":"func"},"defaultValue":{"value":"Function.prototype"}},{"name":"parentRef","description":"Element which wraps toggle","required":false,"type":{"name":"any"},"defaultValue":{"value":"null"}},{"name":"isFocused","description":"Forces focus state","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isHovered","description":"Forces hover state","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isActive","description":"Forces active state","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isDisabled","description":"Disables the dropdown toggle","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isPlain","description":"Display the toggle with no border or background","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"","description":"Additional props are spread to the container component","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/Dropdown/Separator.js","name":"Separator","description":"","props":[{"name":"children","description":"Anything which can be rendered as dropdown item","required":false,"type":{"name":"node"},"defaultValue":{"value":"null"}},{"name":"className","description":"Classes applied to root element of dropdown item","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"component","description":"Indicates which component will be used as dropdown item","required":false,"type":{"name":"custom"},"defaultValue":{"value":"'a'"}},{"name":"isDisabled","description":"Render dropdown item as disabled option","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isHovered","description":"Forces display of the hover state of the element","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"href","description":"Default hyperlink location","required":false,"type":{"name":"string"},"defaultValue":{"value":"'#'"}},{"name":"","description":"Additional props are passed to the DropdownItem","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/Dropdown/Toggle.js","name":"DropdownToggle","description":"","props":[{"name":"id","description":"HTML ID of dropdown toggle","required":true,"type":{"name":"string"},"defaultValue":null},{"name":"children","description":"Anything which can be rendered as dropdown toggle","required":false,"type":{"name":"node"},"defaultValue":{"value":"null"}},{"name":"className","description":"Classes applied to root element of dropdown toggle","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"isOpen","description":"Flag to indicate if menu is opened","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"onToggle","description":"Callback called when toggle is clicked","required":false,"type":{"name":"func"},"defaultValue":{"value":"Function.prototype"}},{"name":"parentRef","description":"Element which wraps toggle","required":false,"type":{"name":"any"},"defaultValue":{"value":"null"}},{"name":"isFocused","description":"Forces focus state","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isHovered","description":"Forces hover state","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isActive","description":"Forces active state","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isDisabled","description":"Disables the dropdown toggle","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isPlain","description":"Display the toggle with no border or background","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"","description":"Additional props are spread to the container <button>","required":false,"type":{"name":"any"},"defaultValue":null}]}}]},"allGetStartedNavigationJson":{"edges":[{"node":{"text":"About","path":"/get-started/about"}},{"node":{"text":"Develop","path":"/get-started/developers"}},{"node":{"text":"Design","path":"/get-started/designers"}}]},"allDesignGuidelinesNavigationJson":{"edges":[{"node":{"text":"Styles","path":"/design-guidelines/styles/","subNav":[{"text":"Colors","path":"/design-guidelines/styles/colors"},{"text":"Colors for charts","path":"/design-guidelines/styles/colors-for-charts"},{"text":"Icons","path":"/design-guidelines/styles/icons"},{"text":"Typography","path":"/design-guidelines/styles/typography"},{"text":"Spacers","path":"/design-guidelines/styles/spacers"}]}},{"node":{"text":"Usage and behavior","path":"/design-guidelines/usage-and-behavior/","subNav":[{"text":"About modal","path":"/design-guidelines/usage-and-behavior/about-modal"},{"text":"Alerts and notifications","path":"/design-guidelines/usage-and-behavior/alerts-and-notifications"},{"text":"Buttons and links","path":"/design-guidelines/usage-and-behavior/buttons-and-links"},{"text":"Charts","path":"/design-guidelines/usage-and-behavior/charts"},{"text":"Data input","path":"/design-guidelines/usage-and-behavior/data-input"},{"text":"Empty state","path":"/design-guidelines/usage-and-behavior/empty-state"},{"text":"Filters","path":"/design-guidelines/usage-and-behavior/filters"},{"text":"Forms","path":"/design-guidelines/usage-and-behavior/forms"},{"text":"Lists and tables","path":"/design-guidelines/usage-and-behavior/lists-and-tables"},{"text":"Login","path":"/design-guidelines/usage-and-behavior/login"},{"text":"Modal dialog","path":"/design-guidelines/usage-and-behavior/modal"},{"text":"Navigation system","path":"/design-guidelines/usage-and-behavior/navigation-system"},{"text":"Progress bar","path":"/design-guidelines/usage-and-behavior/progress-bar"},{"text":"Toolbar","path":"/design-guidelines/usage-and-behavior/toolbar"}]}},{"node":{"text":"Content","path":"/design-guidelines/content","subNav":[{"text":"Writing","path":"/design-guidelines/content/writing"},{"text":"Voice","path":"/design-guidelines/content/voice-and-tone"},{"text":"Style guide","path":"/design-guidelines/content/grammar-and-terminology"}]}}]}},"pageContext":{"title":"Dropdown","fileAbsolutePath":"/home/travis/build/patternfly/patternfly-org/packages/patternfly-4/_repos/react-core/src/components/Dropdown/Dropdown.md","pathRegex":"/Dropdown/.*/"}}