{"data":{"mdx":{"rawBody":"---\ntitle: 'Chip Group'\ncssPrefix: 'pf-c-chip'\n---\n\nimport { Badge, Chip, ChipGroup, ChipGroupItem, ChipGroupToolbarItem } from '@patternfly/react-core';\n\n## Chip Group Toolbar\n```js\nimport React from 'react';\nimport { Badge, Chip, ChipGroup, ChipGroupItem, ChipGroupToolbarItem } from '@patternfly/react-core';\n\nclass ToolbarChipGroup extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chipGroups: [\n        {\n          category: 'Category 1',\n          chips: ['Chip 1', 'Chip 2']\n        },\n        {\n          category: 'Category 2',\n          chips: ['Chip 3', 'Chip 4']\n        },\n        {\n          category: 'Category 3',\n          chips: ['Chip 5', 'Chip 6', 'Chip 7', 'Chip 8']\n        }\n      ]\n    };\n    this.deleteItem = id => {\n      const copyOfChipGroups = this.state.chipGroups;\n      for (let i = 0; copyOfChipGroups.length > i; i++) {\n        const index = copyOfChipGroups[i].chips.indexOf(id);\n        if (index !== -1) {\n          copyOfChipGroups[i].chips.splice(index, 1);\n          // check if this is the last item in the group category\n          if (copyOfChipGroups[i].chips.length === 0) {\n            copyOfChipGroups.splice(i, 1);\n            this.setState({ chipGroups: copyOfChipGroups });\n          } else {\n            this.setState({ chipGroups: copyOfChipGroups });\n          }\n        }\n      }\n    };\n  }\n\n  render() {\n    const { chipGroups } = this.state;\n\n    return (\n      <ChipGroup withToolbar>\n        {chipGroups.map(currentGroup => (\n          <ChipGroupToolbarItem key={currentGroup.category} categoryName={currentGroup.category}>\n            {currentGroup.chips.map(chip => (\n              <Chip key={chip} onClick={() => this.deleteItem(chip)}>\n                {chip}\n              </Chip>\n            ))}\n          </ChipGroupToolbarItem>\n        ))}\n      </ChipGroup>\n    );\n  }\n}\n```\n\n## Chip Group Multi-Select\n```js\nimport React from 'react';\nimport { Badge, Chip, ChipGroup, ChipGroupItem, ChipGroupToolbarItem } from '@patternfly/react-core';\n\nclass MultiSelectChipGroup extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chipObject: ['Chip 1', 'Really long chip that goes on and on', 'Chip 3', 'Chip 4']\n    };\n    this.deleteItem = id => {\n      const copyOfChipObject = this.state.chipObject;\n      const index = copyOfChipObject.indexOf(id);\n      if (index !== -1) {\n        copyOfChipObject.splice(index, 1);\n        this.setState({ chipObject: copyOfChipObject });\n      }\n    };\n  }\n\n  render() {\n    const { chipObject } = this.state;\n    return (\n      <ChipGroup>\n        {chipObject.map(currentChip => (\n          <Chip key={currentChip} onClick={() => this.deleteItem(currentChip)}>\n            {currentChip}\n          </Chip>\n        ))}\n      </ChipGroup>\n    );\n  }\n}\n```\n\n## Badge Chip Group\n```js\nimport React from 'react';\nimport { Badge, Chip, ChipGroup, ChipGroupItem, ChipGroupToolbarItem } from '@patternfly/react-core';\n\nclass BadgeChip extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      badgeChipArray: [\n        {\n          name: 'Lemons',\n          isRead: true,\n          count: 10\n        },\n        {\n          name: 'Limes',\n          isRead: true,\n          count: 8\n        }\n      ]\n    };\n    this.deleteItem = id => {\n      const copyOfbadgeChipArray = this.state.badgeChipArray;\n      const index = copyOfbadgeChipArray.findIndex(chipObj => chipObj.name === id);\n\n      if (index !== -1) {\n        copyOfbadgeChipArray.splice(index, 1);\n        this.setState({ badgeChipArray: copyOfbadgeChipArray });\n      }\n    };\n  }\n\n  render() {\n    const { badgeChipArray } = this.state;\n    return (\n      <ChipGroup>\n        {badgeChipArray.map(chip => (\n          <Chip key={chip.name} onClick={() => this.deleteItem(chip.name)}>\n            {chip.name}\n            <Badge isRead={chip.isRead}>{chip.count}</Badge>\n          </Chip>\n        ))}\n      </ChipGroup>\n    );\n  }\n}\n```\n","code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Chip Group\",\n  \"cssPrefix\": \"pf-c-chip\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"chip-group-toolbar\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#chip-group-toolbar\",\n    \"aria-label\": \"chip group toolbar permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Chip Group Toolbar\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Badge, Chip, ChipGroup, ChipGroupItem, ChipGroupToolbarItem } from '@patternfly/react-core';\\n\\nclass ToolbarChipGroup extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      chipGroups: [\\n        {\\n          category: 'Category 1',\\n          chips: ['Chip 1', 'Chip 2']\\n        },\\n        {\\n          category: 'Category 2',\\n          chips: ['Chip 3', 'Chip 4']\\n        },\\n        {\\n          category: 'Category 3',\\n          chips: ['Chip 5', 'Chip 6', 'Chip 7', 'Chip 8']\\n        }\\n      ]\\n    };\\n    this.deleteItem = id => {\\n      const copyOfChipGroups = this.state.chipGroups;\\n      for (let i = 0; copyOfChipGroups.length > i; i++) {\\n        const index = copyOfChipGroups[i].chips.indexOf(id);\\n        if (index !== -1) {\\n          copyOfChipGroups[i].chips.splice(index, 1);\\n          // check if this is the last item in the group category\\n          if (copyOfChipGroups[i].chips.length === 0) {\\n            copyOfChipGroups.splice(i, 1);\\n            this.setState({ chipGroups: copyOfChipGroups });\\n          } else {\\n            this.setState({ chipGroups: copyOfChipGroups });\\n          }\\n        }\\n      }\\n    };\\n  }\\n\\n  render() {\\n    const { chipGroups } = this.state;\\n\\n    return (\\n      <ChipGroup withToolbar>\\n        {chipGroups.map(currentGroup => (\\n          <ChipGroupToolbarItem key={currentGroup.category} categoryName={currentGroup.category}>\\n            {currentGroup.chips.map(chip => (\\n              <Chip key={chip} onClick={() => this.deleteItem(chip)}>\\n                {chip}\\n              </Chip>\\n            ))}\\n          </ChipGroupToolbarItem>\\n        ))}\\n      </ChipGroup>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"chip-group-multi-select\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#chip-group-multi-select\",\n    \"aria-label\": \"chip group multi select permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Chip Group Multi-Select\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Badge, Chip, ChipGroup, ChipGroupItem, ChipGroupToolbarItem } from '@patternfly/react-core';\\n\\nclass MultiSelectChipGroup extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      chipObject: ['Chip 1', 'Really long chip that goes on and on', 'Chip 3', 'Chip 4']\\n    };\\n    this.deleteItem = id => {\\n      const copyOfChipObject = this.state.chipObject;\\n      const index = copyOfChipObject.indexOf(id);\\n      if (index !== -1) {\\n        copyOfChipObject.splice(index, 1);\\n        this.setState({ chipObject: copyOfChipObject });\\n      }\\n    };\\n  }\\n\\n  render() {\\n    const { chipObject } = this.state;\\n    return (\\n      <ChipGroup>\\n        {chipObject.map(currentChip => (\\n          <Chip key={currentChip} onClick={() => this.deleteItem(currentChip)}>\\n            {currentChip}\\n          </Chip>\\n        ))}\\n      </ChipGroup>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"badge-chip-group\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#badge-chip-group\",\n    \"aria-label\": \"badge chip group permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Badge Chip Group\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Badge, Chip, ChipGroup, ChipGroupItem, ChipGroupToolbarItem } from '@patternfly/react-core';\\n\\nclass BadgeChip extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      badgeChipArray: [\\n        {\\n          name: 'Lemons',\\n          isRead: true,\\n          count: 10\\n        },\\n        {\\n          name: 'Limes',\\n          isRead: true,\\n          count: 8\\n        }\\n      ]\\n    };\\n    this.deleteItem = id => {\\n      const copyOfbadgeChipArray = this.state.badgeChipArray;\\n      const index = copyOfbadgeChipArray.findIndex(chipObj => chipObj.name === id);\\n\\n      if (index !== -1) {\\n        copyOfbadgeChipArray.splice(index, 1);\\n        this.setState({ badgeChipArray: copyOfbadgeChipArray });\\n      }\\n    };\\n  }\\n\\n  render() {\\n    const { badgeChipArray } = this.state;\\n    return (\\n      <ChipGroup>\\n        {badgeChipArray.map(chip => (\\n          <Chip key={chip.name} onClick={() => this.deleteItem(chip.name)}>\\n            {chip.name}\\n            <Badge isRead={chip.isRead}>{chip.count}</Badge>\\n          </Chip>\\n        ))}\\n      </ChipGroup>\\n    );\\n  }\\n}\\n\")));\n}\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"fileAbsolutePath":"/home/travis/build/patternfly/patternfly-org/packages/patternfly-4/_repos/react-core/src/components/ChipGroup/ChipGroup.md","fullscreen":true}}