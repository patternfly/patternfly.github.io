{"data":{"mdx":{"rawBody":"---\ntitle: 'Table'\ncssPrefix: 'pf-c-table'\n---\nNote: Table lives in its own package at [`@patternfly/react-table`](https://www.npmjs.com/package/@patternfly/react-table)!\n\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  SortByDirection,\n  headerCol,\n  TableVariant,\n  expandable,\n  cellWidth\n} from '@patternfly/react-table';\n\n## Simple Table\n```js\nimport React from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  SortByDirection,\n  headerCol,\n  TableVariant,\n  expandable,\n  cellWidth\n} from '@patternfly/react-table';\n\nclass SimpleTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [{ title: 'Repositories' }, 'Branches', { title: 'Pull requests' }, 'Workspaces', 'Last Commit'],\n      rows: [\n        ['one', 'two', 'three', 'four', 'five'],\n        [\n          {\n            title: <div>one - 2</div>,\n            props: { title: 'hover title', colSpan: 3 }\n          },\n          'four - 2',\n          'five - 2'\n        ]\n      ]\n    };\n  }\n\n  render() {\n    const { columns, rows } = this.state;\n\n    return (\n      <Table caption=\"Simple Table\" cells={columns} rows={rows}>\n        <TableHeader />\n        <TableBody />\n      </Table>\n    );\n  }\n}\n```\n\n## Sortable Table\n```js\nimport React from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  SortByDirection,\n  headerCol,\n  TableVariant,\n  expandable,\n  cellWidth\n} from '@patternfly/react-table';\n\nclass SortableTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        { title: 'Repositories', transforms: [sortable] },\n        'Branches',\n        { title: 'Pull requests', transforms: [sortable] },\n        'Workspaces',\n        'Last Commit'\n      ],\n      rows: [['one', 'two', 'a', 'four', 'five'], ['a', 'two', 'k', 'four', 'five'], ['p', 'two', 'b', 'four', 'five']],\n      sortBy: {}\n    };\n    this.onSort = this.onSort.bind(this);\n  }\n\n  onSort(_event, index, direction) {\n    const sortedRows = this.state.rows.sort((a, b) => (a[index] < b[index] ? -1 : a[index] > b[index] ? 1 : 0));\n    this.setState({\n      sortBy: {\n        index,\n        direction\n      },\n      rows: direction === SortByDirection.asc ? sortedRows : sortedRows.reverse()\n    });\n  }\n\n  render() {\n    const { columns, rows, sortBy } = this.state;\n\n    return (\n      <Table caption=\"Sortable Table\" sortBy={sortBy} onSort={this.onSort} cells={columns} rows={rows}>\n        <TableHeader />\n        <TableBody />\n      </Table>\n    );\n  }\n}\n```\n\n## Selectable Table\n```js\nimport React from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  SortByDirection,\n  headerCol,\n  TableVariant,\n  expandable,\n  cellWidth\n} from '@patternfly/react-table';\n\nclass SelectableTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [{ title: 'Repositories' }, 'Branches', { title: 'Pull requests' }, 'Workspaces', 'Last Commit'],\n      rows: [\n        {\n          cells: ['one', 'two', 'a', 'four', 'five']\n        },\n        {\n          cells: ['a', 'two', 'k', 'four', 'five']\n        },\n        {\n          cells: ['p', 'two', 'b', 'four', 'five']\n        }\n      ]\n    };\n    this.onSelect = this.onSelect.bind(this);\n  }\n\n  onSelect(event, isSelected, rowId) {\n    let rows;\n    if (rowId === -1) {\n      rows = this.state.rows.map(oneRow => {\n        oneRow.selected = isSelected;\n        return oneRow;\n      });\n    } else {\n      rows = [...this.state.rows];\n      rows[rowId].selected = isSelected;\n    }\n    this.setState({\n      rows\n    });\n  }\n\n  render() {\n    const { columns, rows } = this.state;\n\n    return (\n      <Table caption=\"Selectable Table\" onSelect={this.onSelect} cells={columns} rows={rows}>\n        <TableHeader />\n        <TableBody />\n      </Table>\n    );\n  }\n}\n```\n\n## Simple Actions Table\n```js\nimport React from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  SortByDirection,\n  headerCol,\n  TableVariant,\n  expandable,\n  cellWidth\n} from '@patternfly/react-table';\n\nclass SimpleActionsTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [{ title: 'Repositories' }, 'Branches', { title: 'Pull requests' }, 'Workspaces', 'Last Commit'],\n      rows: [\n        {\n          cells: ['one', 'two', 'a', 'four', 'five']\n        },\n        {\n          cells: ['a', 'two', 'k', 'four', 'five']\n        },\n        {\n          cells: ['p', 'two', 'b', 'four', 'five'],\n          disableActions: true\n        }\n      ],\n      actions: [\n        {\n          title: 'Some action',\n          onClick: (event, rowId, rowData, extra) => console.log('clicked on Some action, on row: ', rowId)\n        },\n        {\n          title: <div>Another action</div>,\n          onClick: (event, rowId, rowData, extra) => console.log('clicked on Another action, on row: ', rowId)\n        },\n        {\n          isSeparator: true\n        },\n        {\n          title: 'Third action',\n          onClick: (event, rowId, rowData, extra) => console.log('clicked on Third action, on row: ', rowId)\n        }\n      ]\n    };\n  }\n\n  render() {\n    const { columns, rows, actions } = this.state;\n    return (\n      <Table caption=\"Actions Table\" actions={actions} cells={columns} rows={rows}>\n        <TableHeader />\n        <TableBody />\n      </Table>\n    );\n  }\n}\n```\n\n## Actions Table\n```js\nimport React from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  SortByDirection,\n  headerCol,\n  TableVariant,\n  expandable,\n  cellWidth\n} from '@patternfly/react-table';\n\nclass ActionsTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [{ title: 'Repositories' }, 'Branches', { title: 'Pull requests' }, 'Workspaces', 'Last Commit'],\n      rows: [\n        {\n          cells: ['one', 'two', 'a', 'four', 'five'],\n          type: 'green'\n        },\n        {\n          cells: ['a', 'two', 'k', 'four', 'five']\n        },\n        {\n          cells: ['p', 'two', 'b', 'four', 'five'],\n          type: 'blue'\n        },\n        {\n          cells: ['5', '2', 'b', 'four', 'five']\n        }\n      ]\n    };\n  }\n\n  actionResolver(rowData, { rowIndex }) {\n    if (rowIndex === 1) {\n      return null;\n    }\n\n    const thirdAction =\n      rowData.type === 'blue'\n        ? [\n            {\n              isSeparator: true\n            },\n            {\n              title: 'Third action',\n              onClick: (event, rowId, rowData, extra) =>\n                console.log(`clicked on Third action, on row ${rowId} of type ${rowData.type}`)\n            }\n          ]\n        : [];\n\n    return [\n      {\n        title: 'Some action',\n        onClick: (event, rowId, rowData, extra) =>\n          console.log(`clicked on Some action, on row ${rowId} of type ${rowData.type}`)\n      },\n      {\n        title: <div>Another action</div>,\n        onClick: (event, rowId, rowData, extra) =>\n          console.log(`clicked on Another action, on row ${rowId} of type ${rowData.type}`)\n      },\n      ...thirdAction\n    ];\n  };\n\n  areActionsDisabled(rowData, { rowIndex }) {\n    return rowIndex === 3\n  };\n\n  render() {\n    const { columns, rows } = this.state;\n    return (\n      <Table\n        caption=\"Actions Table\"\n        cells={columns}\n        rows={rows}\n        actionResolver={this.actionResolver}\n        areActionsDisabled={this.areActionsDisabled}\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n    );\n  }\n}\n```\n\n## First cell as Header Table\n```js\nimport React from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  SortByDirection,\n  headerCol,\n  TableVariant,\n  expandable,\n  cellWidth\n} from '@patternfly/react-table';\n\nclass CellHeader extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        { title: 'Header cell', cellTransforms: [headerCol('selectable')] },\n        'Branches',\n        { title: 'Pull requests' },\n        'Workspaces',\n        'Last Commit'\n      ],\n      rows: [['one', 'two', 'three', 'four', 'five']]\n    };\n  }\n\n  render() {\n    const { columns, rows } = this.state;\n\n    return (\n      <Table caption=\"First cell as Header\" rows={rows} cells={columns}>\n        <TableHeader />\n        <TableBody />\n      </Table>\n    );\n  }\n}\n```\n\n## Compact Table\n```js\nimport React from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  SortByDirection,\n  headerCol,\n  TableVariant,\n  expandable,\n  cellWidth\n} from '@patternfly/react-table';\n\nclass CompactTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        { title: 'Header cell' },\n        'Branches',\n        { title: 'Pull requests', props: { className: 'pf-u-text-align-center' } },\n        '' // deliberately empty\n      ],\n      rows: [['one', 'two', 'three', 'four'], ['one', 'two', 'three', 'four'], ['one', 'two', 'three', 'four']]\n    };\n  }\n\n  render() {\n    const { columns, rows } = this.state;\n\n    return (\n      <Table caption=\"Compact Table\" variant={TableVariant.compact} cells={columns} rows={rows}>\n        <TableHeader />\n        <TableBody />\n      </Table>\n    );\n  }\n}\n```\n\n\n## Compact Table Borderless Rows\n```js\nimport React from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  SortByDirection,\n  headerCol,\n  TableVariant,\n  expandable,\n  cellWidth\n} from '@patternfly/react-table';\n\nclass CompactTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        { title: 'Header cell' },\n        'Branches',\n        { title: 'Pull requests', props: { className: 'pf-u-text-align-center' } },\n        '' // deliberately empty\n      ],\n      rows: [['one', 'two', 'three', 'four'], ['one', 'two', 'three', 'four'], ['one', 'two', 'three', 'four']]\n    };\n  }\n\n  render() {\n    const { columns, rows } = this.state;\n\n    return (\n      <Table caption=\"Compact Table with border\" variant={TableVariant.compact} borders={false} cells={columns} rows={rows}>\n        <TableHeader />\n        <TableBody />\n      </Table>\n    );\n  }\n}\n```\n\n## Compact Expandable Table\n```js\nimport React from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  SortByDirection,\n  headerCol,\n  TableVariant,\n  expandable,\n  cellWidth\n} from '@patternfly/react-table';\n\nclass ContactExpandableTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        {\n          title: 'Header cell',\n          cellFormatters: [expandable]\n        },\n        'Branches',\n        { title: 'Pull requests' },\n        '' // deliberately empty\n      ],\n      rows: [\n        {\n          cells: ['one', 'two', 'three', 'four']\n        },\n        {\n          isOpen: true,\n          cells: ['parent - 1', 'two', 'three', 'four']\n        },\n        {\n          parent: 1,\n          fullWidth: true,\n          cells: ['child - 1']\n        },\n        {\n          isOpen: false,\n          cells: ['parent - 2', 'two', 'three', 'four']\n        },\n        {\n          parent: 3,\n          cells: ['child - 2']\n        },\n        {\n          isOpen: false,\n          cells: ['parent - 3', 'two', 'three', 'four']\n        },\n        {\n          parent: 5,\n          fullWidth: true,\n          noPadding: true,\n          cells: ['child - 3']\n        }\n      ]\n    };\n    this.onCollapse = this.onCollapse.bind(this);\n  }\n\n  onCollapse(event, rowKey, isOpen) {\n    const { rows } = this.state;\n    /**\n     * Please do not use rowKey as row index for more complex tables.\n     * Rather use some kind of identifier like ID passed with each row.\n     */\n    rows[rowKey].isOpen = isOpen;\n    this.setState({\n      rows\n    });\n  }\n\n  render() {\n    const { columns, rows } = this.state;\n\n    return (\n      <Table caption=\"Compact expandable table\" variant={TableVariant.compact} onCollapse={this.onCollapse} rows={rows} cells={columns}>\n        <TableHeader />\n        <TableBody />\n      </Table>\n    );\n  }\n}\n\n```\n\n## Table with Width Modifiers\n```js\nimport React from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  SortByDirection,\n  headerCol,\n  TableVariant,\n  expandable,\n  cellWidth\n} from '@patternfly/react-table';\n\nclass WidthTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        { title: 'Header cell', transforms: [cellWidth(10)] },\n        'Branches',\n        { title: 'Pull requests', transforms: [cellWidth(30)] },\n        'Workspaces',\n        {\n          title: 'Last Commit',\n          transforms: [cellWidth('max')]\n        }\n      ],\n      rows: [['one', 'two', 'three', 'four', 'five']]\n    };\n  }\n\n  render() {\n    const { columns, rows } = this.state;\n\n    return (\n      <Table caption=\"Table with Width Modifiers\" cells={columns} rows={rows}>\n        <TableHeader />\n        <TableBody />\n      </Table>\n    );\n  }\n}\n```\n\n## Collapsible table\n```js\nimport React from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  SortByDirection,\n  headerCol,\n  TableVariant,\n  expandable,\n  cellWidth\n} from '@patternfly/react-table';\n\nclass CollapsibleTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        {\n          title: 'Header cell',\n          cellFormatters: [expandable]\n        },\n        'Branches',\n        { title: 'Pull requests' },\n        'Workspaces',\n        {\n          title: 'Last Commit'\n        }\n      ],\n      rows: [\n        {\n          cells: ['one', 'two', 'three', 'four', 'five']\n        },\n        {\n          isOpen: true,\n          cells: ['parent - 1', 'two', 'three', 'four', 'five']\n        },\n        {\n          parent: 1,\n          fullWidth: true,\n          cells: ['child - 1']\n        },\n        {\n          isOpen: false,\n          cells: ['parent - 2', 'two', 'three', 'four', 'five']\n        },\n        {\n          parent: 3,\n          cells: ['child - 2']\n        },\n        {\n          isOpen: false,\n          cells: ['parent - 3', 'two', 'three', 'four', 'five']\n        },\n        {\n          parent: 5,\n          fullWidth: true,\n          noPadding: true,\n          cells: ['child - 3']\n        }\n      ]\n    };\n    this.onCollapse = this.onCollapse.bind(this);\n  }\n\n  onCollapse(event, rowKey, isOpen) {\n    const { rows } = this.state;\n    /**\n     * Please do not use rowKey as row index for more complex tables.\n     * Rather use some kind of identifier like ID passed with each row.\n     */\n    rows[rowKey].isOpen = isOpen;\n    this.setState({\n      rows\n    });\n  }\n\n  render() {\n    const { columns, rows } = this.state;\n\n    return (\n      <Table caption=\"Collapsible table\" onCollapse={this.onCollapse} rows={rows} cells={columns}>\n        <TableHeader />\n        <TableBody />\n      </Table>\n    );\n  }\n}\n\n```\n","code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Table\",\n  \"cssPrefix\": \"pf-c-table\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Note: Table lives in its own package at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/@patternfly/react-table\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"@patternfly/react-table\")), \"!\"), mdx(\"h2\", {\n    \"id\": \"simple-table\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#simple-table\",\n    \"aria-label\": \"simple table permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Simple Table\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport {\\n  Table,\\n  TableHeader,\\n  TableBody,\\n  sortable,\\n  SortByDirection,\\n  headerCol,\\n  TableVariant,\\n  expandable,\\n  cellWidth\\n} from '@patternfly/react-table';\\n\\nclass SimpleTable extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      columns: [{ title: 'Repositories' }, 'Branches', { title: 'Pull requests' }, 'Workspaces', 'Last Commit'],\\n      rows: [\\n        ['one', 'two', 'three', 'four', 'five'],\\n        [\\n          {\\n            title: <div>one - 2</div>,\\n            props: { title: 'hover title', colSpan: 3 }\\n          },\\n          'four - 2',\\n          'five - 2'\\n        ]\\n      ]\\n    };\\n  }\\n\\n  render() {\\n    const { columns, rows } = this.state;\\n\\n    return (\\n      <Table caption=\\\"Simple Table\\\" cells={columns} rows={rows}>\\n        <TableHeader />\\n        <TableBody />\\n      </Table>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"sortable-table\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#sortable-table\",\n    \"aria-label\": \"sortable table permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Sortable Table\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport {\\n  Table,\\n  TableHeader,\\n  TableBody,\\n  sortable,\\n  SortByDirection,\\n  headerCol,\\n  TableVariant,\\n  expandable,\\n  cellWidth\\n} from '@patternfly/react-table';\\n\\nclass SortableTable extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      columns: [\\n        { title: 'Repositories', transforms: [sortable] },\\n        'Branches',\\n        { title: 'Pull requests', transforms: [sortable] },\\n        'Workspaces',\\n        'Last Commit'\\n      ],\\n      rows: [['one', 'two', 'a', 'four', 'five'], ['a', 'two', 'k', 'four', 'five'], ['p', 'two', 'b', 'four', 'five']],\\n      sortBy: {}\\n    };\\n    this.onSort = this.onSort.bind(this);\\n  }\\n\\n  onSort(_event, index, direction) {\\n    const sortedRows = this.state.rows.sort((a, b) => (a[index] < b[index] ? -1 : a[index] > b[index] ? 1 : 0));\\n    this.setState({\\n      sortBy: {\\n        index,\\n        direction\\n      },\\n      rows: direction === SortByDirection.asc ? sortedRows : sortedRows.reverse()\\n    });\\n  }\\n\\n  render() {\\n    const { columns, rows, sortBy } = this.state;\\n\\n    return (\\n      <Table caption=\\\"Sortable Table\\\" sortBy={sortBy} onSort={this.onSort} cells={columns} rows={rows}>\\n        <TableHeader />\\n        <TableBody />\\n      </Table>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"selectable-table\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#selectable-table\",\n    \"aria-label\": \"selectable table permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Selectable Table\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport {\\n  Table,\\n  TableHeader,\\n  TableBody,\\n  sortable,\\n  SortByDirection,\\n  headerCol,\\n  TableVariant,\\n  expandable,\\n  cellWidth\\n} from '@patternfly/react-table';\\n\\nclass SelectableTable extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      columns: [{ title: 'Repositories' }, 'Branches', { title: 'Pull requests' }, 'Workspaces', 'Last Commit'],\\n      rows: [\\n        {\\n          cells: ['one', 'two', 'a', 'four', 'five']\\n        },\\n        {\\n          cells: ['a', 'two', 'k', 'four', 'five']\\n        },\\n        {\\n          cells: ['p', 'two', 'b', 'four', 'five']\\n        }\\n      ]\\n    };\\n    this.onSelect = this.onSelect.bind(this);\\n  }\\n\\n  onSelect(event, isSelected, rowId) {\\n    let rows;\\n    if (rowId === -1) {\\n      rows = this.state.rows.map(oneRow => {\\n        oneRow.selected = isSelected;\\n        return oneRow;\\n      });\\n    } else {\\n      rows = [...this.state.rows];\\n      rows[rowId].selected = isSelected;\\n    }\\n    this.setState({\\n      rows\\n    });\\n  }\\n\\n  render() {\\n    const { columns, rows } = this.state;\\n\\n    return (\\n      <Table caption=\\\"Selectable Table\\\" onSelect={this.onSelect} cells={columns} rows={rows}>\\n        <TableHeader />\\n        <TableBody />\\n      </Table>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"simple-actions-table\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#simple-actions-table\",\n    \"aria-label\": \"simple actions table permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Simple Actions Table\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport {\\n  Table,\\n  TableHeader,\\n  TableBody,\\n  sortable,\\n  SortByDirection,\\n  headerCol,\\n  TableVariant,\\n  expandable,\\n  cellWidth\\n} from '@patternfly/react-table';\\n\\nclass SimpleActionsTable extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      columns: [{ title: 'Repositories' }, 'Branches', { title: 'Pull requests' }, 'Workspaces', 'Last Commit'],\\n      rows: [\\n        {\\n          cells: ['one', 'two', 'a', 'four', 'five']\\n        },\\n        {\\n          cells: ['a', 'two', 'k', 'four', 'five']\\n        },\\n        {\\n          cells: ['p', 'two', 'b', 'four', 'five'],\\n          disableActions: true\\n        }\\n      ],\\n      actions: [\\n        {\\n          title: 'Some action',\\n          onClick: (event, rowId, rowData, extra) => console.log('clicked on Some action, on row: ', rowId)\\n        },\\n        {\\n          title: <div>Another action</div>,\\n          onClick: (event, rowId, rowData, extra) => console.log('clicked on Another action, on row: ', rowId)\\n        },\\n        {\\n          isSeparator: true\\n        },\\n        {\\n          title: 'Third action',\\n          onClick: (event, rowId, rowData, extra) => console.log('clicked on Third action, on row: ', rowId)\\n        }\\n      ]\\n    };\\n  }\\n\\n  render() {\\n    const { columns, rows, actions } = this.state;\\n    return (\\n      <Table caption=\\\"Actions Table\\\" actions={actions} cells={columns} rows={rows}>\\n        <TableHeader />\\n        <TableBody />\\n      </Table>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"actions-table\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#actions-table\",\n    \"aria-label\": \"actions table permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Actions Table\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport {\\n  Table,\\n  TableHeader,\\n  TableBody,\\n  sortable,\\n  SortByDirection,\\n  headerCol,\\n  TableVariant,\\n  expandable,\\n  cellWidth\\n} from '@patternfly/react-table';\\n\\nclass ActionsTable extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      columns: [{ title: 'Repositories' }, 'Branches', { title: 'Pull requests' }, 'Workspaces', 'Last Commit'],\\n      rows: [\\n        {\\n          cells: ['one', 'two', 'a', 'four', 'five'],\\n          type: 'green'\\n        },\\n        {\\n          cells: ['a', 'two', 'k', 'four', 'five']\\n        },\\n        {\\n          cells: ['p', 'two', 'b', 'four', 'five'],\\n          type: 'blue'\\n        },\\n        {\\n          cells: ['5', '2', 'b', 'four', 'five']\\n        }\\n      ]\\n    };\\n  }\\n\\n  actionResolver(rowData, { rowIndex }) {\\n    if (rowIndex === 1) {\\n      return null;\\n    }\\n\\n    const thirdAction =\\n      rowData.type === 'blue'\\n        ? [\\n            {\\n              isSeparator: true\\n            },\\n            {\\n              title: 'Third action',\\n              onClick: (event, rowId, rowData, extra) =>\\n                console.log(`clicked on Third action, on row ${rowId} of type ${rowData.type}`)\\n            }\\n          ]\\n        : [];\\n\\n    return [\\n      {\\n        title: 'Some action',\\n        onClick: (event, rowId, rowData, extra) =>\\n          console.log(`clicked on Some action, on row ${rowId} of type ${rowData.type}`)\\n      },\\n      {\\n        title: <div>Another action</div>,\\n        onClick: (event, rowId, rowData, extra) =>\\n          console.log(`clicked on Another action, on row ${rowId} of type ${rowData.type}`)\\n      },\\n      ...thirdAction\\n    ];\\n  };\\n\\n  areActionsDisabled(rowData, { rowIndex }) {\\n    return rowIndex === 3\\n  };\\n\\n  render() {\\n    const { columns, rows } = this.state;\\n    return (\\n      <Table\\n        caption=\\\"Actions Table\\\"\\n        cells={columns}\\n        rows={rows}\\n        actionResolver={this.actionResolver}\\n        areActionsDisabled={this.areActionsDisabled}\\n      >\\n        <TableHeader />\\n        <TableBody />\\n      </Table>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"first-cell-as-header-table\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#first-cell-as-header-table\",\n    \"aria-label\": \"first cell as header table permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"First cell as Header Table\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport {\\n  Table,\\n  TableHeader,\\n  TableBody,\\n  sortable,\\n  SortByDirection,\\n  headerCol,\\n  TableVariant,\\n  expandable,\\n  cellWidth\\n} from '@patternfly/react-table';\\n\\nclass CellHeader extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      columns: [\\n        { title: 'Header cell', cellTransforms: [headerCol('selectable')] },\\n        'Branches',\\n        { title: 'Pull requests' },\\n        'Workspaces',\\n        'Last Commit'\\n      ],\\n      rows: [['one', 'two', 'three', 'four', 'five']]\\n    };\\n  }\\n\\n  render() {\\n    const { columns, rows } = this.state;\\n\\n    return (\\n      <Table caption=\\\"First cell as Header\\\" rows={rows} cells={columns}>\\n        <TableHeader />\\n        <TableBody />\\n      </Table>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"compact-table\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#compact-table\",\n    \"aria-label\": \"compact table permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Compact Table\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport {\\n  Table,\\n  TableHeader,\\n  TableBody,\\n  sortable,\\n  SortByDirection,\\n  headerCol,\\n  TableVariant,\\n  expandable,\\n  cellWidth\\n} from '@patternfly/react-table';\\n\\nclass CompactTable extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      columns: [\\n        { title: 'Header cell' },\\n        'Branches',\\n        { title: 'Pull requests', props: { className: 'pf-u-text-align-center' } },\\n        '' // deliberately empty\\n      ],\\n      rows: [['one', 'two', 'three', 'four'], ['one', 'two', 'three', 'four'], ['one', 'two', 'three', 'four']]\\n    };\\n  }\\n\\n  render() {\\n    const { columns, rows } = this.state;\\n\\n    return (\\n      <Table caption=\\\"Compact Table\\\" variant={TableVariant.compact} cells={columns} rows={rows}>\\n        <TableHeader />\\n        <TableBody />\\n      </Table>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"compact-table-borderless-rows\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#compact-table-borderless-rows\",\n    \"aria-label\": \"compact table borderless rows permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Compact Table Borderless Rows\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport {\\n  Table,\\n  TableHeader,\\n  TableBody,\\n  sortable,\\n  SortByDirection,\\n  headerCol,\\n  TableVariant,\\n  expandable,\\n  cellWidth\\n} from '@patternfly/react-table';\\n\\nclass CompactTable extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      columns: [\\n        { title: 'Header cell' },\\n        'Branches',\\n        { title: 'Pull requests', props: { className: 'pf-u-text-align-center' } },\\n        '' // deliberately empty\\n      ],\\n      rows: [['one', 'two', 'three', 'four'], ['one', 'two', 'three', 'four'], ['one', 'two', 'three', 'four']]\\n    };\\n  }\\n\\n  render() {\\n    const { columns, rows } = this.state;\\n\\n    return (\\n      <Table caption=\\\"Compact Table with border\\\" variant={TableVariant.compact} borders={false} cells={columns} rows={rows}>\\n        <TableHeader />\\n        <TableBody />\\n      </Table>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"compact-expandable-table\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#compact-expandable-table\",\n    \"aria-label\": \"compact expandable table permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Compact Expandable Table\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport {\\n  Table,\\n  TableHeader,\\n  TableBody,\\n  sortable,\\n  SortByDirection,\\n  headerCol,\\n  TableVariant,\\n  expandable,\\n  cellWidth\\n} from '@patternfly/react-table';\\n\\nclass ContactExpandableTable extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      columns: [\\n        {\\n          title: 'Header cell',\\n          cellFormatters: [expandable]\\n        },\\n        'Branches',\\n        { title: 'Pull requests' },\\n        '' // deliberately empty\\n      ],\\n      rows: [\\n        {\\n          cells: ['one', 'two', 'three', 'four']\\n        },\\n        {\\n          isOpen: true,\\n          cells: ['parent - 1', 'two', 'three', 'four']\\n        },\\n        {\\n          parent: 1,\\n          fullWidth: true,\\n          cells: ['child - 1']\\n        },\\n        {\\n          isOpen: false,\\n          cells: ['parent - 2', 'two', 'three', 'four']\\n        },\\n        {\\n          parent: 3,\\n          cells: ['child - 2']\\n        },\\n        {\\n          isOpen: false,\\n          cells: ['parent - 3', 'two', 'three', 'four']\\n        },\\n        {\\n          parent: 5,\\n          fullWidth: true,\\n          noPadding: true,\\n          cells: ['child - 3']\\n        }\\n      ]\\n    };\\n    this.onCollapse = this.onCollapse.bind(this);\\n  }\\n\\n  onCollapse(event, rowKey, isOpen) {\\n    const { rows } = this.state;\\n    /**\\n     * Please do not use rowKey as row index for more complex tables.\\n     * Rather use some kind of identifier like ID passed with each row.\\n     */\\n    rows[rowKey].isOpen = isOpen;\\n    this.setState({\\n      rows\\n    });\\n  }\\n\\n  render() {\\n    const { columns, rows } = this.state;\\n\\n    return (\\n      <Table caption=\\\"Compact expandable table\\\" variant={TableVariant.compact} onCollapse={this.onCollapse} rows={rows} cells={columns}>\\n        <TableHeader />\\n        <TableBody />\\n      </Table>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"table-with-width-modifiers\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#table-with-width-modifiers\",\n    \"aria-label\": \"table with width modifiers permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Table with Width Modifiers\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport {\\n  Table,\\n  TableHeader,\\n  TableBody,\\n  sortable,\\n  SortByDirection,\\n  headerCol,\\n  TableVariant,\\n  expandable,\\n  cellWidth\\n} from '@patternfly/react-table';\\n\\nclass WidthTable extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      columns: [\\n        { title: 'Header cell', transforms: [cellWidth(10)] },\\n        'Branches',\\n        { title: 'Pull requests', transforms: [cellWidth(30)] },\\n        'Workspaces',\\n        {\\n          title: 'Last Commit',\\n          transforms: [cellWidth('max')]\\n        }\\n      ],\\n      rows: [['one', 'two', 'three', 'four', 'five']]\\n    };\\n  }\\n\\n  render() {\\n    const { columns, rows } = this.state;\\n\\n    return (\\n      <Table caption=\\\"Table with Width Modifiers\\\" cells={columns} rows={rows}>\\n        <TableHeader />\\n        <TableBody />\\n      </Table>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"collapsible-table\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#collapsible-table\",\n    \"aria-label\": \"collapsible table permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Collapsible table\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport {\\n  Table,\\n  TableHeader,\\n  TableBody,\\n  sortable,\\n  SortByDirection,\\n  headerCol,\\n  TableVariant,\\n  expandable,\\n  cellWidth\\n} from '@patternfly/react-table';\\n\\nclass CollapsibleTable extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      columns: [\\n        {\\n          title: 'Header cell',\\n          cellFormatters: [expandable]\\n        },\\n        'Branches',\\n        { title: 'Pull requests' },\\n        'Workspaces',\\n        {\\n          title: 'Last Commit'\\n        }\\n      ],\\n      rows: [\\n        {\\n          cells: ['one', 'two', 'three', 'four', 'five']\\n        },\\n        {\\n          isOpen: true,\\n          cells: ['parent - 1', 'two', 'three', 'four', 'five']\\n        },\\n        {\\n          parent: 1,\\n          fullWidth: true,\\n          cells: ['child - 1']\\n        },\\n        {\\n          isOpen: false,\\n          cells: ['parent - 2', 'two', 'three', 'four', 'five']\\n        },\\n        {\\n          parent: 3,\\n          cells: ['child - 2']\\n        },\\n        {\\n          isOpen: false,\\n          cells: ['parent - 3', 'two', 'three', 'four', 'five']\\n        },\\n        {\\n          parent: 5,\\n          fullWidth: true,\\n          noPadding: true,\\n          cells: ['child - 3']\\n        }\\n      ]\\n    };\\n    this.onCollapse = this.onCollapse.bind(this);\\n  }\\n\\n  onCollapse(event, rowKey, isOpen) {\\n    const { rows } = this.state;\\n    /**\\n     * Please do not use rowKey as row index for more complex tables.\\n     * Rather use some kind of identifier like ID passed with each row.\\n     */\\n    rows[rowKey].isOpen = isOpen;\\n    this.setState({\\n      rows\\n    });\\n  }\\n\\n  render() {\\n    const { columns, rows } = this.state;\\n\\n    return (\\n      <Table caption=\\\"Collapsible table\\\" onCollapse={this.onCollapse} rows={rows} cells={columns}>\\n        <TableHeader />\\n        <TableBody />\\n      </Table>\\n    );\\n  }\\n}\\n\")));\n}\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"fileAbsolutePath":"/home/travis/build/patternfly/patternfly-org/packages/patternfly-4/_repos/react-table/src/components/Table/Table.md","fullscreen":true}}