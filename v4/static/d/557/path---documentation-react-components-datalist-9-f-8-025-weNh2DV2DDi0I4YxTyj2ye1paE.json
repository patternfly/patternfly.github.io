{"data":{"mdx":{"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Data list\",\n  \"cssPrefix\": \"pf-c-data-list\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"simple-data-list\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#simple-data-list\",\n    \"aria-label\": \"simple data list permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Simple data list\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport {\\n  Button,\\n  DataList,\\n  DataListItem,\\n  DataListItemCells,\\n  DataListCell,\\n  DataListCheck,\\n  DataListAction,\\n  DataListToggle,\\n  DataListContent,\\n  Dropdown,\\n  KebabToggle,\\n  DropdownItem\\n} from '@patternfly/react-core';\\n\\nSimpleDataList = () => (\\n  <DataList aria-label=\\\"Simple data list example\\\">\\n    <DataListItem aria-labelledby=\\\"simple-item1\\\">\\n      <DataListItemRow>\\n        <DataListItemCells\\n          dataListCells={[\\n            <DataListCell key=\\\"primary content\\\">\\n              <span id=\\\"simple-item1\\\">Primary content</span>\\n            </DataListCell>,\\n            <DataListCell key=\\\"secondary content\\\">Secondary content</DataListCell>\\n          ]}\\n        />\\n      </DataListItemRow>\\n    </DataListItem>\\n    <DataListItem aria-labelledby=\\\"simple-item2\\\">\\n      <DataListItemRow>\\n        <DataListItemCells\\n          dataListCells={[\\n            <DataListCell isFilled={false} key=\\\"secondary content fill\\\">\\n              <span id=\\\"simple-item2\\\">Secondary content (pf-m-no-fill)</span>\\n            </DataListCell>,\\n            <DataListCell isFilled={false} alignRight key=\\\"secondary content align\\\">\\n              Secondary content (pf-m-align-right pf-m-no-fill)\\n            </DataListCell>\\n          ]}\\n        />\\n      </DataListItemRow>\\n    </DataListItem>\\n  </DataList>\\n);\\n\")), mdx(\"h2\", {\n    \"id\": \"data-list-checkboxes-actions-and-additional-cells\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#data-list-checkboxes-actions-and-additional-cells\",\n    \"aria-label\": \"data list checkboxes actions and additional cells permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Data list checkboxes, actions and additional cells\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport {\\n  Button,\\n  DataList,\\n  DataListItem,\\n  DataListItemCells,\\n  DataListItemRow,\\n  DataListCell,\\n  DataListCheck,\\n  DataListAction,\\n  Dropdown,\\n  DropdownItem,\\n  DropdownPosition,\\n  KebabToggle\\n} from '@patternfly/react-core';\\n\\nclass CheckboxActionDataList extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = { isOpen: false };\\n\\n    this.onToggle = isOpen => {\\n      this.setState({ isOpen });\\n    };\\n\\n    this.onSelect = event => {\\n      this.setState(prevState => ({\\n        isOpen: !prevState.isOpen\\n      }));\\n    };\\n  }\\n\\n  render() {\\n    return (\\n      <DataList aria-label=\\\"Checkbox and action data list example\\\">\\n        <DataListItem aria-labelledby=\\\"check-action-item1\\\">\\n          <DataListItemRow>\\n            <DataListCheck aria-labelledby=\\\"check-action-item1\\\" name=\\\"check-action-check1\\\" />\\n            <DataListItemCells\\n              dataListCells={[\\n                <DataListCell key=\\\"primary content\\\">\\n                  <span id=\\\"check-action-item1\\\">Primary content</span> Dolor sit amet, consectetur adipisicing elit, sed\\n                  do eiusmod.\\n                </DataListCell>,\\n                <DataListCell key=\\\"secondary content 1\\\">\\n                  Secondary content. Dolor sit amet, consectetur adipisicing elit, sed do eiusmod.\\n                </DataListCell>,\\n                <DataListCell key=\\\"secondary content 2\\\">\\n                  <span>Tertiary content</span> Dolor sit amet, consectetur adipisicing elit, sed do eiusmod.\\n                </DataListCell>,\\n                <DataListCell key=\\\"more content 1\\\">\\n                  <span>More content</span> Dolor sit amet, consectetur adipisicing elit, sed do eiusmod.\\n                </DataListCell>,\\n                <DataListCell key=\\\"more content 2\\\">\\n                  <span>More content</span> Dolor sit amet, consectetur adipisicing elit, sed do eiusmod.\\n                </DataListCell>\\n              ]}\\n            />\\n            <DataListAction\\n              aria-labelledby=\\\"check-action-item1 check-action-action1\\\"\\n              id=\\\"check-action-action1\\\"\\n              aria-label=\\\"Actions\\\"\\n            >\\n              <Dropdown\\n                isPlain\\n                position={DropdownPosition.right}\\n                isOpen={this.state.isOpen}\\n                onSelect={this.onSelect}\\n                toggle={<KebabToggle onToggle={this.onToggle} />}\\n                dropdownItems={[\\n                  <DropdownItem key=\\\"link\\\">Link</DropdownItem>,\\n                  <DropdownItem key=\\\"action\\\" component=\\\"button\\\">\\n                    Action\\n                  </DropdownItem>,\\n                  <DropdownItem key=\\\"disabled link\\\" isDisabled>\\n                    Disabled Link\\n                  </DropdownItem>\\n                ]}\\n              />\\n            </DataListAction>\\n          </DataListItemRow>\\n        </DataListItem>\\n        <DataListItem aria-labelledby=\\\"check-action-item2\\\">\\n          <DataListItemRow>\\n            <DataListCheck aria-labelledby=\\\"check-action-item2\\\" name=\\\"check-action-check2\\\" />\\n            <DataListItemCells\\n              dataListCells={[\\n                <DataListCell key=\\\"primary content\\\">\\n                  <span id=\\\"check-action-item2\\\">Primary content - Lorem ipsum</span> dolor sit amet, consectetur\\n                  adipisicing elit, sed do eiusmod.\\n                </DataListCell>,\\n                <DataListCell key=\\\"secondary content\\\">\\n                  Secondary content. Dolor sit amet, consectetur adipisicing elit, sed do eiusmod.\\n                </DataListCell>\\n              ]}\\n            />\\n            <DataListAction\\n              aria-labelledby=\\\"check-action-item2 check-action-action2\\\"\\n              id=\\\"check-action-action2\\\"\\n              aria-label=\\\"Actions\\\"\\n            >\\n              <Button variant=\\\"primary\\\">Primary</Button>\\n              <Button variant=\\\"secondary\\\">Secondary</Button>\\n            </DataListAction>\\n          </DataListItemRow>\\n        </DataListItem>\\n      </DataList>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"data-list-actions-single-and-multiple\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#data-list-actions-single-and-multiple\",\n    \"aria-label\": \"data list actions single and multiple permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Data list actions: single and multiple\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport {\\n  Button,\\n  Dropdown,\\n  DropdownItem,\\n  DropdownPosition,\\n  KebabToggle,\\n  DataList,\\n  DataListItem,\\n  DataListCell,\\n  DataListItemRow,\\n  DataListCheck,\\n  DataListItemCells,\\n  DataListAction\\n} from '@patternfly/react-core';\\n\\nclass ActionsDataList extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = { isOpen: false, isDeleted: false };\\n\\n    this.onToggle = isOpen => {\\n      this.setState({ isOpen });\\n    };\\n\\n    this.onSelect = event => {\\n      this.setState(prevState => ({\\n        isOpen: !prevState.isOpen\\n      }));\\n    };\\n  }\\n\\n  render() {\\n    return (\\n      <React.Fragment>\\n        <DataList aria-label=\\\"single action data list example \\\">\\n          {!this.state.isDeleted && (\\n            <DataListItem aria-labelledby=\\\"single-action-item1\\\">\\n              <DataListItemRow>\\n                <DataListItemCells\\n                  dataListCells={[\\n                    <DataListCell key=\\\"primary content\\\">\\n                      <span id=\\\"single-action-item1\\\">Single actionable Primary content</span>\\n                    </DataListCell>,\\n                    <DataListCell key=\\\"secondary content\\\">Single actionable Secondary content</DataListCell>\\n                  ]}\\n                />\\n                <DataListAction\\n                  aria-labelledby=\\\"single-action-item1 single-action-action1\\\"\\n                  id=\\\"single-action-action1\\\"\\n                  aria-label=\\\"Actions\\\"\\n                >\\n                  <Button\\n                    onClick={() => {\\n                      if (confirm('Are you sure?')) {\\n                        this.setState({ isDeleted: true });\\n                      }\\n                    }}\\n                    variant=\\\"primary\\\"\\n                    key=\\\"delete-action\\\"\\n                  >\\n                    Delete\\n                  </Button>\\n                </DataListAction>\\n              </DataListItemRow>\\n            </DataListItem>\\n          )}\\n          <DataListItem aria-labelledby=\\\"multi-actions-item1\\\">\\n            <DataListItemRow>\\n              <DataListItemCells\\n                dataListCells={[\\n                  <DataListCell key=\\\"primary content\\\">\\n                    <span id=\\\"multi-actions-item1\\\">Multi actions Primary content</span>\\n                  </DataListCell>,\\n                  <DataListCell key=\\\"secondary content\\\">Multi actions Secondary content</DataListCell>\\n                ]}\\n              />\\n              <DataListAction\\n                aria-labelledby=\\\"multi-actions-item1 multi-actions-action1\\\"\\n                id=\\\"multi-actions-action1\\\"\\n                aria-label=\\\"Actions\\\"\\n              >\\n                <Dropdown\\n                  isPlain\\n                  position={DropdownPosition.right}\\n                  isOpen={this.state.isOpen}\\n                  onSelect={this.onSelect}\\n                  toggle={<KebabToggle onToggle={this.onToggle} />}\\n                  dropdownItems={[\\n                    <DropdownItem key=\\\"link\\\">Link</DropdownItem>,\\n                    <DropdownItem key=\\\"action\\\" component=\\\"button\\\">\\n                      Action\\n                    </DropdownItem>,\\n                    <DropdownItem key=\\\"disabled link\\\" isDisabled>\\n                      Disabled Link\\n                    </DropdownItem>\\n                  ]}\\n                />\\n              </DataListAction>\\n            </DataListItemRow>\\n          </DataListItem>\\n        </DataList>\\n      </React.Fragment>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"data-list-expandable\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#data-list-expandable\",\n    \"aria-label\": \"data list expandable permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Data list expandable\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport {\\n  Button,\\n  DataList,\\n  DataListItem,\\n  DataListCell,\\n  DataListCheck,\\n  DataListAction,\\n  DataListToggle,\\n  DataListContent,\\n  DataListCheck,\\n  DataListAction,\\n  DataListItemCells,\\n  Dropdown,\\n  DropdownItem,\\n  DropdownPosition,\\n  KebabToggle\\n} from '@patternfly/react-core';\\nimport { CodeBranchIcon } from '@patternfly/react-icons';\\n\\nclass ExpandableDataList extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      expanded: ['ex-toggle1', 'ex-toggle3'],\\n      isOpen1: false,\\n      isOpen2: false,\\n      isOpen3: false\\n    };\\n\\n    this.onToggle1 = isOpen1 => {\\n      this.setState({ isOpen1 });\\n    };\\n\\n    this.onToggle2 = isOpen2 => {\\n      this.setState({ isOpen2 });\\n    };\\n\\n    this.onToggle3 = isOpen3 => {\\n      this.setState({ isOpen3 });\\n    };\\n\\n    this.onSelect1 = event => {\\n      this.setState(prevState => ({\\n        isOpen1: !prevState.isOpen1\\n      }));\\n    };\\n\\n    this.onSelect2 = event => {\\n      this.setState(prevState => ({\\n        isOpen2: !prevState.isOpen2\\n      }));\\n    };\\n\\n    this.onSelect3 = event => {\\n      this.setState(prevState => ({\\n        isOpen3: !prevState.isOpen3\\n      }));\\n    };\\n  }\\n\\n  render() {\\n    const toggle = id => {\\n      const expanded = this.state.expanded;\\n      const index = expanded.indexOf(id);\\n      const newExpanded =\\n        index >= 0 ? [...expanded.slice(0, index), ...expanded.slice(index + 1, expanded.length)] : [...expanded, id];\\n      this.setState(() => ({ expanded: newExpanded }));\\n    };\\n    return (\\n      <DataList aria-label=\\\"Expandable data list example\\\">\\n        <DataListItem aria-labelledby=\\\"ex-item1\\\" isExpanded={this.state.expanded.includes('ex-toggle1')}>\\n          <DataListItemRow>\\n            <DataListToggle\\n              onClick={() => toggle('ex-toggle1')}\\n              isExpanded={this.state.expanded.includes('ex-toggle1')}\\n              id=\\\"ex-toggle1\\\"\\n              aria-controls=\\\"ex-expand1\\\"\\n            />\\n            <DataListItemCells\\n              dataListCells={[\\n                <DataListCell isIcon key=\\\"icon\\\">\\n                  <CodeBranchIcon />\\n                </DataListCell>,\\n                <DataListCell key=\\\"primary content\\\">\\n                  <div id=\\\"ex-item1\\\">Primary content</div>\\n                  <span>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span>\\n                  <a href=\\\"#\\\">link</a>\\n                </DataListCell>,\\n                <DataListCell key=\\\"secondary content\\\">\\n                  <span>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span>\\n                </DataListCell>,\\n                <DataListCell key=\\\"secondary content 2\\\">\\n                  <span>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span>\\n                </DataListCell>\\n              ]}\\n            />\\n            <DataListAction aria-labelledby=\\\"ex-item1 ex-action1\\\" id=\\\"ex-action1\\\" aria-label=\\\"Actions\\\">\\n              <Dropdown\\n                isPlain\\n                position={DropdownPosition.right}\\n                isOpen={this.state.isOpen1}\\n                onSelect={this.onSelect1}\\n                toggle={<KebabToggle onToggle={this.onToggle1} />}\\n                dropdownItems={[\\n                  <DropdownItem key=\\\"link\\\">Link</DropdownItem>,\\n                  <DropdownItem key=\\\"action\\\" component=\\\"button\\\">\\n                    Action\\n                  </DropdownItem>,\\n                  <DropdownItem key=\\\"disabled link\\\" isDisabled>\\n                    Disabled Link\\n                  </DropdownItem>\\n                ]}\\n              />\\n            </DataListAction>\\n          </DataListItemRow>\\n          <DataListContent\\n            aria-label=\\\"Primary Content Details\\\"\\n            id=\\\"ex-expand1\\\"\\n            isHidden={!this.state.expanded.includes('ex-toggle1')}\\n          >\\n            <p>\\n              Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et\\n              dolore magna aliqua.\\n            </p>\\n          </DataListContent>\\n        </DataListItem>\\n        <DataListItem aria-labelledby=\\\"ex-item2\\\" isExpanded={this.state.expanded.includes('ex-toggle2')}>\\n          <DataListItemRow>\\n            <DataListToggle\\n              onClick={() => toggle('ex-toggle2')}\\n              isExpanded={this.state.expanded.includes('ex-toggle2')}\\n              id=\\\"ex-toggle2\\\"\\n              aria-controls=\\\"ex-expand2\\\"\\n            />\\n            <DataListItemCells\\n              dataListCells={[\\n                <DataListCell isIcon key=\\\"icon\\\">\\n                  <CodeBranchIcon />\\n                </DataListCell>,\\n                <DataListCell key=\\\"secondary content\\\">\\n                  <div id=\\\"ex-item2\\\">Secondary content</div>\\n                  <span>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span>\\n                </DataListCell>,\\n                <DataListCell key=\\\"secondary content 2\\\">\\n                  <span>Lorem ipsum dolor sit amet.</span>\\n                </DataListCell>,\\n                <DataListCell key=\\\"secondary content3\\\">\\n                  <span>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span>\\n                </DataListCell>\\n              ]}\\n            />\\n            <DataListAction aria-labelledby=\\\"ex-item2 ex-action2\\\" id=\\\"ex-action2\\\" aria-label=\\\"Actions\\\">\\n              <Dropdown\\n                isPlain\\n                position={DropdownPosition.right}\\n                isOpen={this.state.isOpen2}\\n                onSelect={this.onSelect2}\\n                toggle={<KebabToggle onToggle={this.onToggle2} />}\\n                dropdownItems={[\\n                  <DropdownItem key=\\\"link\\\">Link</DropdownItem>,\\n                  <DropdownItem key=\\\"action\\\" component=\\\"button\\\">\\n                    Action\\n                  </DropdownItem>,\\n                  <DropdownItem key=\\\"disabled link\\\" isDisabled>\\n                    Disabled Link\\n                  </DropdownItem>\\n                ]}\\n              />\\n            </DataListAction>\\n          </DataListItemRow>\\n          <DataListContent\\n            aria-label=\\\"Primary Content Details\\\"\\n            id=\\\"ex-expand2\\\"\\n            isHidden={!this.state.expanded.includes('ex-toggle2')}\\n          >\\n            <p>\\n              Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et\\n              dolore magna aliqua.\\n            </p>\\n          </DataListContent>\\n        </DataListItem>\\n        <DataListItem aria-labelledby=\\\"ex-item3\\\" isExpanded={this.state.expanded.includes('ex-toggle3')}>\\n          <DataListItemRow>\\n            <DataListToggle\\n              onClick={() => toggle('ex-toggle3')}\\n              isExpanded={this.state.expanded.includes('ex-toggle3')}\\n              id=\\\"ex-toggle3\\\"\\n              aria-controls=\\\"ex-expand3\\\"\\n            />\\n            <DataListItemCells\\n              dataListCells={[\\n                <DataListCell isIcon key=\\\"icon\\\">\\n                  <CodeBranchIcon />\\n                </DataListCell>,\\n                <DataListCell key=\\\"tertiary content\\\">\\n                  <div id=\\\"ex-item2\\\">Tertiary content</div>\\n                  <span>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span>\\n                </DataListCell>,\\n                <DataListCell key=\\\"secondary content\\\">\\n                  <span>Lorem ipsum dolor sit amet.</span>\\n                </DataListCell>,\\n                <DataListCell key=\\\"secondary content 2\\\">\\n                  <span>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span>\\n                </DataListCell>\\n              ]}\\n            />\\n            <DataListAction aria-labelledby=\\\"ex-item3 ex-action3\\\" id=\\\"ex-action3\\\" aria-label=\\\"Actions\\\">\\n              <Dropdown\\n                isPlain\\n                position={DropdownPosition.right}\\n                isOpen={this.state.isOpen3}\\n                onSelect={this.onSelect3}\\n                toggle={<KebabToggle onToggle={this.onToggle3} />}\\n                dropdownItems={[\\n                  <DropdownItem key=\\\"link\\\">Link</DropdownItem>,\\n                  <DropdownItem key=\\\"action\\\" component=\\\"button\\\">\\n                    Action\\n                  </DropdownItem>,\\n                  <DropdownItem key=\\\"disabled link\\\" isDisabled>\\n                    Disabled Link\\n                  </DropdownItem>\\n                ]}\\n              />\\n            </DataListAction>\\n          </DataListItemRow>\\n          <DataListContent\\n            aria-label=\\\"Primary Content Details\\\"\\n            id=\\\"ex-expand3\\\"\\n            isHidden={!this.state.expanded.includes('ex-toggle3')}\\n            noPadding\\n          >\\n            This expanded section has no padding.\\n          </DataListContent>\\n        </DataListItem>\\n      </DataList>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"data-list-width-modifiers\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#data-list-width-modifiers\",\n    \"aria-label\": \"data list width modifiers permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Data list width modifiers\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport {\\n  Button,\\n  DataList,\\n  DataListItem,\\n  DataListCell,\\n  DataListCheck,\\n  DataListAction,\\n  DataListToggle,\\n  DataListContent,\\n  DataListItemCells,\\n  DataListItemRow\\n} from '@patternfly/react-core';\\n\\nclass ModifiersDataList extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = { show: true, isOpen1: false, isOpen2: false };\\n\\n    this.onToggle1 = isOpen1 => {\\n      this.setState({ isOpen1 });\\n    };\\n\\n    this.onToggle2 = isOpen2 => {\\n      this.setState({ isOpen2 });\\n    };\\n\\n    this.onSelect1 = event => {\\n      this.setState(prevState => ({\\n        isOpen1: !prevState.isOpen1\\n      }));\\n    };\\n\\n    this.onSelect2 = event => {\\n      this.setState(prevState => ({\\n        isOpen2: !prevState.isOpen2\\n      }));\\n    };\\n  }\\n\\n  render() {\\n    const previewPlaceholder = {\\n      display: 'block',\\n      width: '100%',\\n      padding: '.25rem .5rem',\\n      color: '#004e8a',\\n      backgroundColor: '#def3ff',\\n      border: '1px solid rgba(0,0,0,.1)',\\n      borderRadius: '4px'\\n    };\\n\\n    return [\\n      <div key=\\\"example-1\\\">\\n        <h2>Default fitting - example 1</h2>\\n        <DataList aria-label=\\\"Width modifier data list example 1\\\">\\n          <DataListItem aria-labelledby=\\\"width-ex1-item1\\\">\\n            <DataListItemRow>\\n              <DataListCheck aria-labelledby=\\\"width-ex1-check1\\\" name=\\\"width-ex1-item1\\\" />\\n              <DataListItemCells\\n                dataListCells={[\\n                  <DataListCell key=\\\"default\\\">\\n                    <div style={previewPlaceholder}>\\n                      <b id=\\\"width-ex1-item1\\\">default</b>\\n                      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>\\n                    </div>\\n                  </DataListCell>,\\n                  <DataListCell key=\\\"default2\\\">\\n                    <div style={previewPlaceholder}>\\n                      <b>default</b>\\n                      <p>\\n                        Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut\\n                        labore et dolore magna aliqua.\\n                      </p>\\n                    </div>\\n                  </DataListCell>\\n                ]}\\n              />\\n            </DataListItemRow>\\n          </DataListItem>\\n        </DataList>\\n      </div>,\\n      <div key=\\\"example-2\\\">\\n        <h2>Flex modifiers - example 2</h2>\\n        <DataList aria-label=\\\"Width modifier data list example 2\\\">\\n          <DataListItem aria-labelledby=\\\"width-ex2-item1\\\">\\n            <DataListItemRow>\\n              <DataListCheck aria-labelledby=\\\"width-ex2-check1\\\" name=\\\"width-ex2-check1\\\" />\\n              <DataListItemCells\\n                dataListCells={[\\n                  <DataListCell width={2} key=\\\"width 2\\\">\\n                    <div style={previewPlaceholder}>\\n                      <b id=\\\"width-ex2-item1\\\">width 2</b>\\n                      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt.</p>\\n                    </div>\\n                  </DataListCell>,\\n                  <DataListCell width={4} key=\\\"width 4\\\">\\n                    <div style={previewPlaceholder}>\\n                      <b>width 4</b>\\n                      <p>Lorem ipsum dolor sit amet.</p>\\n                    </div>\\n                  </DataListCell>\\n                ]}\\n              />\\n              <DataListAction\\n                aria-labelledby=\\\"width-ex2-item1 width-ex2-action1\\\"\\n                id=\\\"width-ex2-action1\\\"\\n                aria-label=\\\"Actions\\\"\\n              >\\n                <Dropdown\\n                  isPlain\\n                  position={DropdownPosition.right}\\n                  isOpen={this.state.isOpen1}\\n                  onSelect={this.onSelect1}\\n                  toggle={<KebabToggle onToggle={this.onToggle1} />}\\n                  dropdownItems={[\\n                    <DropdownItem key=\\\"link\\\">Link</DropdownItem>,\\n                    <DropdownItem key=\\\"action\\\" component=\\\"button\\\">\\n                      Action\\n                    </DropdownItem>,\\n                    <DropdownItem key=\\\"disabled link\\\" isDisabled>\\n                      Disabled Link\\n                    </DropdownItem>\\n                  ]}\\n                />\\n              </DataListAction>\\n            </DataListItemRow>\\n          </DataListItem>\\n        </DataList>\\n      </div>,\\n      <div key=\\\"example-3\\\">\\n        <h2>Flex modifiers - example 3</h2>\\n        <DataList aria-label=\\\"Width modifier data list example 3\\\">\\n          <DataListItem aria-labelledby=\\\"width-ex3-item1\\\" isExpanded={this.state.show}>\\n            <DataListItemRow>\\n              <DataListToggle\\n                isExpanded={this.state.show}\\n                id=\\\"width-ex3-toggle1\\\"\\n                aria-controls=\\\"width-ex3-expand1\\\"\\n                onClick={() => this.setState({ show: !this.state.show })}\\n              />\\n              <DataListCheck aria-labelledby=\\\"width-ex3-check1\\\" name=\\\"width-ex3-check1\\\" />\\n              <DataListItemCells\\n                dataListCells={[\\n                  <DataListCell width={5} key=\\\"width 5\\\">\\n                    <div style={previewPlaceholder}>\\n                      <b id=\\\"width-ex3-item1\\\">width 5</b>\\n                      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>\\n                    </div>\\n                  </DataListCell>,\\n                  <DataListCell width={2} key=\\\"width 2\\\">\\n                    <div style={previewPlaceholder}>\\n                      <b>width 2</b>\\n                      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>\\n                    </div>\\n                  </DataListCell>,\\n                  <DataListCell key=\\\"default\\\">\\n                    <div style={previewPlaceholder}>default</div>\\n                  </DataListCell>\\n                ]}\\n              />\\n              <DataListAction\\n                aria-labelledby=\\\"width-ex3-item1 width-ex3-action1\\\"\\n                id=\\\"width-ex3-action1\\\"\\n                aria-label=\\\"Actions\\\"\\n              >\\n                <Dropdown\\n                  isPlain\\n                  position={DropdownPosition.right}\\n                  isOpen={this.state.isOpen2}\\n                  onSelect={this.onSelect2}\\n                  toggle={<KebabToggle onToggle={this.onToggle2} />}\\n                  dropdownItems={[\\n                    <DropdownItem key=\\\"link\\\">Link</DropdownItem>,\\n                    <DropdownItem key=\\\"action\\\" component=\\\"button\\\">\\n                      Action\\n                    </DropdownItem>,\\n                    <DropdownItem key=\\\"disabled link\\\" isDisabled>\\n                      Disabled Link\\n                    </DropdownItem>\\n                  ]}\\n                />\\n              </DataListAction>\\n            </DataListItemRow>\\n            <DataListContent aria-label=\\\"Primary Content Details\\\" id=\\\"width-ex3-expand1\\\" isHidden={!this.state.show}>\\n              <p>\\n                Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et\\n                dolore magna aliqua.\\n              </p>\\n            </DataListContent>\\n          </DataListItem>\\n        </DataList>\\n      </div>\\n    ];\\n  }\\n}\\n\")));\n}\nMDXContent.isMDXComponent = true;"},"frontmatter":{"title":"Data list","section":null,"cssPrefix":"pf-c-data-list"}},"metadata":{"edges":[{"node":{"path":"src/components/DataList/DataList.js","name":"DataList","description":"","props":[{"name":"children","description":"Content rendered inside the DataList list","required":false,"type":{"name":"node"},"defaultValue":{"value":"null"}},{"name":"className","description":"Additional classes added to the DataList list","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"aria-label","description":"Adds accessible text to the DataList list","required":true,"type":{"name":"string"},"defaultValue":null},{"name":"","description":"Additional props are spread to the container <ul>","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/DataList/DataListAction.js","name":"DataListAction","description":"","props":[{"name":"children","description":"Content rendered as DataList Action  (e.g <Button> or <Dropdown>)","required":true,"type":{"name":"union"},"defaultValue":null},{"name":"className","description":"Additional classes added to the DataList Action","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"id","description":"Identify the DataList toggle number","required":true,"type":{"name":"string"},"defaultValue":null},{"name":"aria-labelledby","description":"Adds accessible text to the DataList Action","required":true,"type":{"name":"string"},"defaultValue":null},{"name":"aria-label","description":"Adds accessible text to the DataList Action","required":true,"type":{"name":"string"},"defaultValue":null},{"name":"","description":"Additional props are spread to the container <div>","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/DataList/DataListCell.js","name":"DataListCell","description":"","props":[{"name":"children","description":"Content rendered inside the DataList cell","required":false,"type":{"name":"node"},"defaultValue":{"value":"null"}},{"name":"className","description":"Additional classes added to the DataList cell","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"width","description":"Width (from 1-5) to the DataList cell","required":false,"type":{"name":"enum"},"defaultValue":{"value":"1"}},{"name":"isFilled","description":"Enables the body Content to fill the height of the card","required":false,"type":{"name":"bool"},"defaultValue":{"value":"true"}},{"name":"alignRight","description":"Aligns the cell content to the right of its parent.","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isIcon","description":"Set to true if the cell content is an Icon","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"","description":"Additional props are spread to the container <div>","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/DataList/DataListCheck.js","name":"DataListCheck","description":"","props":[{"name":"className","description":"Additional classes added to the DataList item checkbox","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"isValid","description":"Flag to show if the DataList checkbox selection is valid or invalid","required":false,"type":{"name":"bool"},"defaultValue":{"value":"true"}},{"name":"isDisabled","description":"Flag to show if the DataList checkbox is disabled","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isChecked","description":"Flag to show if the DataList checkbox is checked","required":false,"type":{"name":"bool"},"defaultValue":{"value":"null"}},{"name":"onChange","description":"A callback for when the DataList checkbox selection changes","required":false,"type":{"name":"func"},"defaultValue":{"value":"() => undefined"}},{"name":"aria-labelledby","description":"Aria-labelledby of the DataList checkbox","required":true,"type":{"name":"string"},"defaultValue":null},{"name":"","description":"Additional props are spread to the <input>","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/DataList/DataListContent.js","name":"DataListContent","description":"","props":[{"name":"children","description":"Content rendered inside the DataList item","required":false,"type":{"name":"node"},"defaultValue":{"value":"null"}},{"name":"className","description":"Additional classes added to the DataList cell","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"id","description":"Identify the DataListContent item","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"isHidden","description":"Flag to show if the expanded content of the DataList item is visible","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"noPadding","description":"Flag to remove padding from the expandable content","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"aria-label","description":"Adds accessible text to the DataList toggle","required":true,"type":{"name":"string"},"defaultValue":null},{"name":"","description":"Additional props are spread to the container <section>","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/DataList/DataListItem.js","name":"DataListItem","description":"","props":[{"name":"isExpanded","description":"Flag to show if the expanded content of the DataList item is visible","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"children","description":"Content rendered inside the DataList item","required":true,"type":{"name":"node"},"defaultValue":null},{"name":"className","description":"Additional classes added to the DataList item should be either <DataListItemRow> or <DataListContent>","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"aria-labelledby","description":"Adds accessible text to the DataList item","required":true,"type":{"name":"string"},"defaultValue":null},{"name":"","description":"Additional props are spread to the container <li>","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/DataList/DataListItemCells.js","name":"DataListItemCells","description":"","props":[{"name":"className","description":"Additional classes added to the DataList item Content Wrapper.  Children should be one ore more <DataListCell> nodes","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"dataListCells","description":"Array of <DataListCell> nodes that are rendered one after the other.","required":true,"type":{"name":"arrayOf"},"defaultValue":null},{"name":"","description":"Additional props are spread to the container <div>","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/DataList/DataListItemRow.js","name":"DataListItemRow","description":"","props":[{"name":"children","description":"Content rendered inside the DataList item Row.  Can be <DataListItemCells>, <DataListAction>, <DataListCheck> or <DataListToggle>","required":true,"type":{"name":"union"},"defaultValue":null},{"name":"className","description":"Additional classes added to the DataList item Row","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"","description":"Additional props are spread to the container <div>","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/DataList/DataListToggle.js","name":"DataListToggle","description":"","props":[{"name":"className","description":"Additional classes added to the DataList cell","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"isExpanded","description":"Flag to show if the expanded content of the DataList item is visible","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"id","description":"Identify the DataList toggle number","required":true,"type":{"name":"string"},"defaultValue":null},{"name":"aria-labelledby","description":"Adds accessible text to the DataList toggle","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"aria-label","description":"Adds accessible text to the DataList toggle","required":false,"type":{"name":"string"},"defaultValue":{"value":"'Details'"}},{"name":"aria-controls","description":"Allows users of some screen readers to shift focus to the controlled element. Should be used when the controlled contents are not adjacent to the toggle that controls them.","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"","description":"Additional props are spread to the container <div>","required":false,"type":{"name":"any"},"defaultValue":null}]}}]},"allGetStartedNavigationJson":{"edges":[{"node":{"text":"About","path":"/get-started/about"}},{"node":{"text":"Develop","path":"/get-started/developers"}},{"node":{"text":"Design","path":"/get-started/designers"}},{"node":{"text":"Migrate from PatternFly 3","path":"/get-started/migrate"}},{"node":{"text":"Accessibility guide","path":"/get-started/accessibility-guide"}}]},"allDesignGuidelinesNavigationJson":{"edges":[{"node":{"text":"Styles","path":"/design-guidelines/styles/","subNav":[{"text":"Colors","path":"/design-guidelines/styles/colors"},{"text":"Colors for charts","path":"/design-guidelines/styles/colors-for-charts"},{"text":"Icons","path":"/design-guidelines/styles/icons"},{"text":"Typography","path":"/design-guidelines/styles/typography"},{"text":"Spacers","path":"/design-guidelines/styles/spacers"}]}},{"node":{"text":"Usage and behavior","path":"/design-guidelines/usage-and-behavior/","subNav":[{"text":"About modal","path":"/design-guidelines/usage-and-behavior/about-modal"},{"text":"Alerts and notifications","path":"/design-guidelines/usage-and-behavior/alerts-and-notifications"},{"text":"Buttons and links","path":"/design-guidelines/usage-and-behavior/buttons-and-links"},{"text":"Charts","path":"/design-guidelines/usage-and-behavior/charts"},{"text":"Data input","path":"/design-guidelines/usage-and-behavior/data-input"},{"text":"Empty state","path":"/design-guidelines/usage-and-behavior/empty-state"},{"text":"Filters","path":"/design-guidelines/usage-and-behavior/filters"},{"text":"Forms","path":"/design-guidelines/usage-and-behavior/forms"},{"text":"Lists and tables","path":"/design-guidelines/usage-and-behavior/lists-and-tables"},{"text":"Login","path":"/design-guidelines/usage-and-behavior/login"},{"text":"Modal dialog","path":"/design-guidelines/usage-and-behavior/modal"},{"text":"Navigation system","path":"/design-guidelines/usage-and-behavior/navigation-system"},{"text":"Progress bar","path":"/design-guidelines/usage-and-behavior/progress-bar"},{"text":"Toolbar","path":"/design-guidelines/usage-and-behavior/toolbar"}]}},{"node":{"text":"Content","path":"/design-guidelines/content","subNav":[{"text":"Writing","path":"/design-guidelines/content/writing"},{"text":"Voice","path":"/design-guidelines/content/voice-and-tone"},{"text":"Style guide","path":"/design-guidelines/content/grammar-and-terminology"}]}}]}},"pageContext":{"title":"Data list","fileAbsolutePath":"/home/travis/build/patternfly/patternfly-org/packages/patternfly-4/_repos/react-core/src/components/DataList/DataList.md","pathRegex":"/DataList/.*/"}}