{"data":{"mdx":{"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Input group\",\n  \"cssPrefix\": null\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"simple-input-group\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#simple-input-group\",\n    \"aria-label\": \"simple input group permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Simple input group\"), mdx(\"p\", null, \"Buttons and TextArea\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { DollarSignIcon, AtIcon, CalendarAltIcon, SearchIcon, QuestionCircleIcon } from '@patternfly/react-icons';\\nimport {\\n  Button,\\n  ButtonVariant,\\n  TextArea,\\n  InputGroup,\\n  InputGroupText,\\n  TextInput,\\n  Dropdown,\\n  DropdownToggle,\\n  DropdownItem,\\n  Popover,\\n  PopoverPosition\\n} from '@patternfly/react-core';\\n\\nclass SimpleInputGroups extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: false,\\n      selected: ''\\n    };\\n    this.onToggle = isOpen => {\\n      this.setState({\\n        isOpen\\n      });\\n    };\\n    this.onSelect = event => {\\n      this.setState({\\n        isOpen: false,\\n        selected: event.currentTarget.value\\n      });\\n    };\\n  }\\n\\n  render() {\\n    return (\\n      <React.Fragment>\\n        <InputGroup>\\n          <Button id=\\\"textAreaButton1\\\" variant={ButtonVariant.secondary}>\\n            Button\\n          </Button>\\n          <TextArea name=\\\"textarea1\\\" id=\\\"textarea1\\\" aria-label=\\\"textarea with buttons\\\" />\\n          <Button variant={ButtonVariant.tertiary}>Button</Button>\\n        </InputGroup>\\n        <br />\\n        <br />\\n        <InputGroup>\\n          <TextArea name=\\\"textarea2\\\" id=\\\"textarea2\\\" aria-label=\\\"textarea with button\\\" />\\n          <Button id=\\\"textAreaButton2\\\" variant={ButtonVariant.tertiary}>\\n            Button\\n          </Button>\\n        </InputGroup>\\n        <br />\\n        <br />\\n        <InputGroup>\\n          <Button id=\\\"textAreaButton3\\\" variant={ButtonVariant.primary}>\\n            Button\\n          </Button>\\n          <Button variant={ButtonVariant.secondary}>Button</Button>\\n          <TextArea name=\\\"textarea3\\\" id=\\\"textarea3\\\" aria-label=\\\"textarea with 3 buttons\\\" />\\n          <Button variant={ButtonVariant.tertiary}>Button</Button>\\n        </InputGroup>\\n        <br />\\n        <br />\\n        <InputGroup>\\n          <Dropdown\\n            onSelect={this.onSelect}\\n            toggle={\\n              <DropdownToggle onToggle={this.onToggle}>\\n                {this.state.selected ? this.state.selected : 'Dropdown'}\\n              </DropdownToggle>\\n            }\\n            isOpen={this.state.isOpen}\\n            dropdownItems={[\\n              <DropdownItem key=\\\"opt-1\\\" value=\\\"Option 1\\\" component=\\\"button\\\">\\n                Option 1\\n              </DropdownItem>,\\n              <DropdownItem key=\\\"opt-2\\\" value=\\\"Option 2\\\" component=\\\"button\\\">\\n                Option 2\\n              </DropdownItem>,\\n              <DropdownItem key=\\\"opt-3\\\" value=\\\"Option 3\\\" component=\\\"button\\\">\\n                Option 3\\n              </DropdownItem>\\n            ]}\\n          >\\n            Dropdown\\n          </Dropdown>\\n          <TextInput id=\\\"textInput3\\\" aria-label=\\\"input with dropdown and button\\\" />\\n          <Button id=\\\"inputDropdownButton1\\\">Button</Button>\\n        </InputGroup>\\n        <br />\\n        <br />\\n        <InputGroup>\\n          <InputGroupText>\\n            <DollarSignIcon />\\n          </InputGroupText>\\n          <TextInput id=\\\"textInput5\\\" type=\\\"number\\\" aria-label=\\\"Dollar amount input example\\\" />\\n          <InputGroupText>.00</InputGroupText>\\n        </InputGroup>\\n        <br />\\n        <br />\\n        <InputGroup>\\n          <TextInput id=\\\"textInput6\\\" type=\\\"email\\\" aria-label=\\\"email input field\\\" />\\n          <InputGroupText id=\\\"email-example\\\">@example.com</InputGroupText>\\n        </InputGroup>\\n        <br />\\n        <br />\\n        <InputGroup>\\n          <InputGroupText id=\\\"username\\\" aria-label=\\\"@\\\">\\n            <AtIcon />\\n          </InputGroupText>\\n          <TextInput isValid={false} id=\\\"textInput7\\\" type=\\\"email\\\" aria-label=\\\"Error state username example\\\" />\\n        </InputGroup>\\n        <br />\\n        <br />\\n        <InputGroup>\\n          <InputGroupText component=\\\"label\\\" htmlFor=\\\"textInput9\\\">\\n            <CalendarAltIcon />\\n          </InputGroupText>\\n          <TextInput name=\\\"textInput9\\\" id=\\\"textInput9\\\" type=\\\"date\\\" aria-label=\\\"Date input example\\\" />\\n        </InputGroup>\\n        <br />\\n        <br />\\n        <InputGroup>\\n          <TextInput name=\\\"textInput11\\\" id=\\\"textInput11\\\" type=\\\"search\\\" aria-label=\\\"search input example\\\" />\\n          <Button variant={ButtonVariant.tertiary} aria-label=\\\"search button for search input\\\">\\n            <SearchIcon />\\n          </Button>\\n        </InputGroup>\\n        <br />\\n        <br />\\n        <InputGroup>\\n          <TextInput name=\\\"textInput10\\\" id=\\\"textInput10\\\" type=\\\"search\\\" aria-label=\\\"input example with popover\\\" />\\n          <Popover\\n            aria-label=\\\"popover example\\\"\\n            position={PopoverPosition.top}\\n            bodyContent=\\\"This field is an example of input group with popover\\\"\\n          >\\n            <Button variant={ButtonVariant.tertiary} aria-label=\\\"popover for input\\\">\\n              <QuestionCircleIcon />\\n            </Button>\\n          </Popover>\\n        </InputGroup>\\n      </React.Fragment>\\n    );\\n  }\\n}\\n\")));\n}\nMDXContent.isMDXComponent = true;"},"frontmatter":{"title":"Input group","section":null,"cssPrefix":null}},"metadata":{"edges":[{"node":{"path":"src/components/InputGroup/InputGroup.js","name":"InputGroup","description":"","props":[{"name":"className","description":"Additional classes added to the input group.","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"children","description":"Content rendered inside the input group.","required":true,"type":{"name":"node"},"defaultValue":null}]}},{"node":{"path":"src/components/InputGroup/InputGroupText.js","name":"InputGroupText","description":"","props":[{"name":"className","description":"Additional classes added to the input group text.","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"children","description":"Content rendered inside the input group text.","required":true,"type":{"name":"node"},"defaultValue":null},{"name":"component","description":"Component that wraps the input group text.","required":false,"type":{"name":"custom"},"defaultValue":{"value":"'span'"}}]}}]},"description":{"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"reactUrl\": \"inputgroup\",\n  \"htmlUrl\": \"inputgroup\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Use an \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"input group\"), \" when you want to group multiple input types, e.g., a text input and a button, into one control. Related design guidelines: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"design-guidelines/usage-and-behavior/data-input\"\n  }), \"Data input\")));\n}\nMDXContent.isMDXComponent = true;"}},"allGetStartedNavigationJson":{"edges":[{"node":{"text":"About","path":"/get-started/about"}},{"node":{"text":"Develop","path":"/get-started/developers"}},{"node":{"text":"Design","path":"/get-started/designers"}},{"node":{"text":"Migrate from PatternFly 3","path":"/get-started/migrate"}},{"node":{"text":"Accessibility guide","path":"/get-started/accessibility-guide"}}]},"allDesignGuidelinesNavigationJson":{"edges":[{"node":{"text":"Styles","path":"/design-guidelines/styles/","subNav":[{"text":"Colors","path":"/design-guidelines/styles/colors"},{"text":"Colors for charts","path":"/design-guidelines/styles/colors-for-charts"},{"text":"Icons","path":"/design-guidelines/styles/icons"},{"text":"Typography","path":"/design-guidelines/styles/typography"},{"text":"Spacers","path":"/design-guidelines/styles/spacers"}]}},{"node":{"text":"Usage and behavior","path":"/design-guidelines/usage-and-behavior/","subNav":[{"text":"About modal","path":"/design-guidelines/usage-and-behavior/about-modal"},{"text":"Alerts and notifications","path":"/design-guidelines/usage-and-behavior/alerts-and-notifications"},{"text":"Buttons and links","path":"/design-guidelines/usage-and-behavior/buttons-and-links"},{"text":"Charts","path":"/design-guidelines/usage-and-behavior/charts"},{"text":"Data input","path":"/design-guidelines/usage-and-behavior/data-input"},{"text":"Empty state","path":"/design-guidelines/usage-and-behavior/empty-state"},{"text":"Filters","path":"/design-guidelines/usage-and-behavior/filters"},{"text":"Forms","path":"/design-guidelines/usage-and-behavior/forms"},{"text":"Lists and tables","path":"/design-guidelines/usage-and-behavior/lists-and-tables"},{"text":"Login","path":"/design-guidelines/usage-and-behavior/login"},{"text":"Modal dialog","path":"/design-guidelines/usage-and-behavior/modal"},{"text":"Navigation system","path":"/design-guidelines/usage-and-behavior/navigation-system"},{"text":"Progress bar","path":"/design-guidelines/usage-and-behavior/progress-bar"},{"text":"Toolbar","path":"/design-guidelines/usage-and-behavior/toolbar"}]}},{"node":{"text":"Content","path":"/design-guidelines/content","subNav":[{"text":"Writing","path":"/design-guidelines/content/writing"},{"text":"Voice","path":"/design-guidelines/content/voice-and-tone"},{"text":"Style guide","path":"/design-guidelines/content/grammar-and-terminology"}]}}]}},"pageContext":{"title":"Input group","fileAbsolutePath":"/home/travis/build/patternfly/patternfly-org/packages/patternfly-4/_repos/react-core/src/components/InputGroup/InputGroup.md","pathRegex":"/InputGroup/.*/","reactUrl":"inputgroup"}}