{"data":{"mdx":{"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Select\",\n  \"cssPrefix\": \"pf-c-select\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"single-select-input\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#single-select-input\",\n    \"aria-label\": \"single select input permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Single Select Input\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Select, SelectOption, SelectVariant, CheckboxSelectGroup, CheckboxSelectOption } from '@patternfly/react-core';\\n\\nclass SingleSelectInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.options = [\\n      { value: 'Choose...', disabled: false, isPlaceholder: true },\\n      { value: 'Mr', disabled: false },\\n      { value: 'Miss', disabled: false },\\n      { value: 'Mrs', disabled: false },\\n      { value: 'Ms', disabled: false },\\n      { value: 'Dr', disabled: false },\\n      { value: 'Other', disabled: false }\\n    ];\\n\\n    this.state = {\\n      isExpanded: false,\\n      selected: null\\n    };\\n\\n    this.onToggle = isExpanded => {\\n      this.setState({\\n        isExpanded\\n      });\\n    };\\n\\n    this.onSelect = (event, selection, isPlaceholder) => {\\n      if (isPlaceholder) this.clearSelection();\\n      else {\\n        this.setState({\\n          selected: selection,\\n          isExpanded: false\\n        });\\n        console.log('selected:', selection);\\n      }\\n    };\\n\\n    this.clearSelection = () => {\\n      this.setState({\\n        selected: null,\\n        isExpanded: false\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isExpanded, selected } = this.state;\\n    const titleId = 'title-id';\\n    return (\\n      <div>\\n        <span id={titleId} hidden>\\n          Title\\n        </span>\\n        <Select\\n          variant={SelectVariant.single}\\n          aria-label=\\\"Select Input\\\"\\n          onToggle={this.onToggle}\\n          onSelect={this.onSelect}\\n          selections={selected}\\n          isExpanded={isExpanded}\\n          ariaLabelledBy={titleId}\\n        >\\n          {this.options.map((option, index) => (\\n            <SelectOption\\n              isDisabled={option.disabled}\\n              key={index}\\n              value={option.value}\\n              isPlaceholder={option.isPlaceholder}\\n            />\\n          ))}\\n        </Select>\\n      </div>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"checkbox-select-input\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#checkbox-select-input\",\n    \"aria-label\": \"checkbox select input permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Checkbox Select Input\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Select, SelectOption, SelectVariant, CheckboxSelectGroup, CheckboxSelectOption } from '@patternfly/react-core';\\n\\nclass CheckboxSelectInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      isExpanded: false,\\n      selected: []\\n    };\\n\\n    this.onToggle = isExpanded => {\\n      this.setState({\\n        isExpanded\\n      });\\n    };\\n\\n    this.onSelect = (event, selection) => {\\n      const { selected } = this.state;\\n      if (selected.includes(selection)) {\\n        this.setState(\\n          prevState => ({ selected: prevState.selected.filter(item => item !== selection) }),\\n          () => console.log('selections: ', this.state.selected)\\n        );\\n      } else {\\n        this.setState(\\n          prevState => ({ selected: [...prevState.selected, selection] }),\\n          () => console.log('selections: ', this.state.selected)\\n        );\\n      }\\n    };\\n\\n    this.clearSelection = () => {\\n      this.setState({\\n        selected: []\\n      });\\n    };\\n\\n    this.options = [\\n      <CheckboxSelectOption key={0} value=\\\"Active\\\" />,\\n      <CheckboxSelectOption key={1} value=\\\"Cancelled\\\" />,\\n      <CheckboxSelectOption key={2} value=\\\"Paused\\\" />,\\n      <CheckboxSelectOption key={3} value=\\\"Warning\\\" />,\\n      <CheckboxSelectOption key={4} value=\\\"Restarted\\\" />\\n    ];\\n  }\\n\\n  render() {\\n    const { isExpanded, selected } = this.state;\\n    const titleId = 'checkbox-select-id';\\n    return (\\n      <div>\\n        <span id={titleId} hidden>\\n          Checkbox Title\\n        </span>\\n        <Select\\n          variant={SelectVariant.checkbox}\\n          aria-label=\\\"Select Input\\\"\\n          onToggle={this.onToggle}\\n          onSelect={this.onSelect}\\n          selections={selected}\\n          isExpanded={isExpanded}\\n          placeholderText=\\\"Filter by status\\\"\\n          ariaLabelledBy={titleId}\\n        >\\n          {this.options}\\n        </Select>\\n      </div>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"grouped-checkbox-select-input\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#grouped-checkbox-select-input\",\n    \"aria-label\": \"grouped checkbox select input permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Grouped Checkbox Select Input\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Select, SelectOption, SelectVariant, CheckboxSelectGroup, CheckboxSelectOption } from '@patternfly/react-core';\\n\\nclass GroupedCheckboxSelectInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isExpanded: false,\\n      selected: []\\n    };\\n\\n    this.onToggle = isExpanded => {\\n      this.setState({\\n        isExpanded\\n      });\\n    };\\n\\n    this.onSelect = (event, selection) => {\\n      const { selected } = this.state;\\n      if (selected.includes(selection)) {\\n        this.setState(\\n          prevState => ({ selected: prevState.selected.filter(item => item !== selection) }),\\n          () => console.log('selections: ', this.state.selected)\\n        );\\n      } else {\\n        this.setState(\\n          prevState => ({ selected: [...prevState.selected, selection] }),\\n          () => console.log('selections: ', this.state.selected)\\n        );\\n      }\\n    };\\n\\n    this.clearSelection = () => {\\n      this.setState({\\n        selected: []\\n      });\\n    };\\n\\n    this.options = [\\n      <CheckboxSelectGroup label=\\\"Status\\\" key=\\\"group1\\\">\\n        <CheckboxSelectOption key={0} value=\\\"Running\\\" />\\n        <CheckboxSelectOption key={1} value=\\\"Stopped\\\" />\\n        <CheckboxSelectOption key={2} value=\\\"Down\\\" />\\n        <CheckboxSelectOption key={3} value=\\\"Degraded\\\" />\\n        <CheckboxSelectOption key={4} value=\\\"Needs Maintenence\\\" />\\n      </CheckboxSelectGroup>,\\n      <CheckboxSelectGroup label=\\\"Vendor Names\\\" key=\\\"group2\\\">\\n        <CheckboxSelectOption key={5} value=\\\"Dell\\\" />\\n        <CheckboxSelectOption key={6} value=\\\"Samsung\\\" isDisabled />\\n        <CheckboxSelectOption key={7} value=\\\"Hewlett-Packard\\\" />\\n      </CheckboxSelectGroup>\\n    ];\\n  }\\n\\n  render() {\\n    const { isExpanded, selected } = this.state;\\n    const titleId = 'grouped-checkbox-select-id';\\n    return (\\n      <div>\\n        <span id={titleId} hidden>\\n          Grouped Checkbox Title\\n        </span>\\n        <Select\\n          variant={SelectVariant.checkbox}\\n          aria-label=\\\"Grouped Checkbox Select Input\\\"\\n          onToggle={this.onToggle}\\n          onSelect={this.onSelect}\\n          selections={selected}\\n          isExpanded={isExpanded}\\n          placeholderText=\\\"Filter by status\\\"\\n          ariaLabelledBy={titleId}\\n          isGrouped\\n        >\\n          {this.options}\\n        </Select>\\n      </div>\\n    );\\n  }\\n}\\n\")));\n}\nMDXContent.isMDXComponent = true;"},"frontmatter":{"title":"Select","section":null,"cssPrefix":"pf-c-select"}},"metadata":{"edges":[{"node":{"path":"src/components/FormSelect/FormSelect.js","name":"FormSelect","description":"","props":[{"name":"children","description":"content rendered inside the FormSelect","required":true,"type":{"name":"node"},"defaultValue":null},{"name":"className","description":"additional classes added to the FormSelect control","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"value","description":"value of selected option","required":false,"type":{"name":"any"},"defaultValue":{"value":"''"}},{"name":"isValid","description":"Flag indicating selection is valid","required":false,"type":{"name":"bool"},"defaultValue":{"value":"true"}},{"name":"isDisabled","description":"Flag indicating the FormSelect is disabled","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"onBlur","description":"Optional callback for updating when selection loses focus","required":false,"type":{"name":"func"},"defaultValue":{"value":"() => undefined"}},{"name":"onFocus","description":"Optional callback for updating when selection gets focus","required":false,"type":{"name":"func"},"defaultValue":{"value":"() => undefined"}},{"name":"onChange","description":"Optional callback for updating when selection changes","required":false,"type":{"name":"func"},"defaultValue":{"value":"() => undefined"}},{"name":"aria-label","description":"Custom flag to show that the FormSelect requires an associated id or aria-label.","required":false,"type":{"name":"custom"},"defaultValue":{"value":"null"}},{"name":"","description":"Additional props are spread to the container <select>","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/FormSelect/FormSelectOption.js","name":"FormSelectOption","description":"","props":[{"name":"className","description":"additional classes added to the Select Option","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"value","description":"the value for the option","required":false,"type":{"name":"any"},"defaultValue":{"value":"''"}},{"name":"label","description":"the label for the option","required":true,"type":{"name":"string"},"defaultValue":null},{"name":"isDisabled","description":"flag indicating if the option is disabled","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"","description":"Additional props are spread to the container <option>","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/FormSelect/FormSelectOptionGroup.js","name":"FormSelectOptionGroup","description":"","props":[{"name":"children","description":"content rendered inside the Select Option Group","required":false,"type":{"name":"node"},"defaultValue":{"value":"null"}},{"name":"className","description":"additional classes added to the Select Option","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"label","description":"the label for the option","required":true,"type":{"name":"string"},"defaultValue":null},{"name":"isDisabled","description":"flag indicating if the Option Group is disabled","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"","description":"Additional props are spread to the container <optgroup>","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/Select/CheckboxSelect.js","name":"CheckboxSelect","description":"","props":[{"name":"children","description":"Content rendered inside the CheckboxSelect","required":true,"type":{"name":"node"},"defaultValue":null},{"name":"className","description":"Additional classes added to the CheckboxSelect control","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"isExpanded","description":"Flag indicating the Select is expanded","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isGrouped","description":"Flag indicating whether checkboxes are grouped","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"checked","description":"Currently checked options","required":false,"type":{"name":"arrayOf"},"defaultValue":{"value":"[]"}},{"name":"","description":"Additional props are spread to the container <select>","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/Select/CheckboxSelectGroup.js","name":"CheckboxSelectGroup","description":"","props":[{"name":"children","description":"Checkboxes within group","required":false,"type":{"name":"node"},"defaultValue":{"value":"null"}},{"name":"className","description":"Additional classes added to the CheckboxSelectGroup control","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"label","description":"Group label","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"","description":"Additional props are spread to the container <select>","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/Select/CheckboxSelectInput.js","name":"CheckboxSelectInput","description":"","props":[]}},{"node":{"path":"src/components/Select/CheckboxSelectOption.js","name":"CheckboxSelectOption","description":"","props":[{"name":"children","description":"the value for the option","required":false,"type":{"name":"string"},"defaultValue":{"value":"null"}},{"name":"className","description":"additional classes added to the Select Option","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"value","description":"the value for the option","required":false,"type":{"name":"string"},"defaultValue":{"value":"null"}},{"name":"isDisabled","description":"flag indicating if the option is disabled","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"onClick","description":"Optional on click callback","required":false,"type":{"name":"func"},"defaultValue":{"value":"Function.prototype"}},{"name":"","description":"Additional props are spread to the container <button>","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/Select/GroupedCheckboxSelectInput.js","name":"GroupedCheckboxSelectInput","description":"","props":[]}},{"node":{"path":"src/components/Select/Select.js","name":"Select","description":"","props":[{"name":"children","description":"Content rendered inside the Select","required":false,"type":{"name":"node"},"defaultValue":{"value":"null"}},{"name":"className","description":"Classes applied to the root of the Select","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"isExpanded","description":"Flag to indicate if select is expanded","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isGrouped","description":"Flag to indicate if select options are grouped","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"placeholderText","description":"Title text of Select","required":false,"type":{"name":"union"},"defaultValue":{"value":"null"}},{"name":"selections","description":"Selected item","required":false,"type":{"name":"union"},"defaultValue":{"value":"null"}},{"name":"aria-label","description":"Adds accessible text to Select","required":false,"type":{"name":"string"},"defaultValue":{"value":"null"}},{"name":"ariaLabelledBy","description":"Id of label for the Select aria-labelledby","required":false,"type":{"name":"string"},"defaultValue":{"value":"null"}},{"name":"onSelect","description":"Callback for selection behavior","required":true,"type":{"name":"func"},"defaultValue":null},{"name":"onToggle","description":"Callback for toggle button behavior","required":true,"type":{"name":"func"},"defaultValue":null},{"name":"variant","description":"Variant of rendered Select","required":false,"type":{"name":"enum"},"defaultValue":{"value":"SelectVariant.single"}},{"name":"width","description":"Width of the select container as a number of px or string percentage","required":false,"type":{"name":"union"},"defaultValue":{"value":"null"}},{"name":"","description":"Additional props are spread to the container <ul>","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/Select/SelectOption.js","name":"SelectOption","description":"","props":[{"name":"className","description":"additional classes added to the Select Option","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"value","description":"the value for the option","required":false,"type":{"name":"string"},"defaultValue":{"value":"null"}},{"name":"index","description":"internal index of the option","required":false,"type":{"name":"number"},"defaultValue":{"value":"0"}},{"name":"isDisabled","description":"flag indicating if the option is disabled","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isPlaceholder","description":"flag indicating if the option acts as a placeholder","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isSelected","description":"Internal flag indicating if the option is selected","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"onClick","description":"Optional on click callback","required":false,"type":{"name":"func"},"defaultValue":{"value":"Function.prototype"}},{"name":"sendRef","description":"Internal callback for ref tracking","required":false,"type":{"name":"func"},"defaultValue":{"value":"Function.prototype"}},{"name":"keyHandler","description":"Internal callback for keyboard navigation","required":false,"type":{"name":"func"},"defaultValue":{"value":"Function.prototype"}},{"name":"","description":"Additional props are spread to the container <button>","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/Select/SelectToggle.js","name":"SelectToggle","description":"","props":[{"name":"id","description":"HTML ID of dropdown toggle","required":true,"type":{"name":"string"},"defaultValue":null},{"name":"children","description":"Anything which can be rendered as dropdown toggle","required":false,"type":{"name":"node"},"defaultValue":{"value":"null"}},{"name":"className","description":"Classes applied to root element of dropdown toggle","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"isExpanded","description":"Flag to indicate if select is expanded","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"onToggle","description":"Callback called when toggle is clicked","required":false,"type":{"name":"func"},"defaultValue":{"value":"Function.prototype"}},{"name":"onEnter","description":"Callback for toggle open on keyboard entry","required":false,"type":{"name":"func"},"defaultValue":{"value":"Function.prototype"}},{"name":"onClose","description":"Callback for toggle close","required":false,"type":{"name":"func"},"defaultValue":{"value":"Function.prototype"}},{"name":"parentRef","description":"Element which wraps toggle","required":false,"type":{"name":"any"},"defaultValue":{"value":"null"}},{"name":"isFocused","description":"Forces focus state","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isHovered","description":"Forces hover state","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isActive","description":"Forces active state","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isPlain","description":"Display the toggle with no border or background","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"type","description":"Type of the toggle button, defaults to 'button'","required":false,"type":{"name":"string"},"defaultValue":{"value":"'button'"}},{"name":"isCheckbox","description":"Flag for checkbox variant keyboard interaction","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"","description":"Additional props are spread to the container <button>","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/Select/SingleSelect.js","name":"SingleSelect","description":"","props":[{"name":"children","description":"Content rendered inside the SingleSelect","required":true,"type":{"name":"node"},"defaultValue":null},{"name":"className","description":"Additional classes added to the SingleSelect control","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"isExpanded","description":"Flag indicating the Select is expanded","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"openedOnEnter","description":"Internal flag indicating whether select was opened via keyboard","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"selected","description":"Currently selected option","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"","description":"Additional props are spread to the container <select>","required":false,"type":{"name":"any"},"defaultValue":null}]}}]},"allGetStartedNavigationJson":{"edges":[{"node":{"text":"About","path":"/get-started/about"}},{"node":{"text":"Develop","path":"/get-started/developers"}},{"node":{"text":"Design","path":"/get-started/designers"}}]},"allDesignGuidelinesNavigationJson":{"edges":[{"node":{"text":"Styles","path":"/design-guidelines/styles/","subNav":[{"text":"Colors","path":"/design-guidelines/styles/colors"},{"text":"Icons","path":"/design-guidelines/styles/icons"},{"text":"Typography","path":"/design-guidelines/styles/typography"},{"text":"Spacers","path":"/design-guidelines/styles/spacers"}]}},{"node":{"text":"Usage and behavior","path":"/design-guidelines/usage-and-behavior/","subNav":[{"text":"About modal","path":"/design-guidelines/usage-and-behavior/about-modal"},{"text":"Alerts and notifications","path":"/design-guidelines/usage-and-behavior/alerts-and-notifications"},{"text":"Buttons and links","path":"/design-guidelines/usage-and-behavior/buttons-and-links"},{"text":"Data input","path":"/design-guidelines/usage-and-behavior/data-input"},{"text":"Empty state","path":"/design-guidelines/usage-and-behavior/empty-state"},{"text":"Filters","path":"/design-guidelines/usage-and-behavior/filters"},{"text":"Forms","path":"/design-guidelines/usage-and-behavior/forms"},{"text":"Lists and tables","path":"/design-guidelines/usage-and-behavior/lists-and-tables"},{"text":"Login","path":"/design-guidelines/usage-and-behavior/login"},{"text":"Modal","path":"/design-guidelines/usage-and-behavior/modal"},{"text":"Navigation system","path":"/design-guidelines/usage-and-behavior/navigation-system"},{"text":"Progress bar","path":"/design-guidelines/usage-and-behavior/progress-bar"},{"text":"Toolbar","path":"/design-guidelines/usage-and-behavior/toolbar"}]}},{"node":{"text":"Content","path":"/design-guidelines/content","subNav":[{"text":"Writing","path":"/design-guidelines/content/writing"},{"text":"Voice","path":"/design-guidelines/content/voice-and-tone"},{"text":"Style guide","path":"/design-guidelines/content/grammar-and-terminology"}]}}]}},"pageContext":{"title":"Select","fileAbsolutePath":"/home/travis/build/patternfly/patternfly-org/packages/patternfly-4/_repos/react-core/src/components/Select/Select.md","pathRegex":"/Select/.*/"}}