{"data":{"mdx":{"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Checkbox\",\n  \"cssPrefix\": \"pf-c-check\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"controlled-checkbox\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#controlled-checkbox\",\n    \"aria-label\": \"controlled checkbox permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Controlled Checkbox\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Checkbox } from '@patternfly/react-core';\\n\\nclass ControlledCheckbox extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      check1: false,\\n      check2: false\\n    };\\n    this.handleChange = checked => {\\n      const target = event.target;\\n      const value = target.type === 'checkbox' ? target.checked : target.value;\\n      const name = target.name;\\n      this.setState({ [name]: value });\\n    };\\n  }\\n\\n  render() {\\n    return (\\n      <React.Fragment>\\n        <Checkbox\\n          label=\\\"Controlled CheckBox\\\"\\n          isChecked={this.state.check1}\\n          onChange={this.handleChange}\\n          aria-label=\\\"controlled checkbox example\\\"\\n          id=\\\"check-1\\\"\\n        />\\n        <Checkbox\\n          label=\\\"Controlled CheckBox\\\"\\n          isChecked={this.state.check2}\\n          onChange={this.handleChange}\\n          aria-label=\\\"controlled checkbox example\\\"\\n          id=\\\"check-2\\\"\\n        />\\n      </React.Fragment>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"uncontrolled-checkbox\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#uncontrolled-checkbox\",\n    \"aria-label\": \"uncontrolled checkbox permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Uncontrolled Checkbox\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Checkbox } from '@patternfly/react-core';\\n\\nUncontrolledCheckbox = () => (\\n  <React.Fragment>\\n    <Checkbox label=\\\"Uncontrolled CheckBox\\\" aria-label=\\\"uncontrolled checkbox example\\\" id=\\\"check-3\\\" />\\n    <Checkbox label=\\\"Uncontrolled CheckBox\\\" aria-label=\\\"uncontrolled checkbox example\\\" id=\\\"check-4\\\" />\\n  </React.Fragment>\\n);\\n\")), mdx(\"h2\", {\n    \"id\": \"disabled-checkbox\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#disabled-checkbox\",\n    \"aria-label\": \"disabled checkbox permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Disabled Checkbox\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Checkbox } from '@patternfly/react-core';\\n\\nDisabledCheckbox = () => (\\n  <React.Fragment>\\n    <Checkbox\\n      id=\\\"check-5\\\"\\n      label=\\\"Disabled CheckBox\\\"\\n      aria-label=\\\"disabled checked checkbox example\\\"\\n      defaultChecked\\n      isDisabled\\n    />{' '}\\n    <Checkbox id=\\\"check-6\\\" label=\\\"Disabled CheckBox\\\" aria-label=\\\"disabled checkbox example\\\" isDisabled />\\n  </React.Fragment>\\n);\\n\")));\n}\nMDXContent.isMDXComponent = true;"},"frontmatter":{"title":"Checkbox","section":null,"cssPrefix":"pf-c-check"}},"metadata":{"edges":[{"node":{"path":"src/components/Checkbox/Checkbox.js","name":"Checkbox","description":"","props":[{"name":"className","description":"Additional classes added to the Checkbox.","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"isValid","description":"Flag to show if the Checkbox selection is valid or invalid.","required":false,"type":{"name":"bool"},"defaultValue":{"value":"true"}},{"name":"isDisabled","description":"Flag to show if the Checkbox is disabled.","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isChecked","description":"Flag to show if the Checkbox is checked.","required":false,"type":{"name":"bool"},"defaultValue":{"value":"null"}},{"name":"onChange","description":"A callback for when the Checkbox selection changes.","required":false,"type":{"name":"func"},"defaultValue":{"value":"() => undefined"}},{"name":"label","description":"Label text of the checkbox.","required":false,"type":{"name":"union"},"defaultValue":{"value":"undefined"}},{"name":"id","description":"Id of the checkbox.","required":true,"type":{"name":"string"},"defaultValue":null},{"name":"aria-label","description":"Aria-label of the checkbox.","required":true,"type":{"name":"any"},"defaultValue":null},{"name":"","description":"Additional props are spread to the <input>","required":false,"type":{"name":"any"},"defaultValue":null}]}}]},"allGetStartedNavigationJson":{"edges":[{"node":{"text":"About","path":"/get-started/about"}},{"node":{"text":"Develop","path":"/get-started/developers"}},{"node":{"text":"Design","path":"/get-started/designers"}}]},"allDesignGuidelinesNavigationJson":{"edges":[{"node":{"text":"Styles","path":"/design-guidelines/styles/","subNav":[{"text":"Colors","path":"/design-guidelines/styles/colors"},{"text":"Icons","path":"/design-guidelines/styles/icons"},{"text":"Typography","path":"/design-guidelines/styles/typography"},{"text":"Spacers","path":"/design-guidelines/styles/spacers"}]}},{"node":{"text":"Usage and behavior","path":"/design-guidelines/usage-and-behavior/","subNav":[{"text":"About modal","path":"/design-guidelines/usage-and-behavior/about-modal"},{"text":"Alerts and notifications","path":"/design-guidelines/usage-and-behavior/alerts-and-notifications"},{"text":"Buttons and links","path":"/design-guidelines/usage-and-behavior/buttons-and-links"},{"text":"Data input","path":"/design-guidelines/usage-and-behavior/data-input"},{"text":"Empty state","path":"/design-guidelines/usage-and-behavior/empty-state"},{"text":"Filters","path":"/design-guidelines/usage-and-behavior/filters"},{"text":"Forms","path":"/design-guidelines/usage-and-behavior/forms"},{"text":"Lists and tables","path":"/design-guidelines/usage-and-behavior/lists-and-tables"},{"text":"Login","path":"/design-guidelines/usage-and-behavior/login"},{"text":"Modal","path":"/design-guidelines/usage-and-behavior/modal"},{"text":"Navigation system","path":"/design-guidelines/usage-and-behavior/navigation-system"},{"text":"Progress bar","path":"/design-guidelines/usage-and-behavior/progress-bar"},{"text":"Toolbar","path":"/design-guidelines/usage-and-behavior/toolbar"}]}},{"node":{"text":"Content","path":"/design-guidelines/content","subNav":[{"text":"Writing","path":"/design-guidelines/content/writing"},{"text":"Voice","path":"/design-guidelines/content/voice-and-tone"},{"text":"Style guide","path":"/design-guidelines/content/grammar-and-terminology"}]}}]}},"pageContext":{"title":"Checkbox","fileAbsolutePath":"/home/travis/build/patternfly/patternfly-org/packages/patternfly-4/_repos/react-core/src/components/Checkbox/Checkbox.md","pathRegex":"/Checkbox/.*/"}}