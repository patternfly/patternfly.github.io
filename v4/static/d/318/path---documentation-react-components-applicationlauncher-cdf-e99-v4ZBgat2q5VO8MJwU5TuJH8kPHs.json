{"data":{"mdx":{"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Application Launcher\",\n  \"cssPrefix\": \"pf-c-app-launcher\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"simple-application-launcher\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#simple-application-launcher\",\n    \"aria-label\": \"simple application launcher permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Simple Application Launcher\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { ApplicationLauncher, DropdownItem, Tooltip } from '@patternfly/react-core';\\n\\nclass SimpleApplicationLauncher extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: false\\n    };\\n    this.onToggle = isOpen => {\\n      this.setState({\\n        isOpen\\n      });\\n    };\\n    this.onSelect = event => {\\n      this.setState({\\n        isOpen: !this.state.isOpen\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isOpen } = this.state;\\n    const dropdownItems = [\\n      <DropdownItem key=\\\"application_1\\\" component=\\\"a\\\">\\n        Application 1\\n      </DropdownItem>,\\n      <DropdownItem key=\\\"application_2\\\" component=\\\"a\\\">\\n        Application 2\\n      </DropdownItem>,\\n      <DropdownItem key=\\\"application_3\\\" component=\\\"a\\\">\\n        Application 3\\n      </DropdownItem>,\\n      <DropdownItem key=\\\"disabled_application_4\\\" isDisabled component=\\\"a\\\">\\n        Unavailable Application\\n      </DropdownItem>\\n    ];\\n    return (\\n      <ApplicationLauncher\\n        onSelect={this.onSelect}\\n        onToggle={this.onToggle}\\n        isOpen={isOpen}\\n        dropdownItems={dropdownItems}\\n      />\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"application-launcher-with-tooltip\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#application-launcher-with-tooltip\",\n    \"aria-label\": \"application launcher with tooltip permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Application Launcher with Tooltip\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { ApplicationLauncher, DropdownItem, Tooltip } from '@patternfly/react-core';\\n\\nclass TooltipApplicationLauncher extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: false\\n    };\\n    this.onToggle = isOpen => {\\n      this.setState({\\n        isOpen\\n      });\\n    };\\n    this.onSelect = event => {\\n      this.setState({\\n        isOpen: !this.state.isOpen\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isOpen } = this.state;\\n    const dropdownItems = [\\n      <Tooltip content={<div>Launch Application 1</div>}>\\n        <DropdownItem key=\\\"application_1\\\" component=\\\"a\\\">\\n          Application 1\\n        </DropdownItem>\\n      </Tooltip>\\n      ,\\n      <Tooltip content={<div>Launch Application 2</div>} position=\\\"right\\\">\\n        <DropdownItem key=\\\"application_2\\\" component=\\\"a\\\">\\n          Application 2\\n        </DropdownItem>\\n      </Tooltip>\\n      ,\\n      <Tooltip content={<div>Launch Application 3</div>} position=\\\"right\\\">\\n        <DropdownItem key=\\\"application_3\\\" component=\\\"a\\\">\\n          Application 3\\n        </DropdownItem>\\n      </Tooltip>\\n      ,\\n      <Tooltip content={<div>Application Unavailable At This Time</div>} position=\\\"bottom\\\">\\n        <DropdownItem key=\\\"disabled_application_4\\\" isDisabled component=\\\"a\\\">\\n          Unavailable Application\\n        </DropdownItem>\\n      </Tooltip>\\n    ];\\n    return (\\n      <ApplicationLauncher\\n        onSelect={this.onSelect}\\n        onToggle={this.onToggle}\\n        isOpen={isOpen}\\n        dropdownItems={dropdownItems}\\n      />\\n    );\\n  }\\n}\\n\")));\n}\nMDXContent.isMDXComponent = true;"},"frontmatter":{"title":"Application Launcher","section":null,"cssPrefix":"pf-c-app-launcher"}},"metadata":{"edges":[{"node":{"path":"src/components/ApplicationLauncher/ApplicationLauncher.js","name":"ApplicationLauncher","description":"","props":[{"name":"className","description":"Additional element css classes","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"direction","description":"Display menu above or below dropdown toggle","required":false,"type":{"name":"enum"},"defaultValue":{"value":"ApplicationLauncherDirection.down"}},{"name":"dropdownItems","description":"Array of DropdownItem nodes that will be rendered in the dropdown Menu list","required":false,"type":{"name":"array"},"defaultValue":{"value":"[]"}},{"name":"isOpen","description":"open bool","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"onSelect","description":"Function callback called when user selects item","required":false,"type":{"name":"func"},"defaultValue":{"value":"Function.prototype"}},{"name":"onToggle","description":"Callback called when application launcher toggle is clicked","required":false,"type":{"name":"func"},"defaultValue":{"value":"Function.prototype"}},{"name":"position","description":"Indicates where menu will be alligned horizontally","required":false,"type":{"name":"enum"},"defaultValue":{"value":"ApplicationLauncherPosition.left"}},{"name":"aria-label","description":"Adds accessible text to the button. Required for plain buttons","required":false,"type":{"name":"string"},"defaultValue":{"value":"'Actions'"}}]}},{"node":{"path":"src/components/ApplicationLauncher/ApplicationLauncherMenu.js","name":"ApplicationLauncherMenu","description":"","props":[{"name":"children","description":"Anything which can be rendered as dropdown items","required":false,"type":{"name":"node"},"defaultValue":{"value":"null"}},{"name":"className","description":"Classess applied to root element of dropdown menu","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"isOpen","description":"Flag to indicate if menu is opened","required":false,"type":{"name":"bool"},"defaultValue":{"value":"true"}},{"name":"position","description":"Indicates where menu will be alligned horizontally","required":false,"type":{"name":"enum"},"defaultValue":{"value":"ApplicationLauncherPosition.left"}},{"name":"","description":"Additional props are spread to the container component","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/ApplicationLauncher/Toggle.js","name":"ApplicationLauncherToggle","description":"","props":[{"name":"id","description":"HTML ID of toggle","required":true,"type":{"name":"string"},"defaultValue":null},{"name":"children","description":"Anything which can be rendered as toggle","required":false,"type":{"name":"node"},"defaultValue":{"value":"null"}},{"name":"className","description":"Classes applied to root element of toggle","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"isOpen","description":"Flag to indicate if menu is opened","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"onToggle","description":"Callback called when toggle is clicked","required":false,"type":{"name":"func"},"defaultValue":{"value":"Function.prototype"}},{"name":"parentRef","description":"Element which wraps toggle","required":false,"type":{"name":"any"},"defaultValue":{"value":"null"}},{"name":"isFocused","description":"Forces focus state","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isHovered","description":"Forces hover state","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isActive","description":"Forces active state","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isPlain","description":"Display the toggle with no border or background","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"","description":"Additional props are spread to the container <button>","required":false,"type":{"name":"any"},"defaultValue":null}]}}]},"allGetStartedNavigationJson":{"edges":[{"node":{"text":"About","path":"/get-started/about"}},{"node":{"text":"Develop","path":"/get-started/developers"}},{"node":{"text":"Design","path":"/get-started/designers"}}]},"allDesignGuidelinesNavigationJson":{"edges":[{"node":{"text":"Styles","path":"/design-guidelines/styles/","subNav":[{"text":"Icons","path":"/design-guidelines/styles/icons"},{"text":"Typography","path":"/design-guidelines/styles/typography"}]}},{"node":{"text":"Usage and behavior","path":"/design-guidelines/usage-and-behavior/","subNav":[{"text":"About modal","path":"/design-guidelines/usage-and-behavior/about-modal"},{"text":"Alerts and notifications","path":"/design-guidelines/usage-and-behavior/alerts-and-notifications"},{"text":"Buttons and links","path":"/design-guidelines/usage-and-behavior/buttons-and-links"},{"text":"Data input","path":"/design-guidelines/usage-and-behavior/data-input"},{"text":"Empty state","path":"/design-guidelines/usage-and-behavior/empty-state"},{"text":"Filters","path":"/design-guidelines/usage-and-behavior/filters"},{"text":"Forms","path":"/design-guidelines/usage-and-behavior/forms"},{"text":"Lists and tables","path":"/design-guidelines/usage-and-behavior/lists-and-tables"},{"text":"Login","path":"/design-guidelines/usage-and-behavior/login"},{"text":"Modal","path":"/design-guidelines/usage-and-behavior/modal"},{"text":"Navigation system","path":"/design-guidelines/usage-and-behavior/navigation-system"},{"text":"Progress bar","path":"/design-guidelines/usage-and-behavior/progress-bar"},{"text":"Toolbar","path":"/design-guidelines/usage-and-behavior/toolbar"}]}},{"node":{"text":"Content","path":"/design-guidelines/content","subNav":[{"text":"Writing","path":"/design-guidelines/content/writing"},{"text":"Voice","path":"/design-guidelines/content/voice-and-tone"},{"text":"Style guide","path":"/design-guidelines/content/grammar-and-terminology"}]}}]}},"pageContext":{"title":"Application Launcher","fileAbsolutePath":"/home/travis/build/patternfly/patternfly-org/packages/patternfly-4/_repos/react-core/src/components/ApplicationLauncher/ApplicationLauncher.md","pathRegex":"/ApplicationLauncher/.*/"}}