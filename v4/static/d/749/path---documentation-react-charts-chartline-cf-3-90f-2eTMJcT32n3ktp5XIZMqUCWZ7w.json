{"data":{"mdx":{"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Line chart\",\n  \"section\": \"charts\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"green-themed-line-chart\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#green-themed-line-chart\",\n    \"aria-label\": \"green themed line chart permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Green themed line chart\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Chart, ChartGroup, ChartLegend, ChartLine, ChartTheme, ChartAxis } from '@patternfly/react-charts';\\nimport { Grid, GridItem, Text, TextVariants } from '@patternfly/react-core';\\n\\n<div style={{ display: 'flex-inline' }}>\\n  <div style={{ width: 450, height: 360 }}>\\n    <div>\\n      <Chart theme={ChartTheme.light.green}>\\n        <ChartGroup>\\n          <ChartLine\\n            data={[\\n              { name: 'Cats', x: 1, y: 1 },\\n              { name: 'Cats', x: 2, y: 2 },\\n              { name: 'Cats', x: 3, y: 5 },\\n              { name: 'Cats', x: 4, y: 3 }\\n            ]}\\n          />\\n          <ChartLine\\n            data={[\\n              { name: 'Dogs', x: 1, y: 2 },\\n              { name: 'Dogs', x: 2, y: 1 },\\n              { name: 'Dogs', x: 3, y: 7 },\\n              { name: 'Dogs', x: 4, y: 4 }\\n            ]}\\n            style={{\\n              data: {\\n                strokeDasharray: '3,3'\\n              }\\n            }}\\n          />\\n          <ChartLine\\n            data={[\\n              { name: 'Birds', x: 1, y: 3 },\\n              { name: 'Birds', x: 2, y: 4 },\\n              { name: 'Birds', x: 3, y: 9 },\\n              { name: 'Birds', x: 4, y: 5 }\\n            ]}\\n          />\\n          <ChartLine\\n            data={[\\n              { name: 'Mice', x: 1, y: 3 },\\n              { name: 'Mice', x: 2, y: 3 },\\n              { name: 'Mice', x: 3, y: 8 },\\n              { name: 'Mice', x: 4, y: 7 }\\n            ]}\\n          />\\n        </ChartGroup>\\n        <ChartAxis tickValues={[2, 3, 4]} />\\n        <ChartAxis dependentAxis tickValues={[2, 5, 8]} />\\n      </Chart>\\n    </div>\\n    <div className=\\\"chart-legend\\\">\\n      <ChartLegend\\n        data={[{ name: 'Cats' }, { name: 'Dogs', symbol: { type: 'dash' } }, { name: 'Birds' }, { name: 'Mice' }]}\\n        title=\\\"Average number of pets\\\"\\n        height={50}\\n        theme={ChartTheme.light.green}\\n      />\\n    </div>\\n  </div>\\n</div>\\n\")), mdx(\"h2\", {\n    \"id\": \"multi-color-themed-line-chart\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#multi-color-themed-line-chart\",\n    \"aria-label\": \"multi color themed line chart permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Multi-color themed line chart\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Chart, ChartGroup, ChartLegend, ChartLine, ChartTheme, ChartAxis } from '@patternfly/react-charts';\\nimport { Grid, GridItem, Text, TextVariants } from '@patternfly/react-core';\\n\\n<div style={{ display: 'flex-inline' }}>\\n  <div style={{ width: 450, height: 360 }}>\\n    <div>\\n      <Chart theme={ChartTheme.light.multi}>\\n        <ChartGroup>\\n          <ChartLine\\n            data={[\\n              { name: 'Cats', x: 1, y: 1 },\\n              { name: 'Cats', x: 2, y: 2 },\\n              { name: 'Cats', x: 3, y: 5 },\\n              { name: 'Cats', x: 4, y: 3 }\\n            ]}\\n          />\\n          <ChartLine\\n            data={[\\n              { name: 'Dogs', x: 1, y: 2 },\\n              { name: 'Dogs', x: 2, y: 1 },\\n              { name: 'Dogs', x: 3, y: 7 },\\n              { name: 'Dogs', x: 4, y: 4 }\\n            ]}\\n            style={{\\n              data: {\\n                strokeDasharray: '3,3'\\n              }\\n            }}\\n          />\\n          <ChartLine\\n            data={[\\n              { name: 'Birds', x: 1, y: 3 },\\n              { name: 'Birds', x: 2, y: 4 },\\n              { name: 'Birds', x: 3, y: 9 },\\n              { name: 'Birds', x: 4, y: 5 }\\n            ]}\\n          />\\n          <ChartLine\\n            data={[\\n              { name: 'Mice', x: 1, y: 3 },\\n              { name: 'Mice', x: 2, y: 3 },\\n              { name: 'Mice', x: 3, y: 8 },\\n              { name: 'Mice', x: 4, y: 7 }\\n            ]}\\n          />\\n        </ChartGroup>\\n        <ChartAxis tickValues={[2, 3, 4]} />\\n        <ChartAxis dependentAxis tickValues={[2, 5, 8]} />\\n      </Chart>\\n    </div>\\n    <div className=\\\"chart-legend\\\">\\n      <ChartLegend\\n        data={[{ name: 'Cats' }, { name: 'Dogs', symbol: { type: 'dash' } }, { name: 'Birds' }, { name: 'Mice' }]}\\n        title=\\\"Average number of pets\\\"\\n        height={50}\\n        theme={ChartTheme.light.multi}\\n      />\\n    </div>\\n  </div>\\n</div>\\n\")));\n}\nMDXContent.isMDXComponent = true;"},"frontmatter":{"title":"Line chart","section":"charts","cssPrefix":null}},"metadata":{"edges":[{"node":{"path":"src/components/ChartLine/ChartLine.js","name":"ChartLine","description":"","props":[{"name":"","description":"See TypeScript API docs: https://formidable.com/open-source/victory/docs/victory-line/","required":false,"type":{"name":"any"},"defaultValue":null}]}}]},"description":null,"allGetStartedNavigationJson":{"edges":[{"node":{"text":"About","path":"/get-started/about"}},{"node":{"text":"Develop","path":"/get-started/developers"}},{"node":{"text":"Design","path":"/get-started/designers"}},{"node":{"text":"Migrate from PatternFly 3","path":"/get-started/migrate"}},{"node":{"text":"Accessibility guide","path":"/get-started/accessibility-guide"}}]},"allDesignGuidelinesNavigationJson":{"edges":[{"node":{"text":"Styles","path":"/design-guidelines/styles/","subNav":[{"text":"Colors","path":"/design-guidelines/styles/colors"},{"text":"Colors for charts","path":"/design-guidelines/styles/colors-for-charts"},{"text":"Icons","path":"/design-guidelines/styles/icons"},{"text":"Typography","path":"/design-guidelines/styles/typography"},{"text":"Spacers","path":"/design-guidelines/styles/spacers"}]}},{"node":{"text":"Usage and behavior","path":"/design-guidelines/usage-and-behavior/","subNav":[{"text":"About modal","path":"/design-guidelines/usage-and-behavior/about-modal"},{"text":"Alerts and notifications","path":"/design-guidelines/usage-and-behavior/alerts-and-notifications"},{"text":"Buttons and links","path":"/design-guidelines/usage-and-behavior/buttons-and-links"},{"text":"Charts","path":"/design-guidelines/usage-and-behavior/charts"},{"text":"Data input","path":"/design-guidelines/usage-and-behavior/data-input"},{"text":"Empty state","path":"/design-guidelines/usage-and-behavior/empty-state"},{"text":"Filters","path":"/design-guidelines/usage-and-behavior/filters"},{"text":"Forms","path":"/design-guidelines/usage-and-behavior/forms"},{"text":"Lists and tables","path":"/design-guidelines/usage-and-behavior/lists-and-tables"},{"text":"Login","path":"/design-guidelines/usage-and-behavior/login"},{"text":"Modal dialog","path":"/design-guidelines/usage-and-behavior/modal"},{"text":"Navigation system","path":"/design-guidelines/usage-and-behavior/navigation-system"},{"text":"Progress bar","path":"/design-guidelines/usage-and-behavior/progress-bar"},{"text":"Toolbar","path":"/design-guidelines/usage-and-behavior/toolbar"}]}},{"node":{"text":"Content","path":"/design-guidelines/content","subNav":[{"text":"Writing","path":"/design-guidelines/content/writing"},{"text":"Voice","path":"/design-guidelines/content/voice-and-tone"},{"text":"Style guide","path":"/design-guidelines/content/grammar-and-terminology"}]}}]}},"pageContext":{"title":"Line chart","fileAbsolutePath":"/home/travis/build/patternfly/patternfly-org/packages/patternfly-4/_repos/react-charts/src/components/ChartLine/ChartLine.md","pathRegex":"/ChartLine/.*/","reactUrl":"chartline"}}