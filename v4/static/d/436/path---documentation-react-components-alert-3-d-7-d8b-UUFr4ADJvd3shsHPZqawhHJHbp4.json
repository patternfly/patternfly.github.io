{"data":{"mdx":{"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Alert\",\n  \"cssPrefix\": \"pf-c-alert\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"info-alert\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#info-alert\",\n    \"aria-label\": \"info alert permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Info alert\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Alert, AlertActionLink, AlertActionCloseButton } from '@patternfly/react-core';\\n\\nclass InfoAlert extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    super(props)\\n    this.state = { alertOneVisible: true, alertTwoVisible: true };\\n    this.hideAlertOne = () => this.setState({ alertOneVisible: false });\\n    this.hideAlertTwo = () => this.setState({ alertTwoVisible: false });\\n  }\\n  \\n  render() {\\n    const { alertOneVisible, alertTwoVisible } = this.state;\\n    return (\\n      <React.Fragment>\\n        {alertOneVisible && (\\n          <Alert\\n            variant=\\\"info\\\"\\n            title=\\\"Info alert title\\\"\\n            action={<AlertActionCloseButton onClose={this.hideAlertOne} />}\\n          >\\n            Info alert description. <a href=\\\"#\\\">This is a link.</a>\\n          </Alert>\\n        )}\\n        {alertTwoVisible && (\\n          <Alert\\n            variant=\\\"info\\\"\\n            title=\\\"Info alert title\\\"\\n            action={<AlertActionCloseButton onClose={this.hideAlertTwo} />}\\n          />\\n        )}\\n        <Alert variant=\\\"info\\\" title=\\\"Info alert title\\\" action={<AlertActionLink>Action Button</AlertActionLink>} />\\n        <Alert variant=\\\"info\\\" title=\\\"Info alert title\\\" />\\n      </React.Fragment>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"success-alert\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#success-alert\",\n    \"aria-label\": \"success alert permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Success alert\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Alert, AlertActionLink, AlertActionCloseButton } from '@patternfly/react-core';\\n\\nclass SuccessAlert extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    super(props)\\n    this.state = { alertOneVisible: true, alertTwoVisible: true };\\n    this.hideAlertOne = () => this.setState({ alertOneVisible: false });\\n    this.hideAlertTwo = () => this.setState({ alertTwoVisible: false });\\n  }\\n  render() {\\n    const { alertOneVisible, alertTwoVisible } = this.state;\\n    return (\\n      <React.Fragment>\\n        {alertOneVisible && (\\n          <Alert\\n            variant=\\\"success\\\"\\n            title=\\\"Success alert title\\\"\\n            action={<AlertActionCloseButton onClose={this.hideAlertOne} />}\\n          >\\n            Success alert description. <a href=\\\"#\\\">This is a link.</a>\\n          </Alert>\\n        )}\\n        {alertTwoVisible && (\\n          <Alert\\n            variant=\\\"success\\\"\\n            title=\\\"Success alert title\\\"\\n            action={<AlertActionCloseButton onClose={this.hideAlertTwo} />}\\n          />\\n        )}\\n        <Alert\\n          variant=\\\"success\\\"\\n          title=\\\"Success alert title\\\"\\n          action={<AlertActionLink>Action Button</AlertActionLink>}\\n        />\\n        <Alert variant=\\\"success\\\" title=\\\"Success alert title\\\" />\\n      </React.Fragment>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"warning-alert\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#warning-alert\",\n    \"aria-label\": \"warning alert permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Warning alert\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Alert, AlertActionLink, AlertActionCloseButton } from '@patternfly/react-core';\\n\\nclass WarningAlert extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    super(props)\\n    this.state = { alertOneVisible: true, alertTwoVisible: true };\\n    this.hideAlertOne = () => this.setState({ alertOneVisible: false });\\n    this.hideAlertTwo = () => this.setState({ alertTwoVisible: false });\\n  }\\n  render() {\\n    const { alertOneVisible, alertTwoVisible } = this.state;\\n    return (\\n      <React.Fragment>\\n        {alertOneVisible && (\\n          <Alert\\n            variant=\\\"warning\\\"\\n            title=\\\"Warning alert title\\\"\\n            action={<AlertActionCloseButton onClose={this.hideAlertOne} />}\\n          >\\n            Warning alert description. <a href=\\\"#\\\">This is a link.</a>\\n          </Alert>\\n        )}\\n        {alertTwoVisible && (\\n          <Alert\\n            variant=\\\"warning\\\"\\n            title=\\\"Warning alert title\\\"\\n            action={<AlertActionCloseButton onClose={this.hideAlertTwo} />}\\n          />\\n        )}\\n        <Alert\\n          variant=\\\"warning\\\"\\n          title=\\\"Warning alert title\\\"\\n          action={<AlertActionLink>Action Button</AlertActionLink>}\\n        />\\n        <Alert variant=\\\"warning\\\" title=\\\"Warning alert title\\\" />\\n      </React.Fragment>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"danger-alert\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#danger-alert\",\n    \"aria-label\": \"danger alert permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Danger alert\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Alert, AlertActionLink, AlertActionCloseButton } from '@patternfly/react-core';\\n\\nclass DangerAlert extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    super(props)\\n    this.state = { alertOneVisible: true, alertTwoVisible: true };\\n    this.hideAlertOne = () => this.setState({ alertOneVisible: false });\\n    this.hideAlertTwo = () => this.setState({ alertTwoVisible: false });\\n  }\\n  render() {\\n    const { alertOneVisible, alertTwoVisible } = this.state;\\n    return (\\n      <React.Fragment>\\n        {alertOneVisible && (\\n          <Alert\\n            variant=\\\"danger\\\"\\n            title=\\\"Danger alert title\\\"\\n            action={<AlertActionCloseButton action={<AlertActionCloseButton onClose={this.hideAlertOne} />} />}\\n          >\\n            Danger alert description. <a href=\\\"#\\\">This is a link.</a>\\n          </Alert>\\n        )}\\n        {alertTwoVisible && (\\n          <Alert\\n            variant=\\\"danger\\\"\\n            title=\\\"Danger alert title\\\"\\n            action={<AlertActionCloseButton onClose={this.hideAlertTwo} />}\\n          />\\n        )}\\n        <Alert variant=\\\"danger\\\" title=\\\"Danger alert title\\\" action={<AlertActionLink>Action Button</AlertActionLink>} />\\n        <Alert variant=\\\"danger\\\" title=\\\"Danger alert title\\\" />\\n      </React.Fragment>\\n    );\\n  }\\n}\\n\")));\n}\nMDXContent.isMDXComponent = true;"},"frontmatter":{"title":"Alert","section":null,"cssPrefix":"pf-c-alert"}},"metadata":{"edges":[{"node":{"path":"src/components/Alert/Alert.js","name":"Alert","description":"","props":[{"name":"variant","description":"Adds Alert variant styles","required":true,"type":{"name":"enum"},"defaultValue":null},{"name":"title","description":"Title of the Alert","required":true,"type":{"name":"node"},"defaultValue":null},{"name":"action","description":"Action button to put in the Alert.  Should be <AlertActionLink> or <AlertActionCloseButton>","required":false,"type":{"name":"node"},"defaultValue":{"value":"null"}},{"name":"children","description":"content rendered inside the Alert","required":false,"type":{"name":"node"},"defaultValue":{"value":"''"}},{"name":"className","description":"additional classes added to the Alert","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"aria-label","description":"Adds accessible text to the Alert","required":false,"type":{"name":"string"},"defaultValue":{"value":"undefined"}},{"name":"variantLabel","description":"Variant label text for screen readers","required":false,"type":{"name":"string"},"defaultValue":{"value":"null"}},{"name":"","description":"Additional props are spread to the container <div>","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/Alert/AlertActionCloseButton.js","name":"AlertActionCloseButton","description":"","props":[{"name":"className","description":"additional classes added to the AlertActionCloseButton","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"onClose","description":"A callback for when the close button is clicked","required":false,"type":{"name":"func"},"defaultValue":{"value":"() => undefined"}},{"name":"aria-label","description":"Aria Label for the Close button","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"","description":"Additional props are spread to the container <Button>","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/Alert/AlertActionLink.js","name":"AlertActionLink","description":"","props":[{"name":"children","description":"content rendered inside the AlertLinkAction","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"className","description":"additional classes added to the AlertActionLink","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"","description":"Additional props are spread to the container <Button>","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/Alert/AlertBody.js","name":"AlertBody","description":"","props":[{"name":"title","description":"","required":false,"type":{"name":"node"},"defaultValue":{"value":"null"}},{"name":"children","description":"","required":false,"type":{"name":"node"},"defaultValue":{"value":"''"}},{"name":"className","description":"","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"onClose","description":"","required":false,"type":{"name":"func"},"defaultValue":{"value":"undefined"}},{"name":"closeButtonAriaLabel","description":"","required":false,"type":{"name":"string"},"defaultValue":{"value":"'Close'"}}]}},{"node":{"path":"src/components/Alert/AlertIcon.js","name":"AlertIcon","description":"","props":[{"name":"variant","description":"","required":true,"type":{"name":"enum"},"defaultValue":null},{"name":"className","description":"","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}}]}}]},"description":{"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"reactUrl\": \"alert\",\n  \"htmlUrl\": \"alert\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Alerts\"), \" are used to notify the user about a change in status or other event. Related design guidelines: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"design-guidelines/usage-and-behavior/alerts-and-notifications\"\n  }), \"Alerts and Notifications\")));\n}\nMDXContent.isMDXComponent = true;"}},"allGetStartedNavigationJson":{"edges":[{"node":{"text":"About","path":"/get-started/about"}},{"node":{"text":"Develop","path":"/get-started/developers"}},{"node":{"text":"Design","path":"/get-started/designers"}},{"node":{"text":"Migrate from PatternFly 3","path":"/get-started/migrate"}},{"node":{"text":"Accessibility guide","path":"/get-started/accessibility-guide"}}]},"allDesignGuidelinesNavigationJson":{"edges":[{"node":{"text":"Styles","path":"/design-guidelines/styles/","subNav":[{"text":"Colors","path":"/design-guidelines/styles/colors"},{"text":"Colors for charts","path":"/design-guidelines/styles/colors-for-charts"},{"text":"Icons","path":"/design-guidelines/styles/icons"},{"text":"Typography","path":"/design-guidelines/styles/typography"},{"text":"Spacers","path":"/design-guidelines/styles/spacers"}]}},{"node":{"text":"Usage and behavior","path":"/design-guidelines/usage-and-behavior/","subNav":[{"text":"About modal","path":"/design-guidelines/usage-and-behavior/about-modal"},{"text":"Alerts and notifications","path":"/design-guidelines/usage-and-behavior/alerts-and-notifications"},{"text":"Buttons and links","path":"/design-guidelines/usage-and-behavior/buttons-and-links"},{"text":"Charts","path":"/design-guidelines/usage-and-behavior/charts"},{"text":"Data input","path":"/design-guidelines/usage-and-behavior/data-input"},{"text":"Empty state","path":"/design-guidelines/usage-and-behavior/empty-state"},{"text":"Filters","path":"/design-guidelines/usage-and-behavior/filters"},{"text":"Forms","path":"/design-guidelines/usage-and-behavior/forms"},{"text":"Lists and tables","path":"/design-guidelines/usage-and-behavior/lists-and-tables"},{"text":"Login","path":"/design-guidelines/usage-and-behavior/login"},{"text":"Modal dialog","path":"/design-guidelines/usage-and-behavior/modal"},{"text":"Navigation system","path":"/design-guidelines/usage-and-behavior/navigation-system"},{"text":"Progress bar","path":"/design-guidelines/usage-and-behavior/progress-bar"},{"text":"Toolbar","path":"/design-guidelines/usage-and-behavior/toolbar"}]}},{"node":{"text":"Content","path":"/design-guidelines/content","subNav":[{"text":"Writing","path":"/design-guidelines/content/writing"},{"text":"Voice","path":"/design-guidelines/content/voice-and-tone"},{"text":"Style guide","path":"/design-guidelines/content/grammar-and-terminology"}]}}]}},"pageContext":{"title":"Alert","fileAbsolutePath":"/home/travis/build/patternfly/patternfly-org/packages/patternfly-4/_repos/react-core/src/components/Alert/Alert.md","pathRegex":"/Alert/.*/","reactUrl":"alert"}}