{"data":{"mdx":{"rawBody":"---\ntitle: 'Modal'\ncssPrefix: 'pf-c-modal-box'\n---\n\nimport { Modal, Button } from '@patternfly/react-core';\n\n## Simple Modal\n```js\nimport React from 'react';\nimport { Modal, Button } from '@patternfly/react-core';\n\nclass SimpleModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isModalOpen: false\n    };\n    this.handleModalToggle = () => {\n      this.setState(({ isModalOpen }) => ({\n        isModalOpen: !isModalOpen\n      }));\n    };\n  }\n\n  render() {\n    const { isModalOpen } = this.state;\n\n    return (\n      <React.Fragment>\n        <Button variant=\"primary\" onClick={this.handleModalToggle}>\n          Show Modal\n        </Button>\n        <Modal\n          title=\"Modal Header\"\n          isOpen={isModalOpen}\n          onClose={this.handleModalToggle}\n          actions={[\n            <Button key=\"cancel\" variant=\"secondary\" onClick={this.handleModalToggle}>\n              Cancel\n            </Button>,\n            <Button key=\"confirm\" variant=\"primary\" onClick={this.handleModalToggle}>\n              Confirm\n            </Button>\n          ]}\n        >\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n          magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n          consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id\n          est laborum.\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}\n```\n\n## Modal (Small)\n```js\nimport React from 'react';\nimport { Modal, Button } from '@patternfly/react-core';\n\nclass SmallModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isModalOpen: false\n    };\n    this.handleModalToggle = () => {\n      this.setState(({ isModalOpen }) => ({\n        isModalOpen: !isModalOpen\n      }));\n    };\n  }\n\n  render() {\n    const { isModalOpen } = this.state;\n\n    return (\n      <React.Fragment>\n        <Button variant=\"primary\" onClick={this.handleModalToggle}>\n          Show Small Modal\n        </Button>\n        <Modal\n          isSmall\n          title=\"Modal Header\"\n          isOpen={isModalOpen}\n          onClose={this.handleModalToggle}\n          actions={[\n            <Button key=\"cancel\" variant=\"secondary\" onClick={this.handleModalToggle}>\n              Cancel\n            </Button>,\n            <Button key=\"confirm\" variant=\"primary\" onClick={this.handleModalToggle}>\n              Confirm\n            </Button>\n          ]}\n        >\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n          magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n          consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id\n          est laborum.\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}\n```\n\n## Modal (Large)\n```js\nimport React from 'react';\nimport { Modal, Button } from '@patternfly/react-core';\n\nclass LargeModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isModalOpen: false\n    };\n    this.handleModalToggle = () => {\n      this.setState(({ isModalOpen }) => ({\n        isModalOpen: !isModalOpen\n      }));\n    };\n  }\n\n  render() {\n    const { isModalOpen } = this.state;\n\n    return (\n      <React.Fragment>\n        <Button variant=\"primary\" onClick={this.handleModalToggle}>\n          Show Large Modal\n        </Button>\n        <Modal\n          isLarge\n          title=\"Modal Header\"\n          isOpen={isModalOpen}\n          onClose={this.handleModalToggle}\n          actions={[\n            <Button key=\"cancel\" variant=\"secondary\" onClick={this.handleModalToggle}>\n              Cancel\n            </Button>,\n            <Button key=\"confirm\" variant=\"primary\" onClick={this.handleModalToggle}>\n              Confirm\n            </Button>\n          ]}\n        >\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n          magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n          consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id\n          est laborum.\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}\n```\n\n## Modal (Width)\n```js\nimport React from 'react';\nimport { Modal, Button } from '@patternfly/react-core';\n\nclass WidthModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isModalOpen: false\n    };\n    this.handleModalToggle = () => {\n      this.setState(({ isModalOpen }) => ({\n        isModalOpen: !isModalOpen\n      }));\n    };\n  }\n\n  render() {\n    const { isModalOpen } = this.state;\n\n    return (\n      <React.Fragment>\n        <Button variant=\"primary\" onClick={this.handleModalToggle}>\n          Show 50% Width Modal\n        </Button>\n        <Modal\n          width={'50%'}\n          title=\"Modal Header\"\n          isOpen={isModalOpen}\n          onClose={this.handleModalToggle}\n          actions={[\n            <Button key=\"cancel\" variant=\"secondary\" onClick={this.handleModalToggle}>\n              Cancel\n            </Button>,\n            <Button key=\"confirm\" variant=\"primary\" onClick={this.handleModalToggle}>\n              Confirm\n            </Button>\n          ]}\n        >\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n          magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n          consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id\n          est laborum.\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}\n```\n\n## Modal (No Header)\n```js\nimport React from 'react';\nimport { Modal, Button } from '@patternfly/react-core';\n\nclass NoHeader extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isModalOpen: false\n    };\n    this.handleModalToggle = () => {\n      this.setState(({ isModalOpen }) => ({\n        isModalOpen: !isModalOpen\n      }));\n    };\n  }\n\n  render() {\n    const { isModalOpen } = this.state;\n\n    return (\n      <React.Fragment>\n        <Button variant=\"primary\" onClick={this.handleModalToggle}>\n          Show No Header Modal\n        </Button>\n        <Modal\n          isLarge\n          title=\"Modal Header\"\n          isOpen={isModalOpen}\n          hideTitle={true}\n          ariaDescribedById=\"no-header-example\"\n          onClose={this.handleModalToggle}\n          actions={[\n            <Button key=\"confirm\" variant=\"primary\" onClick={this.handleModalToggle}>\n              Close\n            </Button>\n          ]}\n        >\n          <span id=\"no-header-example\">\n            When static text describing the modal is available, it can be wrapped with an ID referring to the modal's\n            aria-describedby value.\n          </span>{' '}\n          Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n          Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n          Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}\n```\n","code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Modal\",\n  \"cssPrefix\": \"pf-c-modal-box\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"simple-modal\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#simple-modal\",\n    \"aria-label\": \"simple modal permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Simple Modal\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Modal, Button } from '@patternfly/react-core';\\n\\nclass SimpleModal extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isModalOpen: false\\n    };\\n    this.handleModalToggle = () => {\\n      this.setState(({ isModalOpen }) => ({\\n        isModalOpen: !isModalOpen\\n      }));\\n    };\\n  }\\n\\n  render() {\\n    const { isModalOpen } = this.state;\\n\\n    return (\\n      <React.Fragment>\\n        <Button variant=\\\"primary\\\" onClick={this.handleModalToggle}>\\n          Show Modal\\n        </Button>\\n        <Modal\\n          title=\\\"Modal Header\\\"\\n          isOpen={isModalOpen}\\n          onClose={this.handleModalToggle}\\n          actions={[\\n            <Button key=\\\"cancel\\\" variant=\\\"secondary\\\" onClick={this.handleModalToggle}>\\n              Cancel\\n            </Button>,\\n            <Button key=\\\"confirm\\\" variant=\\\"primary\\\" onClick={this.handleModalToggle}>\\n              Confirm\\n            </Button>\\n          ]}\\n        >\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\\n          magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id\\n          est laborum.\\n        </Modal>\\n      </React.Fragment>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"modal-small\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#modal-small\",\n    \"aria-label\": \"modal small permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Modal (Small)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Modal, Button } from '@patternfly/react-core';\\n\\nclass SmallModal extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isModalOpen: false\\n    };\\n    this.handleModalToggle = () => {\\n      this.setState(({ isModalOpen }) => ({\\n        isModalOpen: !isModalOpen\\n      }));\\n    };\\n  }\\n\\n  render() {\\n    const { isModalOpen } = this.state;\\n\\n    return (\\n      <React.Fragment>\\n        <Button variant=\\\"primary\\\" onClick={this.handleModalToggle}>\\n          Show Small Modal\\n        </Button>\\n        <Modal\\n          isSmall\\n          title=\\\"Modal Header\\\"\\n          isOpen={isModalOpen}\\n          onClose={this.handleModalToggle}\\n          actions={[\\n            <Button key=\\\"cancel\\\" variant=\\\"secondary\\\" onClick={this.handleModalToggle}>\\n              Cancel\\n            </Button>,\\n            <Button key=\\\"confirm\\\" variant=\\\"primary\\\" onClick={this.handleModalToggle}>\\n              Confirm\\n            </Button>\\n          ]}\\n        >\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\\n          magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id\\n          est laborum.\\n        </Modal>\\n      </React.Fragment>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"modal-large\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#modal-large\",\n    \"aria-label\": \"modal large permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Modal (Large)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Modal, Button } from '@patternfly/react-core';\\n\\nclass LargeModal extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isModalOpen: false\\n    };\\n    this.handleModalToggle = () => {\\n      this.setState(({ isModalOpen }) => ({\\n        isModalOpen: !isModalOpen\\n      }));\\n    };\\n  }\\n\\n  render() {\\n    const { isModalOpen } = this.state;\\n\\n    return (\\n      <React.Fragment>\\n        <Button variant=\\\"primary\\\" onClick={this.handleModalToggle}>\\n          Show Large Modal\\n        </Button>\\n        <Modal\\n          isLarge\\n          title=\\\"Modal Header\\\"\\n          isOpen={isModalOpen}\\n          onClose={this.handleModalToggle}\\n          actions={[\\n            <Button key=\\\"cancel\\\" variant=\\\"secondary\\\" onClick={this.handleModalToggle}>\\n              Cancel\\n            </Button>,\\n            <Button key=\\\"confirm\\\" variant=\\\"primary\\\" onClick={this.handleModalToggle}>\\n              Confirm\\n            </Button>\\n          ]}\\n        >\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\\n          magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id\\n          est laborum.\\n        </Modal>\\n      </React.Fragment>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"modal-width\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#modal-width\",\n    \"aria-label\": \"modal width permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Modal (Width)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Modal, Button } from '@patternfly/react-core';\\n\\nclass WidthModal extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isModalOpen: false\\n    };\\n    this.handleModalToggle = () => {\\n      this.setState(({ isModalOpen }) => ({\\n        isModalOpen: !isModalOpen\\n      }));\\n    };\\n  }\\n\\n  render() {\\n    const { isModalOpen } = this.state;\\n\\n    return (\\n      <React.Fragment>\\n        <Button variant=\\\"primary\\\" onClick={this.handleModalToggle}>\\n          Show 50% Width Modal\\n        </Button>\\n        <Modal\\n          width={'50%'}\\n          title=\\\"Modal Header\\\"\\n          isOpen={isModalOpen}\\n          onClose={this.handleModalToggle}\\n          actions={[\\n            <Button key=\\\"cancel\\\" variant=\\\"secondary\\\" onClick={this.handleModalToggle}>\\n              Cancel\\n            </Button>,\\n            <Button key=\\\"confirm\\\" variant=\\\"primary\\\" onClick={this.handleModalToggle}>\\n              Confirm\\n            </Button>\\n          ]}\\n        >\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\\n          magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id\\n          est laborum.\\n        </Modal>\\n      </React.Fragment>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"modal-no-header\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#modal-no-header\",\n    \"aria-label\": \"modal no header permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Modal (No Header)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Modal, Button } from '@patternfly/react-core';\\n\\nclass NoHeader extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isModalOpen: false\\n    };\\n    this.handleModalToggle = () => {\\n      this.setState(({ isModalOpen }) => ({\\n        isModalOpen: !isModalOpen\\n      }));\\n    };\\n  }\\n\\n  render() {\\n    const { isModalOpen } = this.state;\\n\\n    return (\\n      <React.Fragment>\\n        <Button variant=\\\"primary\\\" onClick={this.handleModalToggle}>\\n          Show No Header Modal\\n        </Button>\\n        <Modal\\n          isLarge\\n          title=\\\"Modal Header\\\"\\n          isOpen={isModalOpen}\\n          hideTitle={true}\\n          ariaDescribedById=\\\"no-header-example\\\"\\n          onClose={this.handleModalToggle}\\n          actions={[\\n            <Button key=\\\"confirm\\\" variant=\\\"primary\\\" onClick={this.handleModalToggle}>\\n              Close\\n            </Button>\\n          ]}\\n        >\\n          <span id=\\\"no-header-example\\\">\\n            When static text describing the modal is available, it can be wrapped with an ID referring to the modal's\\n            aria-describedby value.\\n          </span>{' '}\\n          Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\\n          Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </Modal>\\n      </React.Fragment>\\n    );\\n  }\\n}\\n\")));\n}\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"fileAbsolutePath":"/home/travis/build/patternfly/patternfly-org/packages/patternfly-4/_repos/react-core/src/components/Modal/Modal.md","fullscreen":true}}