{"data":{"mdx":{"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Form\",\n  \"cssPrefix\": \"pf-c-form\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"simple-form\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#simple-form\",\n    \"aria-label\": \"simple form permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Simple form\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport {\\n  Form,\\n  FormGroup,\\n  TextInput,\\n  TextArea,\\n  FormSelectionOption,\\n  FormSelect,\\n  Checkbox,\\n  ActionGroup,\\n  Button,\\n  Radio\\n} from '@patternfly/react-core';\\n\\nclass SimpleForm extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value1: '',\\n      value2: '',\\n      value3: ''\\n    };\\n    this.handleTextInputChange1 = value1 => {\\n      this.setState({ value1 });\\n    };\\n    this.handleTextInputChange2 = value2 => {\\n      this.setState({ value2 });\\n    };\\n    this.handleTextInputChange3 = value3 => {\\n      this.setState({ value3 });\\n    };\\n  }\\n\\n  render() {\\n    const { value1, value2, value3 } = this.state;\\n\\n    return (\\n      <Form>\\n        <FormGroup\\n          label=\\\"Required Name\\\"\\n          isRequired\\n          fieldId=\\\"simple-form-name\\\"\\n          helperText=\\\"Please provide your full name\\\"\\n        >\\n          <TextInput\\n            isRequired\\n            type=\\\"text\\\"\\n            id=\\\"simple-form-name\\\"\\n            name=\\\"simple-form-name\\\"\\n            aria-describedby=\\\"simple-form-name-helper\\\"\\n            value={value1}\\n            onChange={this.handleTextInputChange1}\\n          />\\n        </FormGroup>\\n        <FormGroup label=\\\"Required Email\\\" isRequired fieldId=\\\"simple-form-email\\\">\\n          <TextInput\\n            isRequired\\n            type=\\\"email\\\"\\n            id=\\\"simple-form-email\\\"\\n            name=\\\"simple-form-email\\\"\\n            value={value2}\\n            onChange={this.handleTextInputChange2}\\n          />\\n        </FormGroup>\\n        <FormGroup label=\\\"Phone number\\\" isRequired fieldId=\\\"simple-form-number\\\">\\n          <TextInput\\n            isRequired\\n            type=\\\"tel\\\"\\n            id=\\\"simple-form-number\\\"\\n            placeholder=\\\"555-555-5555\\\"\\n            name=\\\"simple-form-number\\\"\\n            value={value3}\\n            onChange={this.handleTextInputChange3}\\n          />\\n        </FormGroup>\\n        <FormGroup isInline label=\\\"required How can we contact you?\\\" isRequired fieldId=\\\"inline-radio1\\\">\\n          <Radio id=\\\"inlineradio1\\\" name=\\\"inlineradios\\\" label=\\\"Email\\\" aria-label=\\\"Email\\\" />\\n          <Radio id=\\\"inlineradio2\\\" name=\\\"inlineradios\\\" label=\\\"Phone\\\" aria-label=\\\"Phone\\\" />\\n          <Radio\\n            id=\\\"inlineradio3\\\"\\n            name=\\\"inlineradios\\\"\\n            label=\\\"Please don't contact me\\\"\\n            aria-label=\\\"Please don't contact me\\\"\\n          />\\n        </FormGroup>\\n        <FormGroup label=\\\"Additional Note:\\\" fieldId=\\\"simple-form-note\\\">\\n          <TextInput isDisabled type=\\\"text\\\" id=\\\"simple-form-note\\\" name=\\\"simple-form-number\\\" value=\\\"disabled\\\" />\\n        </FormGroup>\\n        <FormGroup fieldId=\\\"checkbox1\\\">\\n          <Checkbox label=\\\"I'd like updates via email\\\" id=\\\"checkbox1\\\" name=\\\"checkbox1\\\" aria-label=\\\"Update via email\\\" />\\n        </FormGroup>\\n        <ActionGroup>\\n          <Button variant=\\\"primary\\\">Submit form</Button>\\n          <Button variant=\\\"secondary\\\">Cancel</Button>\\n        </ActionGroup>\\n      </Form>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"form-horizontal\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#form-horizontal\",\n    \"aria-label\": \"form horizontal permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Form (horizontal)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport {\\n  Form,\\n  FormGroup,\\n  TextInput,\\n  TextArea,\\n  FormSelectionOption,\\n  FormSelect,\\n  Checkbox,\\n  ActionGroup,\\n  Button,\\n  Radio\\n} from '@patternfly/react-core';\\n\\nclass HorizontalForm extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: 'please choose',\\n      value1: '',\\n      value2: '',\\n      value3: ''\\n    };\\n    this.onChange = (value, event) => {\\n      this.setState({ value });\\n    };\\n    this.handleTextInputChange1 = value1 => {\\n      this.setState({ value1 });\\n    };\\n    this.handleTextInputChange2 = value2 => {\\n      this.setState({ value2 });\\n    };\\n    this.handleTextInputChange3 = value3 => {\\n      this.setState({ value3 });\\n    };\\n    this.options = [\\n      { value: 'please choose', label: 'Please Choose', disabled: false },\\n      { value: 'mr', label: 'Mr', disabled: false },\\n      { value: 'miss', label: 'Miss', disabled: false },\\n      { value: 'mrs', label: 'Mrs', disabled: false },\\n      { value: 'ms', label: 'Ms', disabled: false },\\n      { value: 'dr', label: 'Dr', disabled: false },\\n      { value: 'other', label: 'Other', disabled: false }\\n    ];\\n  }\\n\\n  render() {\\n    const { value1, value2, value3 } = this.state;\\n\\n    return (\\n      <Form isHorizontal>\\n        <FormGroup\\n          label=\\\"Required Name\\\"\\n          isRequired\\n          fieldId=\\\"horizontal-form-name\\\"\\n          helperText=\\\"Please provide your full name\\\"\\n        >\\n          <TextInput\\n            value={value1}\\n            isRequired\\n            type=\\\"text\\\"\\n            id=\\\"horizontal-form-name\\\"\\n            aria-describedby=\\\"horizontal-form-name-helper\\\"\\n            name=\\\"horizontal-form-name\\\"\\n            onChange={this.handleTextInputChange1}\\n          />\\n        </FormGroup>\\n        <FormGroup label=\\\"Email\\\" isRequired fieldId=\\\"horizontal-form-email\\\">\\n          <TextInput\\n            value={value2}\\n            onChange={this.handleTextInputChange2}\\n            isRequired\\n            type=\\\"email\\\"\\n            id=\\\"horizontal-form-email\\\"\\n            name=\\\"horizontal-form-email\\\"\\n          />\\n        </FormGroup>\\n        <FormGroup label=\\\"Your title\\\" fieldId=\\\"horizontal-form-title\\\">\\n          <FormSelect\\n            value={this.state.value}\\n            onChange={this.onChange}\\n            id=\\\"horzontal-form-title\\\"\\n            name=\\\"horizontal-form-title\\\"\\n          >\\n            {this.options.map((option, index) => (\\n              <FormSelectOption isDisabled={option.disabled} key={index} value={option.value} label={option.label} />\\n            ))}\\n          </FormSelect>\\n        </FormGroup>\\n        <FormGroup label=\\\"Your experience\\\" fieldId=\\\"horizontal-form-exp\\\">\\n          <TextArea\\n            value={value3}\\n            onChange={this.handleTextInputChange3}\\n            name=\\\"horizontal-form-exp\\\"\\n            id=\\\"horizontal-form-exp\\\"\\n          />\\n        </FormGroup>\\n        <FormGroup>\\n          <Checkbox label=\\\"Follow up via email\\\" id=\\\"alt-form-checkbox-1\\\" name=\\\"alt-form-checkbox-1\\\" />\\n        </FormGroup>\\n        <FormGroup>\\n          <Checkbox label=\\\"Remember my password for 30 days\\\" id=\\\"alt-form-checkbox-2\\\" name=\\\"alt-form-checkbox-2\\\" />\\n        </FormGroup>\\n        <ActionGroup>\\n          <Button variant=\\\"primary\\\">Submit form</Button>\\n          <Button variant=\\\"secondary\\\">Cancel</Button>\\n        </ActionGroup>\\n      </Form>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"form-invalid\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#form-invalid\",\n    \"aria-label\": \"form invalid permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Form (invalid)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport {\\n  Form,\\n  FormGroup,\\n  TextInput,\\n  TextArea,\\n  FormSelectionOption,\\n  FormSelect,\\n  Checkbox,\\n  ActionGroup,\\n  Button,\\n  Radio\\n} from '@patternfly/react-core';\\n\\nclass InvalidForm extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: 'Five',\\n      isValid: false\\n    };\\n    this.handleTextInputChange = value => {\\n      this.setState({ value, isValid: /^\\\\d+$/.test(value) });\\n    };\\n  }\\n\\n  render() {\\n    const { value, isValid } = this.state;\\n\\n    return (\\n      <Form>\\n        <FormGroup\\n          label=\\\"Age:\\\"\\n          type=\\\"number\\\"\\n          helperText=\\\"Please write your age\\\"\\n          helperTextInvalid=\\\"Age has to be a number\\\"\\n          fieldId=\\\"age\\\"\\n          isValid={isValid}\\n        >\\n          <TextInput\\n            isValid={isValid}\\n            value={value}\\n            id=\\\"age\\\"\\n            aria-describedby=\\\"age-helper\\\"\\n            onChange={this.handleTextInputChange}\\n          />\\n        </FormGroup>\\n      </Form>\\n    );\\n  }\\n}\\n\")));\n}\nMDXContent.isMDXComponent = true;"},"frontmatter":{"title":"Form","section":null,"cssPrefix":"pf-c-form"}},"metadata":{"edges":[{"node":{"path":"src/components/Form/ActionGroup.js","name":"ActionGroup","description":"","props":[{"name":"children","description":"Anything that can be rendered as ActionGroup content.","required":false,"type":{"name":"node"},"defaultValue":{"value":"null"}},{"name":"className","description":"Additional classes added to the ActionGroup.","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"","description":"Additional props are spread to the container <div>","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/Form/Form.js","name":"Form","description":"","props":[{"name":"children","description":"Anything that can be rendered as Form content.","required":false,"type":{"name":"node"},"defaultValue":{"value":"null"}},{"name":"className","description":"Additional classes added to the Form.","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"isHorizontal","description":"Sets the Form to horizontal.","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"","description":"Additional props are spread to the container <form>","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/Form/FormGroup.js","name":"FormGroup","description":"","props":[{"name":"children","description":"Anything that can be rendered as FormGroup content.","required":false,"type":{"name":"node"},"defaultValue":{"value":"null"}},{"name":"className","description":"Additional classes added to the FormGroup.","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"label","description":"Label text before the field.","required":false,"type":{"name":"node"},"defaultValue":{"value":"undefined"}},{"name":"isRequired","description":"Sets the FormGroup required.","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isValid","description":"Sets the FormGroup isValid.","required":false,"type":{"name":"bool"},"defaultValue":{"value":"true"}},{"name":"isInline","description":"Sets the FormGroup isInline.","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"helperText","description":"Helper text after the field. It can be a simple text or an object.","required":false,"type":{"name":"node"},"defaultValue":{"value":"undefined"}},{"name":"helperTextInvalid","description":"Helper text after the field when the field is isValid. It can be a simple text or an object.","required":false,"type":{"name":"node"},"defaultValue":{"value":"undefined"}},{"name":"fieldId","description":"ID of the included field. It has to be the same for proper working.","required":true,"type":{"name":"string"},"defaultValue":null},{"name":"","description":"Additional props are spread to the container <div>","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/Form/FormHelperText.js","name":"FormHelperText","description":"","props":[{"name":"children","description":"Content rendered inside the Helper Text Item","required":false,"type":{"name":"node"},"defaultValue":{"value":"null"}},{"name":"isError","description":"Adds error styling to the Helper Text  *","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isHidden","description":"Hides the helper text *","required":false,"type":{"name":"bool"},"defaultValue":{"value":"true"}},{"name":"className","description":"Additional classes added to the Helper Text  Item","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"","description":"Additional props are spread to the container <p>","required":false,"type":{"name":"any"},"defaultValue":null}]}}]},"description":{"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"reactUrl\": \"form\",\n  \"htmlUrl\": \"form\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A form is a group of elements used to collect information from a user. Related design guidelines: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"design-guidelines/usage-and-behavior/forms\"\n  }), \"Forms\")));\n}\nMDXContent.isMDXComponent = true;"}},"allGetStartedNavigationJson":{"edges":[{"node":{"text":"About","path":"/get-started/about"}},{"node":{"text":"Develop","path":"/get-started/developers"}},{"node":{"text":"Design","path":"/get-started/designers"}},{"node":{"text":"Migration guide","path":"/get-started/migrate"}},{"node":{"text":"Accessibility guide","path":"/get-started/accessibility-guide"}}]},"allDesignGuidelinesNavigationJson":{"edges":[{"node":{"text":"Styles","path":"/design-guidelines/styles/","subNav":[{"text":"Colors","path":"/design-guidelines/styles/colors"},{"text":"Colors for charts","path":"/design-guidelines/styles/colors-for-charts"},{"text":"Icons","path":"/design-guidelines/styles/icons"},{"text":"Typography","path":"/design-guidelines/styles/typography"},{"text":"Spacers","path":"/design-guidelines/styles/spacers"}]}},{"node":{"text":"Usage and behavior","path":"/design-guidelines/usage-and-behavior/","subNav":[{"text":"About modal","path":"/design-guidelines/usage-and-behavior/about-modal"},{"text":"Alerts and notifications","path":"/design-guidelines/usage-and-behavior/alerts-and-notifications"},{"text":"Buttons and links","path":"/design-guidelines/usage-and-behavior/buttons-and-links"},{"text":"Charts","path":"/design-guidelines/usage-and-behavior/charts"},{"text":"Data input","path":"/design-guidelines/usage-and-behavior/data-input"},{"text":"Empty state","path":"/design-guidelines/usage-and-behavior/empty-state"},{"text":"Filters","path":"/design-guidelines/usage-and-behavior/filters"},{"text":"Forms","path":"/design-guidelines/usage-and-behavior/forms"},{"text":"Lists and tables","path":"/design-guidelines/usage-and-behavior/lists-and-tables"},{"text":"Login","path":"/design-guidelines/usage-and-behavior/login"},{"text":"Modal dialog","path":"/design-guidelines/usage-and-behavior/modal"},{"text":"Navigation system","path":"/design-guidelines/usage-and-behavior/navigation-system"},{"text":"Progress bar","path":"/design-guidelines/usage-and-behavior/progress-bar"},{"text":"Toolbar","path":"/design-guidelines/usage-and-behavior/toolbar"},{"text":"Wizard","path":"/design-guidelines/usage-and-behavior/wizard"}]}},{"node":{"text":"Content","path":"/design-guidelines/content","subNav":[{"text":"Writing","path":"/design-guidelines/content/writing"},{"text":"Voice","path":"/design-guidelines/content/voice-and-tone"},{"text":"Style guide","path":"/design-guidelines/content/grammar-and-terminology"}]}}]}},"pageContext":{"title":"Form","fileAbsolutePath":"/home/travis/build/patternfly/patternfly-org/packages/patternfly-4/_repos/react-core/src/components/Form/Form.md","pathRegex":"/Form/.*/","reactUrl":"form"}}