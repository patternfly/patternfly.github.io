{"data":{"mdx":{"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Accordion\",\n  \"cssPrefix\": \"pf-c-accordion\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"simple-accordion-with-a-single-expand-behavior\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#simple-accordion-with-a-single-expand-behavior\",\n    \"aria-label\": \"simple accordion with a single expand behavior permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Simple accordion with a single expand behavior\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Accordion, AccordionItem, AccordionContent, AccordionToggle } from '@patternfly/react-core';\\n\\nclass SimpleAccordion extends React.Component {\\n    constructor(props) {\\n    super(props);\\n    this.state = {\\n      expanded: 'ex-toggle2'\\n    };\\n  }\\n\\n  render() {\\n     const onToggle = id => {\\n      if (id === this.state.expanded) {\\n        this.setState({expanded: ''});\\n      } else {\\n        this.setState({expanded: id })\\n      }\\n    };\\n    return (\\n      <Accordion>\\n        <AccordionItem>\\n          <AccordionToggle\\n            onClick={() => {onToggle('ex-toggle1')}}\\n            isExpanded={this.state.expanded==='ex-toggle1'}\\n            id=\\\"ex-toggle1\\\"\\n          >\\n            Item One\\n          </AccordionToggle>\\n          <AccordionContent\\n            id=\\\"ex-expand1\\\"\\n            isHidden={this.state.expanded !== 'ex-toggle1'}\\n          >\\n            <p>\\n              Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et\\n              dolore magna aliqua.\\n            </p>\\n          </AccordionContent>\\n        </AccordionItem>\\n\\n        <AccordionItem>\\n          <AccordionToggle\\n            onClick={() => {onToggle('ex-toggle2')}}\\n            isExpanded={this.state.expanded === 'ex-toggle2'}\\n            id=\\\"ex-toggle2\\\"\\n          >\\n            Item Two\\n          </AccordionToggle>\\n          <AccordionContent\\n            id=\\\"ex-expand2\\\"\\n            isHidden={this.state.expanded !=='ex-toggle2'}\\n          >\\n            <p>\\n              Vivamus et tortor sed arcu congue vehicula eget et diam. Praesent nec dictum lorem. Aliquam id diam\\n              ultrices, faucibus erat id, maximus nunc.\\n            </p>\\n          </AccordionContent>\\n        </AccordionItem>\\n        \\n        <AccordionItem>\\n          <AccordionToggle\\n            onClick={() => {onToggle('ex-toggle3')}}\\n            isExpanded={this.state.expanded === 'ex-toggle3'}\\n            id=\\\"ex-toggle3\\\"\\n          >\\n            Item Three\\n          </AccordionToggle>\\n          <AccordionContent\\n            id=\\\"ex-expand3\\\"\\n            isHidden={this.state.expanded !== 'ex-toggle3'}\\n          >\\n            <p>Morbi vitae urna quis nunc convallis hendrerit. Aliquam congue orci quis ultricies tempus.</p>\\n          </AccordionContent>\\n        </AccordionItem>\\n\\n        <AccordionItem>\\n          <AccordionToggle\\n            onClick={() => {onToggle('ex-toggle4')}}\\n            isExpanded={this.state.expanded === 'ex-toggle4'}\\n            id=\\\"ex-toggle4\\\"\\n          >\\n            Item Four\\n          </AccordionToggle>\\n          <AccordionContent\\n            id=\\\"ex-expand4\\\"\\n            isHidden={this.state.expanded !== 'ex-toggle4'}\\n          >\\n            <p>\\n              Donec vel posuere orci. Phasellus quis tortor a ex hendrerit efficitur. Aliquam lacinia ligula pharetra,\\n              sagittis ex ut, pellentesque diam. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices\\n              posuere cubilia Curae; Vestibulum ultricies nulla nibh. Etiam vel dui fermentum ligula ullamcorper\\n              eleifend non quis tortor. Morbi tempus ornare tempus. Orci varius natoque penatibus et magnis dis\\n              parturient montes, nascetur ridiculus mus. Mauris et velit neque. Donec ultricies condimentum mauris,\\n              pellentesque imperdiet libero convallis convallis. Aliquam erat volutpat. Donec rutrum semper tempus.\\n              Proin dictum imperdiet nibh, quis dapibus nulla. Integer sed tincidunt lectus, sit amet auctor eros.\\n            </p>\\n          </AccordionContent>\\n        </AccordionItem>\\n\\n        <AccordionItem>\\n          <AccordionToggle\\n            onClick={() => {onToggle('ex-toggle5')}}\\n            isExpanded={this.state.expanded === 'ex-toggle5'}\\n            id=\\\"ex-toggle5\\\"\\n          >\\n            Item Five\\n          </AccordionToggle>\\n          <AccordionContent\\n            id=\\\"ex-expand5\\\"\\n            isHidden={this.state.expanded !== 'ex-toggle5'}\\n\\n          >\\n            <p>Vivamus finibus dictum ex id ultrices. Mauris dictum neque a iaculis blandit.</p>\\n          </AccordionContent>\\n        </AccordionItem>\\n      </Accordion>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"fixed-accordion-with-multiple-expand-behavior\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#fixed-accordion-with-multiple-expand-behavior\",\n    \"aria-label\": \"fixed accordion with multiple expand behavior permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Fixed accordion with multiple expand behavior\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Accordion, AccordionItem, AccordionContent, AccordionToggle } from '@patternfly/react-core';\\n\\nclass FixedAccordion extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      expanded: ['ex-toggle4']\\n    };\\n  }\\n  \\n  render() {\\n    const toggle = id => {\\n      const expanded = this.state.expanded;\\n      const index = expanded.indexOf(id);\\n      const newExpanded =\\n        index >= 0 ? [...expanded.slice(0, index), ...expanded.slice(index + 1, expanded.length)] : [...expanded, id];\\n      this.setState(() => ({ expanded: newExpanded }));\\n    };\\n\\n    return (\\n      <Accordion>\\n        <AccordionItem>\\n          <AccordionToggle\\n            onClick={() => toggle('ex-toggle1')}\\n            isExpanded={this.state.expanded.includes('ex-toggle1')}\\n            id=\\\"ex-toggle1\\\"\\n          >\\n            Item One\\n          </AccordionToggle>\\n          <AccordionContent\\n            id=\\\"ex-expand1\\\"\\n            isHidden={!this.state.expanded.includes('ex-toggle1')}\\n            isFixed\\n          >\\n            <p>\\n              Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et\\n              dolore magna aliqua.\\n            </p>\\n          </AccordionContent>\\n        </AccordionItem>\\n        <AccordionItem>\\n          <AccordionToggle\\n            onClick={() => toggle('ex-toggle2')}\\n            isExpanded={this.state.expanded.includes('ex-toggle2')}\\n            id=\\\"ex-toggle2\\\"\\n          >\\n            Item Two\\n          </AccordionToggle>\\n          <AccordionContent\\n            id=\\\"ex-expand2\\\"\\n            isHidden={!this.state.expanded.includes('ex-toggle2')}\\n            isFixed\\n          >\\n            <p>\\n              Vivamus et tortor sed arcu congue vehicula eget et diam. Praesent nec dictum lorem. Aliquam id diam\\n              ultrices, faucibus erat id, maximus nunc.\\n            </p>\\n          </AccordionContent>\\n        </AccordionItem>\\n        <AccordionItem>\\n          <AccordionToggle\\n            onClick={() => toggle('ex-toggle3')}\\n            isExpanded={this.state.expanded.includes('ex-toggle3')}\\n            id=\\\"ex-toggle3\\\"\\n          >\\n            Item Three\\n          </AccordionToggle>\\n          <AccordionContent\\n            id=\\\"ex-expand3\\\"\\n            isHidden={!this.state.expanded.includes('ex-toggle3')}\\n            isFixed\\n          >\\n            <p>Morbi vitae urna quis nunc convallis hendrerit. Aliquam congue orci quis ultricies tempus.</p>\\n          </AccordionContent>\\n        </AccordionItem>\\n        <AccordionItem>\\n          <AccordionToggle\\n            onClick={() => toggle('ex-toggle4')}\\n            isExpanded={this.state.expanded.includes('ex-toggle4')}\\n            id=\\\"ex-toggle4\\\"\\n          >\\n            Item Four\\n          </AccordionToggle>\\n          <AccordionContent\\n            id=\\\"ex-expand4\\\"\\n            isHidden={!this.state.expanded.includes('ex-toggle4')}\\n            isFixed\\n          >\\n            <p>\\n              Donec vel posuere orci. Phasellus quis tortor a ex hendrerit efficitur. Aliquam lacinia ligula pharetra,\\n              sagittis ex ut, pellentesque diam. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices\\n              posuere cubilia Curae; Vestibulum ultricies nulla nibh. Etiam vel dui fermentum ligula ullamcorper\\n              eleifend non quis tortor. Morbi tempus ornare tempus. Orci varius natoque penatibus et magnis dis\\n              parturient montes, nascetur ridiculus mus. Mauris et velit neque. Donec ultricies condimentum mauris,\\n              pellentesque imperdiet libero convallis convallis. Aliquam erat volutpat. Donec rutrum semper tempus.\\n              Proin dictum imperdiet nibh, quis dapibus nulla. Integer sed tincidunt lectus, sit amet auctor eros.\\n            </p>\\n          </AccordionContent>\\n        </AccordionItem>\\n        <AccordionItem>\\n          <AccordionToggle\\n            onClick={() => toggle('ex-toggle5')}\\n            isExpanded={this.state.expanded.includes('ex-toggle5')}\\n            id=\\\"ex-toggle5\\\"\\n          >\\n            Item Five\\n          </AccordionToggle>\\n          <AccordionContent\\n            id=\\\"ex-expand5\\\"\\n            isHidden={!this.state.expanded.includes('ex-toggle5')}\\n            isFixed\\n          >\\n            <p>Vivamus finibus dictum ex id ultrices. Mauris dictum neque a iaculis blandit.</p>\\n          </AccordionContent>\\n        </AccordionItem>\\n      </Accordion>\\n    );\\n  }\\n}\\n\")));\n}\nMDXContent.isMDXComponent = true;"},"frontmatter":{"title":"Accordion","section":null,"cssPrefix":"pf-c-accordion"}},"metadata":{"edges":[{"node":{"path":"src/components/Accordion/Accordion.js","name":"Accordion","description":"","props":[{"name":"children","description":"Content rendered inside the Accordion","required":false,"type":{"name":"node"},"defaultValue":{"value":"null"}},{"name":"className","description":"Additional classes added to the Accordion","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"aria-label","description":"Adds accessible text to the Accordion","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"","description":"Additional props are spread to the container <dl>","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/Accordion/AccordionContent.js","name":"AccordionContent","description":"","props":[{"name":"children","description":"Content rendered inside the Accordion","required":false,"type":{"name":"node"},"defaultValue":null},{"name":"className","description":"Additional classes added to the Accordion content","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"id","description":"Identify the AccordionContent item","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"isHidden","description":"Flag to show if the expanded content of the Accordion item is visible","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isFixed","description":"Flag to indicate Accordion content is fixed","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"aria-label","description":"Adds accessible text to the Accordion content","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"","description":"Additional props are spread to the container <dd>","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/Accordion/AccordionItem.js","name":"AccordionItem","description":"","props":[{"name":"children","description":"Content rendered inside the Accordion item","required":false,"type":{"name":"node"},"defaultValue":{"value":"null"}},{"name":"","description":"Additional props are spread to the container","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/Accordion/AccordionToggle.js","name":"AccordionToggle","description":"","props":[{"name":"className","description":"Additional classes added to the Accordion Toggle","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"isExpanded","description":"Flag to show if the expanded content of the Accordion item is visible","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"id","description":"Identify the Accordion toggle number","required":true,"type":{"name":"string"},"defaultValue":null},{"name":"","description":"Additional props are spread to the container <dt>","required":false,"type":{"name":"any"},"defaultValue":null}]}}]},"description":{"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"htmlUrl\": \"accordion\",\n  \"reactUrl\": \"accordion\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Accordions\"), \" are used to deliver a lot of content in a small space using progressive disclosure to allow the user to expand and collapse the component to show or hide information. In the collapsed state, the user will see the most important details about a topic. They can then click on the accordion to expand the content area and view additional details.\"));\n}\nMDXContent.isMDXComponent = true;"}},"allGetStartedNavigationJson":{"edges":[{"node":{"text":"About","path":"/get-started/about"}},{"node":{"text":"Develop","path":"/get-started/developers"}},{"node":{"text":"Design","path":"/get-started/designers"}},{"node":{"text":"Migration guide","path":"/get-started/migrate"}},{"node":{"text":"Accessibility guide","path":"/get-started/accessibility-guide"}}]},"allDesignGuidelinesNavigationJson":{"edges":[{"node":{"text":"Styles","path":"/design-guidelines/styles/","subNav":[{"text":"Colors","path":"/design-guidelines/styles/colors"},{"text":"Colors for charts","path":"/design-guidelines/styles/chart-colors"},{"text":"Icons","path":"/design-guidelines/styles/icons"},{"text":"Typography","path":"/design-guidelines/styles/typography"},{"text":"Spacers","path":"/design-guidelines/styles/spacers"}]}},{"node":{"text":"Usage and behavior","path":"/design-guidelines/usage-and-behavior/","subNav":[{"text":"About modal","path":"/design-guidelines/usage-and-behavior/about-modal"},{"text":"Alerts and notifications","path":"/design-guidelines/usage-and-behavior/alerts-and-notifications"},{"text":"Buttons and links","path":"/design-guidelines/usage-and-behavior/buttons-and-links"},{"text":"Charts","path":"/design-guidelines/usage-and-behavior/charts"},{"text":"Data input","path":"/design-guidelines/usage-and-behavior/data-input"},{"text":"Empty state","path":"/design-guidelines/usage-and-behavior/empty-state"},{"text":"Filters","path":"/design-guidelines/usage-and-behavior/filters"},{"text":"Forms","path":"/design-guidelines/usage-and-behavior/forms"},{"text":"Lists and tables","path":"/design-guidelines/usage-and-behavior/lists-and-tables"},{"text":"Login","path":"/design-guidelines/usage-and-behavior/login"},{"text":"Modal dialog","path":"/design-guidelines/usage-and-behavior/modal"},{"text":"Navigation system","path":"/design-guidelines/usage-and-behavior/navigation-system"},{"text":"Progress bar","path":"/design-guidelines/usage-and-behavior/progress-bar"},{"text":"Toolbar","path":"/design-guidelines/usage-and-behavior/toolbar"},{"text":"Wizard","path":"/design-guidelines/usage-and-behavior/wizard"}]}},{"node":{"text":"Content","path":"/design-guidelines/content","subNav":[{"text":"Writing","path":"/design-guidelines/content/writing"},{"text":"Voice","path":"/design-guidelines/content/voice-and-tone"},{"text":"Style guide","path":"/design-guidelines/content/grammar-and-terminology"}]}}]}},"pageContext":{"title":"Accordion","fileAbsolutePath":"/home/travis/build/patternfly/patternfly-org/packages/patternfly-4/_repos/react-core/src/components/Accordion/Accordion.md","pathRegex":"/Accordion/.*/","reactUrl":"accordion"}}