{"data":{"mdx":{"rawBody":"---\ntitle: 'Select'\ncssPrefix: 'pf-c-select'\n---\n\nimport { Select, SelectOption, SelectVariant, CheckboxSelectGroup, CheckboxSelectOption } from '@patternfly/react-core';\n\n## Single Select Input\n```js\nimport React from 'react';\nimport { Select, SelectOption, SelectVariant, CheckboxSelectGroup, CheckboxSelectOption } from '@patternfly/react-core';\n\nclass SingleSelectInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.options = [\n      { value: 'Choose...', disabled: false, isPlaceholder: true },\n      { value: 'Mr', disabled: false },\n      { value: 'Miss', disabled: false },\n      { value: 'Mrs', disabled: false },\n      { value: 'Ms', disabled: false },\n      { value: 'Dr', disabled: false },\n      { value: 'Other', disabled: false }\n    ];\n\n    this.state = {\n      isExpanded: false,\n      selected: null\n    };\n\n    this.onToggle = isExpanded => {\n      this.setState({\n        isExpanded\n      });\n    };\n\n    this.onSelect = (event, selection, isPlaceholder) => {\n      if (isPlaceholder) this.clearSelection();\n      else {\n        this.setState({\n          selected: selection,\n          isExpanded: false\n        });\n        console.log('selected:', selection);\n      }\n    };\n\n    this.clearSelection = () => {\n      this.setState({\n        selected: null,\n        isExpanded: false\n      });\n    };\n  }\n\n  render() {\n    const { isExpanded, selected } = this.state;\n    const titleId = 'title-id';\n    return (\n      <div>\n        <span id={titleId} hidden>\n          Title\n        </span>\n        <Select\n          variant={SelectVariant.single}\n          aria-label=\"Select Input\"\n          onToggle={this.onToggle}\n          onSelect={this.onSelect}\n          selections={selected}\n          isExpanded={isExpanded}\n          ariaLabelledBy={titleId}\n        >\n          {this.options.map((option, index) => (\n            <SelectOption\n              isDisabled={option.disabled}\n              key={index}\n              value={option.value}\n              isPlaceholder={option.isPlaceholder}\n            />\n          ))}\n        </Select>\n      </div>\n    );\n  }\n}\n```\n\n## Checkbox Select Input\n```js\nimport React from 'react';\nimport { Select, SelectOption, SelectVariant, CheckboxSelectGroup, CheckboxSelectOption } from '@patternfly/react-core';\n\nclass CheckboxSelectInput extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isExpanded: false,\n      selected: []\n    };\n\n    this.onToggle = isExpanded => {\n      this.setState({\n        isExpanded\n      });\n    };\n\n    this.onSelect = (event, selection) => {\n      const { selected } = this.state;\n      if (selected.includes(selection)) {\n        this.setState(\n          prevState => ({ selected: prevState.selected.filter(item => item !== selection) }),\n          () => console.log('selections: ', this.state.selected)\n        );\n      } else {\n        this.setState(\n          prevState => ({ selected: [...prevState.selected, selection] }),\n          () => console.log('selections: ', this.state.selected)\n        );\n      }\n    };\n\n    this.clearSelection = () => {\n      this.setState({\n        selected: []\n      });\n    };\n\n    this.options = [\n      <CheckboxSelectOption key={0} value=\"Active\" />,\n      <CheckboxSelectOption key={1} value=\"Cancelled\" />,\n      <CheckboxSelectOption key={2} value=\"Paused\" />,\n      <CheckboxSelectOption key={3} value=\"Warning\" />,\n      <CheckboxSelectOption key={4} value=\"Restarted\" />\n    ];\n  }\n\n  render() {\n    const { isExpanded, selected } = this.state;\n    const titleId = 'checkbox-select-id';\n    return (\n      <div>\n        <span id={titleId} hidden>\n          Checkbox Title\n        </span>\n        <Select\n          variant={SelectVariant.checkbox}\n          aria-label=\"Select Input\"\n          onToggle={this.onToggle}\n          onSelect={this.onSelect}\n          selections={selected}\n          isExpanded={isExpanded}\n          placeholderText=\"Filter by status\"\n          ariaLabelledBy={titleId}\n        >\n          {this.options}\n        </Select>\n      </div>\n    );\n  }\n}\n```\n\n## Grouped Checkbox Select Input\n```js\nimport React from 'react';\nimport { Select, SelectOption, SelectVariant, CheckboxSelectGroup, CheckboxSelectOption } from '@patternfly/react-core';\n\nclass GroupedCheckboxSelectInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isExpanded: false,\n      selected: []\n    };\n\n    this.onToggle = isExpanded => {\n      this.setState({\n        isExpanded\n      });\n    };\n\n    this.onSelect = (event, selection) => {\n      const { selected } = this.state;\n      if (selected.includes(selection)) {\n        this.setState(\n          prevState => ({ selected: prevState.selected.filter(item => item !== selection) }),\n          () => console.log('selections: ', this.state.selected)\n        );\n      } else {\n        this.setState(\n          prevState => ({ selected: [...prevState.selected, selection] }),\n          () => console.log('selections: ', this.state.selected)\n        );\n      }\n    };\n\n    this.clearSelection = () => {\n      this.setState({\n        selected: []\n      });\n    };\n\n    this.options = [\n      <CheckboxSelectGroup label=\"Status\" key=\"group1\">\n        <CheckboxSelectOption key={0} value=\"Running\" />\n        <CheckboxSelectOption key={1} value=\"Stopped\" />\n        <CheckboxSelectOption key={2} value=\"Down\" />\n        <CheckboxSelectOption key={3} value=\"Degraded\" />\n        <CheckboxSelectOption key={4} value=\"Needs Maintenence\" />\n      </CheckboxSelectGroup>,\n      <CheckboxSelectGroup label=\"Vendor Names\" key=\"group2\">\n        <CheckboxSelectOption key={5} value=\"Dell\" />\n        <CheckboxSelectOption key={6} value=\"Samsung\" isDisabled />\n        <CheckboxSelectOption key={7} value=\"Hewlett-Packard\" />\n      </CheckboxSelectGroup>\n    ];\n  }\n\n  render() {\n    const { isExpanded, selected } = this.state;\n    const titleId = 'grouped-checkbox-select-id';\n    return (\n      <div>\n        <span id={titleId} hidden>\n          Grouped Checkbox Title\n        </span>\n        <Select\n          variant={SelectVariant.checkbox}\n          aria-label=\"Grouped Checkbox Select Input\"\n          onToggle={this.onToggle}\n          onSelect={this.onSelect}\n          selections={selected}\n          isExpanded={isExpanded}\n          placeholderText=\"Filter by status\"\n          ariaLabelledBy={titleId}\n          isGrouped\n        >\n          {this.options}\n        </Select>\n      </div>\n    );\n  }\n}\n```\n","code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Select\",\n  \"cssPrefix\": \"pf-c-select\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"single-select-input\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#single-select-input\",\n    \"aria-label\": \"single select input permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Single Select Input\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Select, SelectOption, SelectVariant, CheckboxSelectGroup, CheckboxSelectOption } from '@patternfly/react-core';\\n\\nclass SingleSelectInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.options = [\\n      { value: 'Choose...', disabled: false, isPlaceholder: true },\\n      { value: 'Mr', disabled: false },\\n      { value: 'Miss', disabled: false },\\n      { value: 'Mrs', disabled: false },\\n      { value: 'Ms', disabled: false },\\n      { value: 'Dr', disabled: false },\\n      { value: 'Other', disabled: false }\\n    ];\\n\\n    this.state = {\\n      isExpanded: false,\\n      selected: null\\n    };\\n\\n    this.onToggle = isExpanded => {\\n      this.setState({\\n        isExpanded\\n      });\\n    };\\n\\n    this.onSelect = (event, selection, isPlaceholder) => {\\n      if (isPlaceholder) this.clearSelection();\\n      else {\\n        this.setState({\\n          selected: selection,\\n          isExpanded: false\\n        });\\n        console.log('selected:', selection);\\n      }\\n    };\\n\\n    this.clearSelection = () => {\\n      this.setState({\\n        selected: null,\\n        isExpanded: false\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isExpanded, selected } = this.state;\\n    const titleId = 'title-id';\\n    return (\\n      <div>\\n        <span id={titleId} hidden>\\n          Title\\n        </span>\\n        <Select\\n          variant={SelectVariant.single}\\n          aria-label=\\\"Select Input\\\"\\n          onToggle={this.onToggle}\\n          onSelect={this.onSelect}\\n          selections={selected}\\n          isExpanded={isExpanded}\\n          ariaLabelledBy={titleId}\\n        >\\n          {this.options.map((option, index) => (\\n            <SelectOption\\n              isDisabled={option.disabled}\\n              key={index}\\n              value={option.value}\\n              isPlaceholder={option.isPlaceholder}\\n            />\\n          ))}\\n        </Select>\\n      </div>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"checkbox-select-input\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#checkbox-select-input\",\n    \"aria-label\": \"checkbox select input permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Checkbox Select Input\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Select, SelectOption, SelectVariant, CheckboxSelectGroup, CheckboxSelectOption } from '@patternfly/react-core';\\n\\nclass CheckboxSelectInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      isExpanded: false,\\n      selected: []\\n    };\\n\\n    this.onToggle = isExpanded => {\\n      this.setState({\\n        isExpanded\\n      });\\n    };\\n\\n    this.onSelect = (event, selection) => {\\n      const { selected } = this.state;\\n      if (selected.includes(selection)) {\\n        this.setState(\\n          prevState => ({ selected: prevState.selected.filter(item => item !== selection) }),\\n          () => console.log('selections: ', this.state.selected)\\n        );\\n      } else {\\n        this.setState(\\n          prevState => ({ selected: [...prevState.selected, selection] }),\\n          () => console.log('selections: ', this.state.selected)\\n        );\\n      }\\n    };\\n\\n    this.clearSelection = () => {\\n      this.setState({\\n        selected: []\\n      });\\n    };\\n\\n    this.options = [\\n      <CheckboxSelectOption key={0} value=\\\"Active\\\" />,\\n      <CheckboxSelectOption key={1} value=\\\"Cancelled\\\" />,\\n      <CheckboxSelectOption key={2} value=\\\"Paused\\\" />,\\n      <CheckboxSelectOption key={3} value=\\\"Warning\\\" />,\\n      <CheckboxSelectOption key={4} value=\\\"Restarted\\\" />\\n    ];\\n  }\\n\\n  render() {\\n    const { isExpanded, selected } = this.state;\\n    const titleId = 'checkbox-select-id';\\n    return (\\n      <div>\\n        <span id={titleId} hidden>\\n          Checkbox Title\\n        </span>\\n        <Select\\n          variant={SelectVariant.checkbox}\\n          aria-label=\\\"Select Input\\\"\\n          onToggle={this.onToggle}\\n          onSelect={this.onSelect}\\n          selections={selected}\\n          isExpanded={isExpanded}\\n          placeholderText=\\\"Filter by status\\\"\\n          ariaLabelledBy={titleId}\\n        >\\n          {this.options}\\n        </Select>\\n      </div>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"grouped-checkbox-select-input\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#grouped-checkbox-select-input\",\n    \"aria-label\": \"grouped checkbox select input permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Grouped Checkbox Select Input\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Select, SelectOption, SelectVariant, CheckboxSelectGroup, CheckboxSelectOption } from '@patternfly/react-core';\\n\\nclass GroupedCheckboxSelectInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isExpanded: false,\\n      selected: []\\n    };\\n\\n    this.onToggle = isExpanded => {\\n      this.setState({\\n        isExpanded\\n      });\\n    };\\n\\n    this.onSelect = (event, selection) => {\\n      const { selected } = this.state;\\n      if (selected.includes(selection)) {\\n        this.setState(\\n          prevState => ({ selected: prevState.selected.filter(item => item !== selection) }),\\n          () => console.log('selections: ', this.state.selected)\\n        );\\n      } else {\\n        this.setState(\\n          prevState => ({ selected: [...prevState.selected, selection] }),\\n          () => console.log('selections: ', this.state.selected)\\n        );\\n      }\\n    };\\n\\n    this.clearSelection = () => {\\n      this.setState({\\n        selected: []\\n      });\\n    };\\n\\n    this.options = [\\n      <CheckboxSelectGroup label=\\\"Status\\\" key=\\\"group1\\\">\\n        <CheckboxSelectOption key={0} value=\\\"Running\\\" />\\n        <CheckboxSelectOption key={1} value=\\\"Stopped\\\" />\\n        <CheckboxSelectOption key={2} value=\\\"Down\\\" />\\n        <CheckboxSelectOption key={3} value=\\\"Degraded\\\" />\\n        <CheckboxSelectOption key={4} value=\\\"Needs Maintenence\\\" />\\n      </CheckboxSelectGroup>,\\n      <CheckboxSelectGroup label=\\\"Vendor Names\\\" key=\\\"group2\\\">\\n        <CheckboxSelectOption key={5} value=\\\"Dell\\\" />\\n        <CheckboxSelectOption key={6} value=\\\"Samsung\\\" isDisabled />\\n        <CheckboxSelectOption key={7} value=\\\"Hewlett-Packard\\\" />\\n      </CheckboxSelectGroup>\\n    ];\\n  }\\n\\n  render() {\\n    const { isExpanded, selected } = this.state;\\n    const titleId = 'grouped-checkbox-select-id';\\n    return (\\n      <div>\\n        <span id={titleId} hidden>\\n          Grouped Checkbox Title\\n        </span>\\n        <Select\\n          variant={SelectVariant.checkbox}\\n          aria-label=\\\"Grouped Checkbox Select Input\\\"\\n          onToggle={this.onToggle}\\n          onSelect={this.onSelect}\\n          selections={selected}\\n          isExpanded={isExpanded}\\n          placeholderText=\\\"Filter by status\\\"\\n          ariaLabelledBy={titleId}\\n          isGrouped\\n        >\\n          {this.options}\\n        </Select>\\n      </div>\\n    );\\n  }\\n}\\n\")));\n}\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"fileAbsolutePath":"/home/travis/build/patternfly/patternfly-org/packages/patternfly-4/_repos/react-core/src/components/Select/Select.md","fullscreen":true}}