{"data":{"mdx":{"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Clipboard copy\",\n  \"cssPrefix\": \"pf-c-copyclipboard\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"clipboard-copy\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#clipboard-copy\",\n    \"aria-label\": \"clipboard copy permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Clipboard copy\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { ClipboardCopy } from '@patternfly/react-core';\\n\\n<ClipboardCopy>This is editable</ClipboardCopy>;\\n\")), mdx(\"h2\", {\n    \"id\": \"read-only-clipboard-copy\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#read-only-clipboard-copy\",\n    \"aria-label\": \"read only clipboard copy permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Read only clipboard copy\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { ClipboardCopy } from '@patternfly/react-core';\\n\\n<ClipboardCopy isReadOnly>This is read-only</ClipboardCopy>;\\n\")), mdx(\"h2\", {\n    \"id\": \"expanded-clipboard-copy\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#expanded-clipboard-copy\",\n    \"aria-label\": \"expanded clipboard copy permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Expanded clipboard copy\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { ClipboardCopy, ClipboardCopyVariant } from '@patternfly/react-core';\\n\\n<ClipboardCopy variant={ClipboardCopyVariant.expansion}>\\n  Got a lot of text here, need to see all of it? Click that arrow on the left side and check out the resulting\\n  expansion.\\n</ClipboardCopy>\\n\")));\n}\nMDXContent.isMDXComponent = true;"},"frontmatter":{"title":"Clipboard copy","section":null,"cssPrefix":"pf-c-copyclipboard"}},"metadata":{"edges":[{"node":{"path":"src/components/ClipboardCopy/ClipboardCopy.js","name":"ClipboardCopy","description":"","props":[{"name":"className","description":"Additional classes added to the clipboard copy container.","required":false,"type":{"name":"string"},"defaultValue":null},{"name":"hoverTip","description":"Tooltip message to display when hover the copy button","required":false,"type":{"name":"string"},"defaultValue":{"value":"'Copy to clipboard'"}},{"name":"clickTip","description":"Tooltip message to display when clicking the copy button","required":false,"type":{"name":"string"},"defaultValue":{"value":"'Successfully copied to clipboard!'"}},{"name":"aria-label","description":"Custom flag to show that the input requires an associated id or aria-label.","required":false,"type":{"name":"string"},"defaultValue":{"value":"'Copyable input'"}},{"name":"toggle-aria-label","description":"Custom flag to show that the toggle button requires an associated id or aria-label.","required":false,"type":{"name":"string"},"defaultValue":{"value":"'Show content'"}},{"name":"isReadOnly","description":"Flag to show if the input is read only.","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"variant","description":"Adds Clipboard Copy variant styles.","required":false,"type":{"name":"enum"},"defaultValue":{"value":"'inline'"}},{"name":"position","description":"Copy button popover position.","required":false,"type":{"name":"enum"},"defaultValue":{"value":"TooltipPosition.top"}},{"name":"maxWidth","description":"Maximum width of the tooltip (default 150px).","required":false,"type":{"name":"string"},"defaultValue":{"value":"'150px'"}},{"name":"exitDelay","description":"Delay in ms before the tooltip disappears.","required":false,"type":{"name":"number"},"defaultValue":{"value":"1600"}},{"name":"entryDelay","description":"Delay in ms before the tooltip appears.","required":false,"type":{"name":"number"},"defaultValue":{"value":"100"}},{"name":"switchDelay","description":"Delay in ms before the tooltip message switch to hover tip.","required":false,"type":{"name":"number"},"defaultValue":{"value":"2000"}},{"name":"onCopy","description":"A function that is triggered on clicking the copy button.","required":false,"type":{"name":"func"},"defaultValue":{"value":"(event, text) => {\n  const clipboard = event.currentTarget.parentElement;\n  const el = document.createElement('input');\n  el.value = text;\n  clipboard.appendChild(el);\n  el.select();\n  document.execCommand('copy');\n  clipboard.removeChild(el);\n}"}},{"name":"onChange","description":"A function that is triggered on changing the text.","required":false,"type":{"name":"func"},"defaultValue":{"value":"() => {}"}},{"name":"children","description":"The text which is copied.","required":true,"type":{"name":"node"},"defaultValue":null},{"name":"","description":"Additional props are spread to the container <div>.","required":false,"type":{"name":"any"},"defaultValue":null}]}},{"node":{"path":"src/components/ClipboardCopy/CopyButton.js","name":"CopyButton","description":"","props":[{"name":"onClick","description":"","required":true,"type":{"name":"func"},"defaultValue":null},{"name":"children","description":"","required":true,"type":{"name":"node"},"defaultValue":null},{"name":"id","description":"","required":true,"type":{"name":"string"},"defaultValue":null},{"name":"textId","description":"","required":true,"type":{"name":"string"},"defaultValue":null},{"name":"className","description":"","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"exitDelay","description":"","required":false,"type":{"name":"number"},"defaultValue":{"value":"100"}},{"name":"entryDelay","description":"","required":false,"type":{"name":"number"},"defaultValue":{"value":"100"}},{"name":"maxWidth","description":"","required":false,"type":{"name":"string"},"defaultValue":{"value":"'100px'"}},{"name":"position","description":"","required":false,"type":{"name":"enum"},"defaultValue":{"value":"'top'"}},{"name":"aria-label","description":"","required":false,"type":{"name":"string"},"defaultValue":{"value":"'Copyable input'"}}]}},{"node":{"path":"src/components/ClipboardCopy/ExpandedContent.js","name":"ExpandedContent","description":"","props":[{"name":"className","description":"","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"children","description":"","required":true,"type":{"name":"node"},"defaultValue":null},{"name":"onChange","description":"","required":true,"type":{"name":"func"},"defaultValue":null}]}},{"node":{"path":"src/components/ClipboardCopy/ToggleButton.js","name":"ToggleButton","description":"","props":[{"name":"onClick","description":"","required":true,"type":{"name":"func"},"defaultValue":null},{"name":"id","description":"","required":true,"type":{"name":"string"},"defaultValue":null},{"name":"textId","description":"","required":true,"type":{"name":"string"},"defaultValue":null},{"name":"contentId","description":"","required":true,"type":{"name":"string"},"defaultValue":null},{"name":"isExpanded","description":"","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"className","description":"","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}}]}}]},"description":{"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"reactUrl\": \"clipboardcopy\",\n  \"htmlUrl\": \"clipboardcopy\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"clipboard copy\"), \" component is used when you want to copy a line or a block of text to the clipboard to paste it into another location. This is useful for copying system generated key values, for example, to both reduce user effort and the occurrence of entry errors.\"));\n}\nMDXContent.isMDXComponent = true;"}},"allGetStartedNavigationJson":{"edges":[{"node":{"text":"About","path":"/get-started/about"}},{"node":{"text":"Develop","path":"/get-started/developers"}},{"node":{"text":"Design","path":"/get-started/designers"}},{"node":{"text":"Migrate from PatternFly 3","path":"/get-started/migrate"}},{"node":{"text":"Accessibility guide","path":"/get-started/accessibility-guide"}}]},"allDesignGuidelinesNavigationJson":{"edges":[{"node":{"text":"Styles","path":"/design-guidelines/styles/","subNav":[{"text":"Colors","path":"/design-guidelines/styles/colors"},{"text":"Colors for charts","path":"/design-guidelines/styles/colors-for-charts"},{"text":"Icons","path":"/design-guidelines/styles/icons"},{"text":"Typography","path":"/design-guidelines/styles/typography"},{"text":"Spacers","path":"/design-guidelines/styles/spacers"}]}},{"node":{"text":"Usage and behavior","path":"/design-guidelines/usage-and-behavior/","subNav":[{"text":"About modal","path":"/design-guidelines/usage-and-behavior/about-modal"},{"text":"Alerts and notifications","path":"/design-guidelines/usage-and-behavior/alerts-and-notifications"},{"text":"Buttons and links","path":"/design-guidelines/usage-and-behavior/buttons-and-links"},{"text":"Charts","path":"/design-guidelines/usage-and-behavior/charts"},{"text":"Data input","path":"/design-guidelines/usage-and-behavior/data-input"},{"text":"Empty state","path":"/design-guidelines/usage-and-behavior/empty-state"},{"text":"Filters","path":"/design-guidelines/usage-and-behavior/filters"},{"text":"Forms","path":"/design-guidelines/usage-and-behavior/forms"},{"text":"Lists and tables","path":"/design-guidelines/usage-and-behavior/lists-and-tables"},{"text":"Login","path":"/design-guidelines/usage-and-behavior/login"},{"text":"Modal dialog","path":"/design-guidelines/usage-and-behavior/modal"},{"text":"Navigation system","path":"/design-guidelines/usage-and-behavior/navigation-system"},{"text":"Progress bar","path":"/design-guidelines/usage-and-behavior/progress-bar"},{"text":"Toolbar","path":"/design-guidelines/usage-and-behavior/toolbar"}]}},{"node":{"text":"Content","path":"/design-guidelines/content","subNav":[{"text":"Writing","path":"/design-guidelines/content/writing"},{"text":"Voice","path":"/design-guidelines/content/voice-and-tone"},{"text":"Style guide","path":"/design-guidelines/content/grammar-and-terminology"}]}}]}},"pageContext":{"title":"Clipboard copy","fileAbsolutePath":"/home/travis/build/patternfly/patternfly-org/packages/patternfly-4/_repos/react-core/src/components/ClipboardCopy/ClipboardCopy.md","pathRegex":"/ClipboardCopy/.*/","reactUrl":"clipboardcopy"}}