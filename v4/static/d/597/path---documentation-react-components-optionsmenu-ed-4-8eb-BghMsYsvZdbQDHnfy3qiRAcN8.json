{"data":{"mdx":{"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Options menu\",\n  \"cssPrefix\": \"pf-c-options-menu\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"options-menu---single-option\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#options-menu---single-option\",\n    \"aria-label\": \"options menu   single option permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Options menu - single option\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { OptionsMenu, OptionsMenuItem, OptionsMenuToggle } from '@patternfly/react-core';\\n\\nclass SingleOption extends React.Component {\\n  constructor(props) {\\n      super(props);\\n      this.state = {\\n        isOpen: false,\\n        toggleTemplateProps: {\\n          text: \\\"Options menu\\\"\\n        },\\n        selectedOption: \\\"singleOption1\\\"\\n      };\\n\\n      this.onToggle = () => {\\n          this.setState({\\n              isOpen: !this.state.isOpen\\n          });\\n      };\\n      \\n      this.onSelect = event => {\\n        const id = event.target.id;\\n        this.setState(() => {\\n          return { selectedOption: id };\\n        });\\n      };\\n\\n      this.toggleTemplate = ({toggleTemplateProps}) => {\\n        const { text } = toggleTemplateProps;\\n        return <React.Fragment>{text}</React.Fragment>\\n      };\\n    }\\n\\n  render() {\\n    const { isOpen, toggleTemplateProps } = this.state;\\n    const menuItems = [\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={this.state.selectedOption === \\\"singleOption1\\\"} id=\\\"singleOption1\\\" key=\\\"option 1\\\">Option 1</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={this.state.selectedOption === \\\"singleOption2\\\"} id=\\\"singleOption2\\\" key=\\\"option 2\\\">Option 2</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={this.state.selectedOption === \\\"singleOption3\\\"} id=\\\"singleOption3\\\" key=\\\"option 3\\\">Option 3</OptionsMenuItem>\\n    ];\\n    const toggle = <OptionsMenuToggle onToggle={this.onToggle} toggleTemplate={this.toggleTemplate} toggleTemplateProps={toggleTemplateProps}/>\\n\\n    return (\\n      <OptionsMenu \\n        id=\\\"options-menu-single-option-example\\\" \\n        menuItems={menuItems} \\n        isOpen={isOpen} \\n        toggle={toggle}/>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"options-menu---multiple-options\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#options-menu---multiple-options\",\n    \"aria-label\": \"options menu   multiple options permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Options menu - multiple options\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { OptionsMenu, OptionsMenuItem, OptionsMenuSeparator, OptionsMenuItemGroup, OptionsMenuToggle} from '@patternfly/react-core';\\n\\nclass MultipleOptions extends React.Component {\\n  constructor(props) {\\n      super(props);\\n      this.state = {\\n        isOpen: false,\\n        toggleTemplateProps: {\\n          text: \\\"Sort by\\\"\\n        },\\n        sortColumn: \\\"date\\\",\\n        sortDirection: \\\"ascending\\\"\\n      };\\n\\n      this.onToggle = () => {\\n          this.setState({\\n              isOpen: !this.state.isOpen\\n          });\\n      };\\n      \\n      this.onSelectColumn = event => {\\n        const id = event.target.id;\\n        this.setState(() => {\\n          return { sortColumn: id };\\n        });\\n      };\\n      \\n      this.onSelectDirection = event => {\\n        const id = event.target.id;\\n        this.setState(() => {\\n          return { sortDirection: id };\\n        });\\n      };\\n\\n      this.toggleTemplate = ({toggleTemplateProps}) => {\\n        const { text } = toggleTemplateProps;\\n        return <React.Fragment>{text}</React.Fragment>\\n      };\\n    }\\n\\n  render() {\\n    const { isOpen, toggleTemplateProps } = this.state;\\n    const menuItems = [\\n        <OptionsMenuItemGroup key=\\\"first group\\\" aria-label=\\\"Sort Column\\\">\\n          <OptionsMenuItem onSelect={this.onSelectColumn} isSelected={this.state.sortColumn === \\\"name\\\"} id=\\\"name\\\" key=\\\"name\\\">Name</OptionsMenuItem>\\n          <OptionsMenuItem onSelect={this.onSelectColumn} isSelected={this.state.sortColumn === \\\"date\\\"} id=\\\"date\\\" key=\\\"date\\\">Date</OptionsMenuItem>\\n          <OptionsMenuItem isDisabled onSelect={this.onSelectColumn} isSelected={this.state.sortColumn === \\\"disabled\\\"} id=\\\"disabled\\\" key=\\\"disabled\\\">Disabled</OptionsMenuItem>\\n          <OptionsMenuItem onSelect={this.onSelectColumn} isSelected={this.state.sortColumn === \\\"size\\\"} id=\\\"size\\\" key=\\\"size\\\">Size</OptionsMenuItem>\\n        </OptionsMenuItemGroup>,\\n        <OptionsMenuSeparator key=\\\"separator\\\"/>,\\n        <OptionsMenuItemGroup key=\\\"second group\\\" aria-label=\\\"Sort Direction\\\">\\n          <OptionsMenuItem onSelect={this.onSelectDirection} isSelected={this.state.sortDirection === \\\"ascending\\\"} id=\\\"ascending\\\" key=\\\"ascending\\\">Ascending</OptionsMenuItem>\\n          <OptionsMenuItem onSelect={this.onSelectDirection} isSelected={this.state.sortDirection === \\\"descending\\\"} id=\\\"descending\\\" key=\\\"descending\\\">Descending</OptionsMenuItem>\\n        </OptionsMenuItemGroup>\\n      ];\\n    const toggle = <OptionsMenuToggle onToggle={this.onToggle} toggleTemplate={this.toggleTemplate} toggleTemplateProps={toggleTemplateProps}/>\\n\\n    return (\\n      <OptionsMenu \\n        id=\\\"options-menu-multiple-options-example\\\" \\n        menuItems={menuItems} \\n        isOpen={isOpen}\\n        toggle={toggle} />\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"options-menu---plain\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#options-menu---plain\",\n    \"aria-label\": \"options menu   plain permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Options menu - plain\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { OptionsMenu, OptionsMenuItem, OptionsMenuToggle } from '@patternfly/react-core';\\nimport { SortAmountDownIcon } from '@patternfly/react-icons';\\n\\nclass Plain extends React.Component {\\n  constructor(props) {\\n      super(props);\\n      this.state = {\\n        isOpen: false,\\n        plainOption1: true,\\n        plainOption2: false,\\n        plainOption3: false\\n      };\\n\\n      this.onToggle = () => {\\n          this.setState({\\n              isOpen: !this.state.isOpen\\n          });\\n      };\\n      \\n      this.onSelect = event => {\\n        const id = event.target.id;\\n        this.setState((prevState) => {\\n          return { [id]: !prevState[id] };\\n        });\\n      };\\n\\n      this.toggleTemplate = () => {\\n        return <React.Fragment>\\n          <SortAmountDownIcon aria-hidden=\\\"true\\\"/>\\n        </React.Fragment>;\\n      }\\n    }\\n\\n  render() {\\n    const { isOpen } = this.state;\\n    const menuItems = [\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={this.state.plainOption1} id=\\\"plainOption1\\\" key=\\\"option 1\\\">Option 1</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={this.state.plainOption2} id=\\\"plainOption2\\\" key=\\\"option 2\\\">Option 2</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={this.state.plainOption3} id=\\\"plainOption3\\\" key=\\\"option 3\\\">Option 3</OptionsMenuItem>\\n    ];\\n    const toggle = <OptionsMenuToggle onToggle={this.onToggle} toggleTemplate={this.toggleTemplate} aria-label=\\\"Sort by\\\" hideCaret/>\\n\\n    return (\\n      <OptionsMenu id=\\\"options-menu-plain-example\\\" \\n        isPlain\\n        menuItems={menuItems}  \\n        isOpen={isOpen}\\n        toggle={toggle}/>\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"options-menu---top\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#options-menu---top\",\n    \"aria-label\": \"options menu   top permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Options menu - top\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { OptionsMenu, OptionsMenuItem, OptionsMenuDirection, OptionsMenuToggle } from '@patternfly/react-core';\\n\\nclass Top extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: false,\\n      toggleTemplateProps: {\\n        text: \\\"Options menu\\\"\\n      },\\n      topOption1: false,\\n      topOption2: false,\\n      topOption3: false\\n    };\\n\\n    this.onToggle = () => {\\n        this.setState({\\n            isOpen: !this.state.isOpen\\n        });\\n    };\\n    \\n    this.onSelect = event => {\\n      const id = event.target.id;\\n      this.setState((prevState) => {\\n        return { [id]: !prevState[id] };\\n      });\\n    };\\n\\n    this.toggleTemplate = ({toggleTemplateProps}) => {\\n      const { text } = toggleTemplateProps;\\n      return <React.Fragment>{text}</React.Fragment>\\n    };\\n  }\\n\\n  render() {\\n    const { toggleTemplateProps, isOpen } = this.state;\\n    const menuItems = [\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={this.state.topOption1} id=\\\"topOption1\\\" key=\\\"option 1\\\">Option 1</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={this.state.topOption2} id=\\\"topOption2\\\" key=\\\"option 2\\\">Option 2</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={this.state.topOption3} id=\\\"topOption3\\\" key=\\\"option 3\\\">Option 3</OptionsMenuItem>\\n    ];\\n    const toggle = <OptionsMenuToggle onToggle={this.onToggle} toggleTemplate={this.toggleTemplate} toggleTemplateProps={toggleTemplateProps}/>\\n\\n    return (\\n      <OptionsMenu \\n        id=\\\"options-menu-top-example\\\" \\n        direction={OptionsMenuDirection.up} \\n        menuItems={menuItems} \\n        toggle={toggle} \\n        isOpen={isOpen} />\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"options-menu---align-right\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#options-menu---align-right\",\n    \"aria-label\": \"options menu   align right permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Options menu - align right\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { OptionsMenu, OptionsMenuItem, OptionsMenuPosition, OptionsMenuToggle } from '@patternfly/react-core';\\n\\nclass AlignRight extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: false,\\n      toggleTemplateProps: {\\n        text: \\\"Align right\\\"\\n      },\\n      rightOption1: true,\\n      rightOption2: false,\\n      rightOption3: false\\n    };\\n\\n    this.onToggle = () => {\\n        this.setState({\\n            isOpen: !this.state.isOpen\\n        });\\n    };\\n    \\n    this.onSelect = event => {\\n      const id = event.target.id;\\n      this.setState((prevState) => {\\n        return { [id]: !prevState[id] };\\n      });\\n    };\\n\\n    this.toggleTemplate = ({toggleTemplateProps}) => {\\n      const { text } = toggleTemplateProps;\\n      return <React.Fragment>{text}</React.Fragment>\\n    };\\n  }\\n\\n  render() {\\n    const { toggleTemplateProps, isOpen } = this.state;\\n    const menuItems = [\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={this.state.rightOption1} id=\\\"rightOption1\\\" key=\\\"option 1\\\">Right option 1</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={this.state.rightOption2} id=\\\"rightOption2\\\" key=\\\"option 2\\\">Right option 2</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={this.state.rightOption3} id=\\\"rightOption3\\\" key=\\\"option 3\\\">Right option 3</OptionsMenuItem>\\n    ];\\n    const toggle = <OptionsMenuToggle onToggle={this.onToggle} toggleTemplate={this.toggleTemplate} toggleTemplateProps={toggleTemplateProps}/>\\n\\n    return (\\n      <OptionsMenu \\n        id=\\\"options-menu-align-right-example\\\" \\n        position={OptionsMenuPosition.right} \\n        menuItems={menuItems} \\n        toggle={toggle} \\n        isOpen={isOpen} />\\n    );\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"options-menu---plain-with-text\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#options-menu---plain-with-text\",\n    \"aria-label\": \"options menu   plain with text permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Options menu - plain with text\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { OptionsMenu, OptionsMenuItem, OptionsMenuToggleWithText } from '@patternfly/react-core';\\nimport { CaretDownIcon } from '@patternfly/react-icons';\\n\\nclass PlainWithText extends React.Component {\\n  constructor(props) {\\n      super(props);\\n      this.state = {\\n        isOpen: false,\\n        toggleText: <React.Fragment>Custom text</React.Fragment>,\\n        buttonContents: <CaretDownIcon/>,\\n        customOption1: true,\\n        customOption2: false,\\n        customOption3: false\\n      };\\n\\n      this.onToggle = () => {\\n          this.setState({\\n              isOpen: !this.state.isOpen\\n          });\\n      };\\n      \\n      this.onSelect = event => {\\n        const id = event.target.id;\\n        this.setState((prevState) => {\\n          return { [id]: !prevState[id] };\\n        });\\n      };\\n\\n      this.onToggle = () => {\\n        this.setState({\\n          isOpen: !this.state.isOpen\\n        });\\n      };\\n    }\\n\\n  render() {\\n    const { isOpen, toggleText, buttonContents } = this.state;\\n    const menuItems = [\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={this.state.customOption1} id=\\\"customOption1\\\" key=\\\"option 1\\\">Option 1</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={this.state.customOption2} id=\\\"customOption2\\\" key=\\\"option 2\\\">Option 2</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={this.state.customOption3} id=\\\"customOption3\\\" key=\\\"option 3\\\">Option 3</OptionsMenuItem>\\n    ];\\n    const toggle = <OptionsMenuToggleWithText toggleText={toggleText} toggleButtonContents={buttonContents} onToggle={this.onToggle} />;\\n\\n    return (\\n      <OptionsMenu \\n        id=\\\"options-menu-plain-with-text-example\\\" \\n        menuItems={menuItems} \\n        isOpen={isOpen} \\n        isPlain\\n        isText\\n        toggle={toggle} />\\n    );\\n  }\\n}\\n\")));\n}\nMDXContent.isMDXComponent = true;"},"frontmatter":{"title":"Options menu","section":null,"cssPrefix":"pf-c-options-menu"}},"metadata":{"edges":[{"node":{"path":"src/components/OptionsMenu/OptionsMenu.js","name":"OptionsMenu","description":"","props":[{"name":"className","description":"Classes applied to root element of the Options menu","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"id","description":"Id of the root element of the Options menu","required":true,"type":{"name":"string"},"defaultValue":null},{"name":"menuItems","description":"Array of OptionsMenuItem and/or OptionMenuItemGroup nodes that will be rendered in the Options menu list","required":true,"type":{"name":"arrayOf"},"defaultValue":null},{"name":"toggle","description":"Either an OptionsMenuToggle or an OptionsMenuToggleWithText to use to toggle the Options menu","required":true,"type":{"name":"node"},"defaultValue":null},{"name":"isOpen","description":"Flag to indicate if menu is open","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isPlain","description":"Flag to indicate the toggle has no border or background","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"ariaLabelMenu","description":"Provides an accessible name for the Options menu","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"direction","description":"Display menu above or below Options menu toggle","required":false,"type":{"name":"enum"},"defaultValue":{"value":"OptionsMenuDirection.down"}},{"name":"position","description":"Indicates where menu will be aligned horizontally","required":false,"type":{"name":"enum"},"defaultValue":{"value":"OptionsMenuPosition.left"}}]}},{"node":{"path":"src/components/OptionsMenu/OptionsMenuItem.js","name":"OptionsMenuItem","description":"","props":[{"name":"children","description":"Anything which can be rendered as an Options menu item","required":false,"type":{"name":"node"},"defaultValue":{"value":"null"}},{"name":"className","description":"Classes applied to root element of an Options menu item","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"isSelected","description":"Render Options menu item as selected","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isDisabled","description":"Render Options menu item as disabled option","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"onSelect","description":"Callback for when this Options menu item is selected","required":false,"type":{"name":"func"},"defaultValue":{"value":"Function.prototype"}},{"name":"id","description":"Unique id of this Options menu item","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}}]}},{"node":{"path":"src/components/OptionsMenu/OptionsMenuItemGroup.js","name":"OptionsMenuItemsGroup","description":"","props":[{"name":"children","description":"Content to be rendered in the Options menu items component","required":false,"type":{"name":"node"},"defaultValue":null},{"name":"className","description":"Classes applied to root element of the Options menu items group","required":false,"type":{"name":"string"},"defaultValue":null},{"name":"ariaLabel","description":"Provides an accessible name for the Options menu items group","required":false,"type":{"name":"string"},"defaultValue":null}]}},{"node":{"path":"src/components/OptionsMenu/OptionsMenuSeparator.js","name":"OptionsMenuSeparator","description":"","props":[{"name":"className","description":"Classes applied to root element of Options menu separator item","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}}]}},{"node":{"path":"src/components/OptionsMenu/OptionsMenuToggle.js","name":"OptionsMenuToggle","description":"","props":[{"name":"parentId","description":"Id of the parent Options menu component","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"onToggle","description":"Callback for when this Options menu is toggled","required":false,"type":{"name":"func"},"defaultValue":{"value":"Function.prototype"}},{"name":"isOpen","description":"Flag to indicate if menu is open","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isPlain","description":"Flag to indicate if the button is plain","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isHovered","description":"Forces display of the hover state of the Options menu","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isActive","description":"Forces display of the active state of the Options menu","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isFocused","description":"Forces display of the hover state of the Options menu","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"toggleTemplate","description":"Content to be rendered in the Options menu toggle button","required":false,"type":{"name":"union"},"defaultValue":{"value":"''"}},{"name":"toggleTemplateProps","description":"Props to be passed to the Options menu toggle button template","required":false,"type":{"name":"object"},"defaultValue":{"value":"undefined"}},{"name":"hideCaret","description":"hide the toggle caret","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"aria-label","description":"Provides an accessible name for the button when an icon is used instead of text","required":false,"type":{"name":"string"},"defaultValue":{"value":"'Options menu'"}}]}},{"node":{"path":"src/components/OptionsMenu/OptionsMenuToggleWithText.js","name":"OptionsMenuToggleWithText","description":"","props":[{"name":"parentId","description":"Id of the parent Options menu component","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"toggleText","description":"Content to be rendered inside the Options menu toggle as text or another non-interactive element","required":true,"type":{"name":"node"},"defaultValue":null},{"name":"toggleTextClassName","description":"classes to be added to the Options menu toggle text","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"toggleButtonContents","description":"Content to be rendered inside the Options menu toggle button","required":true,"type":{"name":"node"},"defaultValue":null},{"name":"toggleButtonContentsClassName","description":"Classes to be added to the Options menu toggle button","required":false,"type":{"name":"string"},"defaultValue":{"value":"''"}},{"name":"onToggle","description":"Callback for when this Options menu is toggled","required":false,"type":{"name":"func"},"defaultValue":{"value":"Function.prototype"}},{"name":"isOpen","description":"Flag to indicate if menu is open","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isPlain","description":"Flag to indicate if the button is plain","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isHovered","description":"Forces display of the hover state of the Options menu button","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isActive","description":"Forces display of the active state of the Options menu button","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"isFocused","description":"Forces display of the hover state of the Options menu button","required":false,"type":{"name":"bool"},"defaultValue":{"value":"false"}},{"name":"aria-label","description":"Provides an accessible name for the button when an icon is used instead of text","required":false,"type":{"name":"string"},"defaultValue":{"value":"'Options menu'"}}]}}]},"description":{"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"reactUrl\": \"optionsmenu\",\n  \"htmlUrl\": \"optionsmenu\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"An \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"options menu\"), \" is similar to a dropdown, but provides a way to select among a set of optional settings rather than trigger an action.\"));\n}\nMDXContent.isMDXComponent = true;"}},"allGetStartedNavigationJson":{"edges":[{"node":{"text":"About","path":"/get-started/about"}},{"node":{"text":"Develop","path":"/get-started/developers"}},{"node":{"text":"Design","path":"/get-started/designers"}},{"node":{"text":"Migration guide","path":"/get-started/migrate"}},{"node":{"text":"Accessibility guide","path":"/get-started/accessibility-guide"}}]},"allDesignGuidelinesNavigationJson":{"edges":[{"node":{"text":"Styles","path":"/design-guidelines/styles/","subNav":[{"text":"Colors","path":"/design-guidelines/styles/colors"},{"text":"Colors for charts","path":"/design-guidelines/styles/chart-colors"},{"text":"Icons","path":"/design-guidelines/styles/icons"},{"text":"Typography","path":"/design-guidelines/styles/typography"},{"text":"Spacers","path":"/design-guidelines/styles/spacers"}]}},{"node":{"text":"Usage and behavior","path":"/design-guidelines/usage-and-behavior/","subNav":[{"text":"About modal","path":"/design-guidelines/usage-and-behavior/about-modal"},{"text":"Alerts and notifications","path":"/design-guidelines/usage-and-behavior/alerts-and-notifications"},{"text":"Buttons and links","path":"/design-guidelines/usage-and-behavior/buttons-and-links"},{"text":"Charts","path":"/design-guidelines/usage-and-behavior/charts"},{"text":"Data input","path":"/design-guidelines/usage-and-behavior/data-input"},{"text":"Empty state","path":"/design-guidelines/usage-and-behavior/empty-state"},{"text":"Filters","path":"/design-guidelines/usage-and-behavior/filters"},{"text":"Forms","path":"/design-guidelines/usage-and-behavior/forms"},{"text":"Lists and tables","path":"/design-guidelines/usage-and-behavior/lists-and-tables"},{"text":"Login","path":"/design-guidelines/usage-and-behavior/login"},{"text":"Modal dialog","path":"/design-guidelines/usage-and-behavior/modal"},{"text":"Navigation system","path":"/design-guidelines/usage-and-behavior/navigation-system"},{"text":"Progress bar","path":"/design-guidelines/usage-and-behavior/progress-bar"},{"text":"Toolbar","path":"/design-guidelines/usage-and-behavior/toolbar"},{"text":"Wizard","path":"/design-guidelines/usage-and-behavior/wizard"}]}},{"node":{"text":"Content","path":"/design-guidelines/content","subNav":[{"text":"Writing","path":"/design-guidelines/content/writing"},{"text":"Voice","path":"/design-guidelines/content/voice-and-tone"},{"text":"Style guide","path":"/design-guidelines/content/grammar-and-terminology"}]}}]}},"pageContext":{"title":"Options menu","fileAbsolutePath":"/home/travis/build/patternfly/patternfly-org/packages/patternfly-4/_repos/react-core/src/components/OptionsMenu/OptionsMenu.md","pathRegex":"/OptionsMenu/.*/","reactUrl":"optionsmenu"}}