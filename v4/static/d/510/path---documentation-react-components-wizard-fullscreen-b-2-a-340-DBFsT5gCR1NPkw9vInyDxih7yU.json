{"data":{"mdx":{"rawBody":"---\ntitle: 'Wizard'\ncssPrefix: 'pf-c-wizard'\n---\n\n### Simple Wizard\n\nimport { Button, Wizard, Form, FormGroup, TextInput } from '@patternfly/react-core';\nimport SampleFormOne from './examples/SampleFormOne';\nimport SampleFormTwo from './examples/SampleFormTwo';\n\n```js\nimport React from 'react';\nimport { Button, Wizard, Form, FormGroup, TextInput } from '@patternfly/react-core';\nimport SampleFormOne from './examples/SampleFormOne';\nimport SampleFormTwo from './examples/SampleFormTwo';\n\nclass SimpleWizard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n    this.toggleOpen = () => {\n      this.setState({\n        isOpen: !this.state.isOpen\n      });\n    };\n  }\n\n  render() {\n    const { isOpen } = this.state;\n\n    const steps = [\n      { name: 'Step 1', component: <p>Step 1</p> },\n      { name: 'Step 2', component: <p>Step 2</p> },\n      { name: 'Step 3', component: <p>Step 3</p> },\n      { name: 'Step 4', component: <p>Step 4</p> },\n      { name: 'Final Step', component: <p>Final Step</p>, hideCancelButton: true, nextButtonText: 'Close' }\n    ];\n\n    return (\n      <React.Fragment>\n        <Button variant=\"primary\" onClick={this.toggleOpen}>\n          Show Wizard\n        </Button>\n        {isOpen && (\n          <Wizard\n            isOpen={isOpen}\n            onClose={this.toggleOpen}\n            title=\"Simple Wizard\"\n            description=\"Simple Wizard Description\"\n            steps={steps}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n```\n\n### Validation Wizard\n```js\nimport React from 'react';\nimport { Button, Wizard, Form, FormGroup, TextInput } from '@patternfly/react-core';\nimport SampleFormOne from './examples/SampleFormOne';\nimport SampleFormTwo from './examples/SampleFormTwo';\n\nclass ValidationWizard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false,\n      isFormValidA: false,\n      formValueA: 'Five',\n      isFormValidB: false,\n      formValueB: 'Six',\n      allStepsValid: false\n    };\n    this.toggleOpen = () => {\n      this.setState(({ isOpen }) => ({\n        isOpen: !isOpen\n      }));\n    };\n    this.onFormChangeA = (isValid, value) => {\n      this.setState(\n        {\n          isFormValidA: isValid,\n          formValueA: value\n        },\n        this.areAllStepsValid\n      );\n    };\n    this.onFormChangeB = (isValid, value) => {\n      this.setState(\n        {\n          isFormValidB: isValid,\n          formValueB: value\n        },\n        this.areAllStepsValid\n      );\n    };\n    this.areAllStepsValid = () => {\n      this.setState({\n        allStepsValid: this.state.isFormValidA && this.state.isFormValidB\n      });\n    };\n    this.onNext = ({ id, name }, { prevId, prevName }) => {\n      console.log(`current id: ${id}, current name: ${name}, previous id: ${prevId}, previous name: ${prevName}`);\n      this.areAllStepsValid();\n    };\n    this.onBack = ({ id, name }, { prevId, prevName }) => {\n      console.log(`current id: ${id}, current name: ${name}, previous id: ${prevId}, previous name: ${prevName}`);\n      this.areAllStepsValid();\n    };\n    this.onGoToStep = ({ id, name }, { prevId, prevName }) => {\n      console.log(`current id: ${id}, current name: ${name}, previous id: ${prevId}, previous name: ${prevName}`);\n    };\n    this.onSave = () => {\n      console.log('Saved and closed the wizard');\n      this.setState({\n        isOpen: false\n      });\n    };\n  }\n\n  render() {\n    const { isOpen, isFormValidA, isFormValidB, formValueA, formValueB, allStepsValid } = this.state;\n\n    const steps = [\n      { id: 1, name: 'Information', component: <p>Step 1</p> },\n      {\n        name: 'Configuration',\n        steps: [\n          {\n            id: 2,\n            name: 'Substep A with validation',\n            component: (\n              <SampleFormOne formValue={formValueA} isFormValid={isFormValidA} onChange={this.onFormChangeA} />\n            ),\n            enableNext: isFormValidA\n          },\n          {\n            id: 3,\n            name: 'Substep B with validation',\n            component: (\n              <SampleFormTwo formValue={formValueB} isFormValid={isFormValidB} onChange={this.onFormChangeB} />\n            ),\n            enableNext: isFormValidB\n          },\n          { id: 4, name: 'Substep C', component: <p>Substep C</p> }\n        ]\n      },\n      { id: 5, name: 'Additional', component: <p>Step 3</p>, enableNext: allStepsValid },\n      { id: 6, name: 'Review', component: <p>Step 4</p> }\n    ];\n\n    return (\n      <React.Fragment>\n        <Button variant=\"primary\" onClick={this.toggleOpen}>\n          Show Wizard\n        </Button>\n        {isOpen && (\n          <Wizard\n            isOpen={isOpen}\n            title=\"Validation Wizard\"\n            description=\"Validation Wizard Description\"\n            onClose={this.toggleOpen}\n            onSave={this.onSave}\n            steps={steps}\n            onNext={this.onNext}\n            onBack={this.onBack}\n            onGoToStep={this.onGoToStep}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n```\n","code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Wizard\",\n  \"cssPrefix\": \"pf-c-wizard\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", {\n    \"id\": \"simple-wizard\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#simple-wizard\",\n    \"aria-label\": \"simple wizard permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Simple Wizard\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Button, Wizard, Form, FormGroup, TextInput } from '@patternfly/react-core';\\nimport SampleFormOne from './examples/SampleFormOne';\\nimport SampleFormTwo from './examples/SampleFormTwo';\\n\\nclass SimpleWizard extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: false\\n    };\\n    this.toggleOpen = () => {\\n      this.setState({\\n        isOpen: !this.state.isOpen\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isOpen } = this.state;\\n\\n    const steps = [\\n      { name: 'Step 1', component: <p>Step 1</p> },\\n      { name: 'Step 2', component: <p>Step 2</p> },\\n      { name: 'Step 3', component: <p>Step 3</p> },\\n      { name: 'Step 4', component: <p>Step 4</p> },\\n      { name: 'Final Step', component: <p>Final Step</p>, hideCancelButton: true, nextButtonText: 'Close' }\\n    ];\\n\\n    return (\\n      <React.Fragment>\\n        <Button variant=\\\"primary\\\" onClick={this.toggleOpen}>\\n          Show Wizard\\n        </Button>\\n        {isOpen && (\\n          <Wizard\\n            isOpen={isOpen}\\n            onClose={this.toggleOpen}\\n            title=\\\"Simple Wizard\\\"\\n            description=\\\"Simple Wizard Description\\\"\\n            steps={steps}\\n          />\\n        )}\\n      </React.Fragment>\\n    );\\n  }\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"validation-wizard\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#validation-wizard\",\n    \"aria-label\": \"validation wizard permalink\",\n    \"class\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Validation Wizard\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Button, Wizard, Form, FormGroup, TextInput } from '@patternfly/react-core';\\nimport SampleFormOne from './examples/SampleFormOne';\\nimport SampleFormTwo from './examples/SampleFormTwo';\\n\\nclass ValidationWizard extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: false,\\n      isFormValidA: false,\\n      formValueA: 'Five',\\n      isFormValidB: false,\\n      formValueB: 'Six',\\n      allStepsValid: false\\n    };\\n    this.toggleOpen = () => {\\n      this.setState(({ isOpen }) => ({\\n        isOpen: !isOpen\\n      }));\\n    };\\n    this.onFormChangeA = (isValid, value) => {\\n      this.setState(\\n        {\\n          isFormValidA: isValid,\\n          formValueA: value\\n        },\\n        this.areAllStepsValid\\n      );\\n    };\\n    this.onFormChangeB = (isValid, value) => {\\n      this.setState(\\n        {\\n          isFormValidB: isValid,\\n          formValueB: value\\n        },\\n        this.areAllStepsValid\\n      );\\n    };\\n    this.areAllStepsValid = () => {\\n      this.setState({\\n        allStepsValid: this.state.isFormValidA && this.state.isFormValidB\\n      });\\n    };\\n    this.onNext = ({ id, name }, { prevId, prevName }) => {\\n      console.log(`current id: ${id}, current name: ${name}, previous id: ${prevId}, previous name: ${prevName}`);\\n      this.areAllStepsValid();\\n    };\\n    this.onBack = ({ id, name }, { prevId, prevName }) => {\\n      console.log(`current id: ${id}, current name: ${name}, previous id: ${prevId}, previous name: ${prevName}`);\\n      this.areAllStepsValid();\\n    };\\n    this.onGoToStep = ({ id, name }, { prevId, prevName }) => {\\n      console.log(`current id: ${id}, current name: ${name}, previous id: ${prevId}, previous name: ${prevName}`);\\n    };\\n    this.onSave = () => {\\n      console.log('Saved and closed the wizard');\\n      this.setState({\\n        isOpen: false\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isOpen, isFormValidA, isFormValidB, formValueA, formValueB, allStepsValid } = this.state;\\n\\n    const steps = [\\n      { id: 1, name: 'Information', component: <p>Step 1</p> },\\n      {\\n        name: 'Configuration',\\n        steps: [\\n          {\\n            id: 2,\\n            name: 'Substep A with validation',\\n            component: (\\n              <SampleFormOne formValue={formValueA} isFormValid={isFormValidA} onChange={this.onFormChangeA} />\\n            ),\\n            enableNext: isFormValidA\\n          },\\n          {\\n            id: 3,\\n            name: 'Substep B with validation',\\n            component: (\\n              <SampleFormTwo formValue={formValueB} isFormValid={isFormValidB} onChange={this.onFormChangeB} />\\n            ),\\n            enableNext: isFormValidB\\n          },\\n          { id: 4, name: 'Substep C', component: <p>Substep C</p> }\\n        ]\\n      },\\n      { id: 5, name: 'Additional', component: <p>Step 3</p>, enableNext: allStepsValid },\\n      { id: 6, name: 'Review', component: <p>Step 4</p> }\\n    ];\\n\\n    return (\\n      <React.Fragment>\\n        <Button variant=\\\"primary\\\" onClick={this.toggleOpen}>\\n          Show Wizard\\n        </Button>\\n        {isOpen && (\\n          <Wizard\\n            isOpen={isOpen}\\n            title=\\\"Validation Wizard\\\"\\n            description=\\\"Validation Wizard Description\\\"\\n            onClose={this.toggleOpen}\\n            onSave={this.onSave}\\n            steps={steps}\\n            onNext={this.onNext}\\n            onBack={this.onBack}\\n            onGoToStep={this.onGoToStep}\\n          />\\n        )}\\n      </React.Fragment>\\n    );\\n  }\\n}\\n\")));\n}\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"fileAbsolutePath":"/home/travis/build/patternfly/patternfly-org/packages/patternfly-4/_repos/react-core/src/components/Wizard/Wizard.md","fullscreen":true}}