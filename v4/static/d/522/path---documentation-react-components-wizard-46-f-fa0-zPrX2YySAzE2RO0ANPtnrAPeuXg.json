{"data":{"mdx":{"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Wizard\",\n  \"cssPrefix\": \"pf-c-wizard\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", {\n    \"id\": \"simple-wizard\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#simple-wizard\",\n    \"aria-label\": \"simple wizard permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Simple wizard\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Button, Wizard } from '@patternfly/react-core';\\n\\nclass SimpleWizard extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: false\\n    };\\n    this.toggleOpen = () => {\\n      this.setState({\\n        isOpen: !this.state.isOpen\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isOpen } = this.state;\\n\\n    const steps = [\\n      { name: 'Step 1', component: <p>Step 1</p> },\\n      { name: 'Step 2', component: <p>Step 2</p> },\\n      { name: 'Step 3', component: <p>Step 3</p> },\\n      { name: 'Step 4', component: <p>Step 4</p> },\\n      { name: 'Review', component: <p>Review Step</p>, nextButtonText: 'Finish' }\\n    ];\\n\\n    return (\\n      <React.Fragment>\\n        <Button variant=\\\"primary\\\" onClick={this.toggleOpen}>\\n          Show Wizard\\n        </Button>\\n        {isOpen && (\\n          <Wizard\\n            isOpen={isOpen}\\n            onClose={this.toggleOpen}\\n            title=\\\"Simple Wizard\\\"\\n            description=\\\"Simple Wizard Description\\\"\\n            steps={steps}\\n          />\\n        )}\\n      </React.Fragment>\\n    );\\n  }\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"wizard---compact-navigation-wizard-iscompactnav-prop\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#wizard---compact-navigation-wizard-iscompactnav-prop\",\n    \"aria-label\": \"wizard   compact navigation wizard iscompactnav prop permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Wizard - compact navigation (Wizard \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"isCompactNav\"), \" prop)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Button, Wizard } from '@patternfly/react-core';\\n\\nclass CompactWizard extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: false\\n    };\\n    this.toggleOpen = () => {\\n      this.setState({\\n        isOpen: !this.state.isOpen\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isOpen } = this.state;\\n\\n    const steps = [\\n      { name: 'Step 1', component: <p>Step 1</p> },\\n      { name: 'Step 2', component: <p>Step 2</p> },\\n      { name: 'Step 3', component: <p>Step 3</p> },\\n      { name: 'Step 4', component: <p>Step 4</p> },\\n      { name: 'Review', component: <p>Review Step</p>, nextButtonText: 'Finish' }\\n    ];\\n\\n    return (\\n      <React.Fragment>\\n        <Button variant=\\\"primary\\\" onClick={this.toggleOpen}>\\n          Show Wizard\\n        </Button>\\n        {isOpen && (\\n          <Wizard\\n            isOpen={isOpen}\\n            isCompactNav\\n            onClose={this.toggleOpen}\\n            title=\\\"Simple Wizard\\\"\\n            description=\\\"Simple Wizard Description\\\"\\n            steps={steps}\\n          />\\n        )}\\n      </React.Fragment>\\n    );\\n  }\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"wizard---steps-not-clickable-in-side-nav-until-step-is-reached-step-canjumpto-prop\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#wizard---steps-not-clickable-in-side-nav-until-step-is-reached-step-canjumpto-prop\",\n    \"aria-label\": \"wizard   steps not clickable in side nav until step is reached step canjumpto prop permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Wizard - steps not clickable in side nav until step is reached (step \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"canJumpTo\"), \" prop)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Button, Wizard } from '@patternfly/react-core';\\n\\nclass DisabledStepsWizard extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: false,\\n      stepIdReached: 1\\n    };\\n    this.toggleOpen = () => {\\n      this.setState({\\n        isOpen: !this.state.isOpen\\n      });\\n    };\\n    this.onNext = ({ id }) => {\\n      this.setState({\\n        stepIdReached: this.state.stepIdReached < id ? id : this.state.stepIdReached\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isOpen, stepIdReached } = this.state;\\n\\n    const steps = [\\n      { id: 1, name: 'Step 1', component: <p>Step 1</p> },\\n      { id: 2, name: 'Step 2', component: <p>Step 2</p>, canJumpTo: stepIdReached >= 2 },\\n      { id: 3, name: 'Step 3', component: <p>Step 3</p>, canJumpTo: stepIdReached >= 3 },\\n      { id: 4, name: 'Step 4', component: <p>Step 4</p>, canJumpTo: stepIdReached >= 4 },\\n      { id: 5, name: 'Review', component: <p>Review Step</p>, nextButtonText: 'Finish', canJumpTo: stepIdReached >= 5 }\\n    ];\\n\\n    return (\\n      <React.Fragment>\\n        <Button variant=\\\"primary\\\" onClick={this.toggleOpen}>\\n          Show Wizard\\n        </Button>\\n        {isOpen && (\\n          <Wizard\\n            isOpen={isOpen}\\n            onClose={this.toggleOpen}\\n            title=\\\"Simple Wizard\\\"\\n            description=\\\"Simple Wizard Description\\\"\\n            steps={steps}\\n            onNext={this.onNext}\\n          />\\n        )}\\n      </React.Fragment>\\n    );\\n  }\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"wizard---finished-step-step-isfinished-prop\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#wizard---finished-step-step-isfinished-prop\",\n    \"aria-label\": \"wizard   finished step step isfinished prop permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Wizard - finished step (step \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"isFinished\"), \" prop)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Button, Wizard } from '@patternfly/react-core';\\nimport FinishedStep from './examples/FinishedStep';\\n\\nclass FinishedStepWizard extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: false\\n    };\\n    this.toggleOpen = () => {\\n      this.setState({\\n        isOpen: !this.state.isOpen\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isOpen } = this.state;\\n\\n    const steps = [\\n      { name: 'Step 1', component: <p>Step 1</p> },\\n      { name: 'Step 2', component: <p>Step 2</p> },\\n      { name: 'Step 3', component: <p>Step 3</p> },\\n      { name: 'Step 4', component: <p>Step 4</p> },\\n      { name: 'Review', component: <p>Review Step</p>, nextButtonText: 'Finish' },\\n      { name: 'Finish', component: <FinishedStep onClose={this.toggleOpen} />, isFinishedStep: true }\\n    ];\\n\\n    return (\\n      <React.Fragment>\\n        <Button variant=\\\"primary\\\" onClick={this.toggleOpen}>\\n          Show Wizard\\n        </Button>\\n        {isOpen && (\\n          <Wizard\\n            isOpen={isOpen}\\n            onClose={this.toggleOpen}\\n            title=\\\"Simple Wizard\\\"\\n            description=\\\"Simple Wizard Description\\\"\\n            steps={steps}\\n          />\\n        )}\\n      </React.Fragment>\\n    );\\n  }\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"wizard---enable-next-button-on-form-validation\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#wizard---enable-next-button-on-form-validation\",\n    \"aria-label\": \"wizard   enable next button on form validation permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Wizard - enable Next button on form validation\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Button, Wizard, Form, FormGroup, TextInput } from '@patternfly/react-core';\\nimport SampleForm from './examples/SampleForm';\\n\\nclass ValidationWizard extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: false,\\n      isFormValid: false,\\n      formValue: 'Thirty',\\n      allStepsValid: false,\\n      stepIdReached: 1\\n    };\\n\\n    this.toggleOpen = () => {\\n      this.setState(({ isOpen }) => ({\\n        isOpen: !isOpen\\n      }));\\n    };\\n\\n    this.onFormChange = (isValid, value) => {\\n      this.setState(\\n        {\\n          isFormValid: isValid,\\n          formValue: value\\n        },\\n        this.areAllStepsValid\\n      );\\n    };\\n\\n    this.areAllStepsValid = () => {\\n      this.setState({\\n        allStepsValid: this.state.isFormValid\\n      });\\n    };\\n\\n    this.onNext = ({ id, name }, { prevId, prevName }) => {\\n      console.log(`current id: ${id}, current name: ${name}, previous id: ${prevId}, previous name: ${prevName}`);\\n      this.setState({\\n        stepIdReached: this.state.stepIdReached < id ? id : this.state.stepIdReached\\n      });\\n      this.areAllStepsValid();\\n    };\\n\\n    this.onBack = ({ id, name }, { prevId, prevName }) => {\\n      console.log(`current id: ${id}, current name: ${name}, previous id: ${prevId}, previous name: ${prevName}`);\\n      this.areAllStepsValid();\\n    };\\n\\n    this.onGoToStep = ({ id, name }, { prevId, prevName }) => {\\n      console.log(`current id: ${id}, current name: ${name}, previous id: ${prevId}, previous name: ${prevName}`);\\n    };\\n\\n    this.onSave = () => {\\n      console.log('Saved and closed the wizard');\\n      this.setState({\\n        isOpen: false\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isOpen, isFormValid, formValue, allStepsValid, stepIdReached } = this.state;\\n\\n    const steps = [\\n      { id: 1, name: 'Information', component: <p>Step 1</p> },\\n      {\\n        name: 'Configuration',\\n        steps: [\\n          {\\n            id: 2,\\n            name: 'Substep A with validation',\\n            component: (\\n              <SampleForm formValue={formValue} isFormValid={isFormValid} onChange={this.onFormChange} />\\n            ),\\n            enableNext: isFormValid,\\n            canJumpTo: stepIdReached >= 2\\n          },\\n          { id: 3, name: 'Substep B', component: <p>Substep B</p>, canJumpTo: stepIdReached >= 3 }\\n        ]\\n      },\\n      { id: 4, name: 'Additional', component: <p>Step 3</p>, enableNext: allStepsValid, canJumpTo: stepIdReached >= 4 },\\n      { id: 5, name: 'Review', component: <p>Step 4</p>, nextButtonText: 'Close', canJumpTo: stepIdReached >= 5 }\\n    ];\\n\\n    return (\\n      <React.Fragment>\\n        <Button variant=\\\"primary\\\" onClick={this.toggleOpen}>\\n          Show Wizard\\n        </Button>\\n        {isOpen && (\\n          <Wizard\\n            isOpen={isOpen}\\n            title=\\\"Validation Wizard\\\"\\n            description=\\\"Validation Wizard Description\\\"\\n            onClose={this.toggleOpen}\\n            onSave={this.onSave}\\n            steps={steps}\\n            onNext={this.onNext}\\n            onBack={this.onBack}\\n            onGoToStep={this.onGoToStep}\\n          />\\n        )}\\n      </React.Fragment>\\n    );\\n  }\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"wizard---validate-on-button-press\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#wizard---validate-on-button-press\",\n    \"aria-label\": \"wizard   validate on button press permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Wizard - validate on button press\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Button, Wizard, WizardFooter, WizardContextConsumer, Alert } from '@patternfly/react-core';\\nimport SampleForm from './examples/SampleForm';\\nimport FinishedStep from './examples/FinishedStep';\\n\\nclass ValidateButtonPressWizard extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: false,\\n      stepsValid: 0\\n    };\\n    this.toggleOpen = () => {\\n      this.setState({\\n        isOpen: !this.state.isOpen\\n      });\\n    };\\n    this.validateLastStep = onNext => {\\n      const { stepsValid } = this.state;\\n      if (stepsValid !== 1) {\\n        this.setState({\\n          stepsValid: 1\\n        });\\n      } else {\\n        onNext();\\n      }\\n    };\\n  }\\n\\n  render() {\\n    const { isOpen, stepsValid } = this.state;\\n\\n    const steps = [\\n      { name: 'Step 1', component: <p>Step 1</p> },\\n      { name: 'Step 2', component: <p>Step 2</p> },\\n      { \\n        name: 'Final Step', \\n        component: (\\n          <>\\n            {stepsValid === 1 && <div style={{padding: '15px 0'}}><Alert variant=\\\"warning\\\" title=\\\"Validation failed, please try again\\\" /></div>}\\n            <SampleForm formValue=\\\"Validating on button press\\\" isFormValid={stepsValid !== 1} />\\n          </>\\n        )\\n      },\\n      { name: 'Finish', component: <FinishedStep onClose={this.toggleOpen} />, isFinishedStep: true }\\n    ];\\n\\n    const CustomFooter = (\\n      <WizardFooter>\\n        <WizardContextConsumer>\\n          {({ activeStep, goToStepByName, goToStepById, onNext, onBack, onClose }) => {\\n            if (activeStep.name !== 'Final Step') {\\n              return (\\n                <>\\n                  <Button variant=\\\"primary\\\" type=\\\"submit\\\" onClick={onNext}>\\n                    Forward\\n                  </Button>\\n                  <Button variant=\\\"secondary\\\" onClick={onBack} className={activeStep.name === 'Step 1' ? 'pf-m-disabled' : ''}>\\n                    Backward\\n                  </Button>\\n                  <Button variant=\\\"link\\\" onClick={onClose}>\\n                    Cancel\\n                  </Button>\\n                </>\\n              )\\n            }\\n            // Final step buttons\\n            return (\\n              <>\\n                <Button onClick={() => this.validateLastStep(onNext)}>Validate</Button>\\n                <Button onClick={() => goToStepByName('Step 1')}>Go to Beginning</Button>\\n              </>\\n            )}}\\n        </WizardContextConsumer>\\n      </WizardFooter>\\n    );\\n\\n    return (\\n      <React.Fragment>\\n        <Button variant=\\\"primary\\\" onClick={this.toggleOpen}>\\n          Show Wizard\\n        </Button>\\n        {isOpen && (\\n          <Wizard\\n            isOpen={isOpen}\\n            onClose={this.toggleOpen}\\n            footer={CustomFooter}\\n            title=\\\"Validate on button press\\\"\\n            steps={steps}\\n          />\\n        )}\\n      </React.Fragment>\\n    );\\n  }\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"wizard---progressive-steps\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#wizard---progressive-steps\",\n    \"aria-label\": \"wizard   progressive steps permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Wizard - progressive steps\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Button, Wizard, WizardFooter, WizardContextConsumer, Alert } from '@patternfly/react-core';\\nimport SampleForm from './examples/SampleForm';\\nimport FinishedStep from './examples/FinishedStep';\\n\\nclass ProgressiveWizard extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: false,\\n      showCreateStep: false,\\n      showUpdateStep: false,\\n      showOptionsStep: false,\\n      showReviewStep: false,\\n      getStartedStepRadio: 'Create',\\n      createStepRadio: 'Quick',\\n      updateStepRadio: 'Quick'\\n    };\\n    this.toggleOpen = () => {\\n      this.setState({\\n        isOpen: !this.state.isOpen\\n      });\\n    };\\n    this.onGoToStep = ({ id, name }, { prevId, prevName }) => {\\n      // Remove steps after the currently clicked step\\n      if (name === 'Get Started') {\\n        this.setState({ \\n          showReviewStep: false,\\n          showOptionsStep: false,\\n          showCreateStep: false,\\n          showUpdateStep: false\\n        });\\n      } else if (name === 'Create Options' || name === 'Update Options') {\\n        this.setState({ \\n          showReviewStep: false,\\n          showOptionsStep: false\\n        });\\n      } else if (name.indexOf('Substep') > -1) {\\n        this.setState({ \\n          showReviewStep: false\\n        });\\n      }\\n    };\\n    this.getNextStep = (activeStep, callback) => {\\n      if (activeStep.name === 'Get Started') {\\n        if (this.state.getStartedStepRadio === 'Create') {\\n          this.setState({ \\n            showCreateStep: true,\\n            showUpdateStep: false,\\n            showOptionsStep: false,\\n            showReviewStep: false\\n          }, () => {\\n            callback();\\n          });\\n        } else {\\n          this.setState({ \\n            showCreateStep: false,\\n            showUpdateStep: true,\\n            showOptionsStep: false,\\n            showReviewStep: false\\n          }, () => {\\n            callback();\\n          });\\n        }\\n      } else if (activeStep.name === 'Create Options' || activeStep.name === 'Update Options') {\\n        this.setState({ \\n          showOptionsStep: true,\\n          showReviewStep: false\\n        }, () => {\\n          callback();\\n        });\\n      } else if (activeStep.name === 'Substep 3') {\\n        this.setState({ \\n          showReviewStep: true \\n        }, () => {\\n          callback();\\n        });\\n      } else {\\n        callback();\\n      }\\n    };\\n    this.getPreviousStep = (activeStep, callback) => {\\n      if (activeStep.name === 'Review') {\\n        this.setState({ \\n          showReviewStep: false\\n        }, () => {\\n          callback();\\n        });\\n      } else if (activeStep.name === 'Substep 1') {\\n        this.setState({ \\n          showOptionsStep: false\\n        }, () => {\\n          callback();\\n        });\\n      } else if (activeStep.name === 'Create Options') {\\n        this.setState({ \\n          showCreateStep: false\\n        }, () => {\\n          callback();\\n        });\\n      } else if (activeStep.name === 'Update Options') {\\n        this.setState({ \\n          showUpdateStep: false\\n        }, () => {\\n          callback();\\n        });\\n      } else {\\n        callback();\\n      }\\n    };\\n  }\\n\\n  render() {\\n    const { \\n      isOpen, \\n      stepsValid, \\n      getStartedStepRadio, \\n      createStepRadio, \\n      updateStepRadio,\\n      showCreateStep,\\n      showUpdateStep,\\n      showOptionsStep,\\n      showReviewStep\\n    } = this.state;\\n\\n    const getStartedStep = { \\n      name: 'Get Started', \\n      component: (\\n        <div>\\n          <Radio\\n            value=\\\"Create\\\"\\n            isChecked={getStartedStepRadio === 'Create'}\\n            onChange={(_, event) => this.setState({ getStartedStepRadio: event.currentTarget.value })}\\n            label=\\\"Create a new thing\\\"\\n            name=\\\"radio-step-start\\\"\\n            id=\\\"radio-step-start-1\\\"\\n          />{' '}\\n          <Radio\\n            value=\\\"Update\\\"\\n            isChecked={getStartedStepRadio === 'Update'}\\n            onChange={(_, event) => this.setState({ getStartedStepRadio: event.currentTarget.value })}\\n            label=\\\"Update an existing thing\\\"\\n            name=\\\"radio-step-start\\\"\\n            id=\\\"radio-step-start-2\\\"\\n          />\\n        </div>\\n      )\\n    };\\n\\n    const createStep = {\\n      name: 'Create Options',\\n      component: (\\n        <div>\\n          <Radio\\n            value=\\\"Quick\\\"\\n            isChecked={createStepRadio === 'Quick'}\\n            onChange={(_, event) => this.setState({ createStepRadio: event.currentTarget.value })}\\n            label=\\\"Quick Create\\\"\\n            name=\\\"radio-step-create\\\"\\n            id=\\\"radio-step-create-1\\\"\\n          />{' '}\\n          <Radio\\n            value=\\\"Custom\\\"\\n            isChecked={createStepRadio === 'Custom'}\\n            onChange={(_, event) => this.setState({ createStepRadio: event.currentTarget.value })}\\n            label=\\\"Custom Create\\\"\\n            name=\\\"radio-step-create\\\"\\n            id=\\\"radio-step-create-2\\\"\\n          />\\n        </div>\\n      )\\n    };\\n\\n    const updateStep = {\\n      name: 'Update Options',\\n      component: (\\n        <div>\\n          <Radio\\n            value=\\\"Quick\\\"\\n            isChecked={updateStepRadio === 'Quick'}\\n            onChange={(_, event) => this.setState({ updateStepRadio: event.currentTarget.value })}\\n            label=\\\"Quick Update\\\"\\n            name=\\\"radio-step-update\\\"\\n            id=\\\"radio-step-update-1\\\"\\n          />{' '}\\n          <Radio\\n            value=\\\"Custom\\\"\\n            isChecked={updateStepRadio === 'Custom'}\\n            onChange={(_, event) => this.setState({ updateStepRadio: event.currentTarget.value })}\\n            label=\\\"Custom Update\\\"\\n            name=\\\"radio-step-update\\\"\\n            id=\\\"radio-step-update-2\\\"\\n          />\\n        </div>\\n      )\\n    };\\n\\n    const optionsStep = {\\n      name: showCreateStep ? `${createStepRadio} Options` : `${updateStepRadio} Options`,\\n      steps: [\\n        {\\n          name: 'Substep 1',\\n          component: 'Substep 1'\\n        },\\n        {\\n          name: 'Substep 2',\\n          component: 'Substep 2'\\n        },\\n        {\\n          name: 'Substep 3',\\n          component: 'Substep 3'\\n        }\\n      ]\\n    };\\n    \\n    const reviewStep = {\\n      name: 'Review',\\n      component: (\\n        <div>\\n          <div>First choice: {getStartedStepRadio}</div>\\n          <div>Second choice: {showCreateStep ? createStepRadio : updateStepRadio}</div>\\n        </div>\\n      )\\n    };\\n\\n    const steps = [ \\n      getStartedStep,\\n      ...(showCreateStep ? [createStep] : []),\\n      ...(showUpdateStep ? [updateStep] : []),\\n      ...(showOptionsStep ? [optionsStep] : []),\\n      ...(showReviewStep ? [reviewStep] : []),\\n    ];\\n\\n    const CustomFooter = (\\n      <WizardFooter>\\n        <WizardContextConsumer>\\n          {({ activeStep, goToStepByName, goToStepById, onNext, onBack, onClose }) => {\\n            return (\\n              <>\\n                <Button variant=\\\"primary\\\" type=\\\"submit\\\" onClick={() => this.getNextStep(activeStep, onNext)}>\\n                  {activeStep.name === 'Review' ? 'Finish' : 'Next'}\\n                </Button>\\n                <Button variant=\\\"secondary\\\" onClick={() => this.getPreviousStep(activeStep, onBack)} className={activeStep.name === 'Get Started' ? 'pf-m-disabled' : ''}>\\n                  Back\\n                </Button>\\n                <Button variant=\\\"link\\\" onClick={onClose}>\\n                  Cancel\\n                </Button>\\n              </>\\n            )}}\\n        </WizardContextConsumer>\\n      </WizardFooter>\\n    );\\n\\n    return (\\n      <React.Fragment>\\n        <Button variant=\\\"primary\\\" onClick={this.toggleOpen}>\\n          Show Wizard\\n        </Button>\\n        {isOpen && (\\n          <Wizard\\n            isOpen={isOpen}\\n            onClose={this.toggleOpen}\\n            footer={CustomFooter}\\n            onGoToStep={this.onGoToStep}\\n            title=\\\"Progressive Wizard\\\"\\n            steps={steps}\\n          />\\n        )}\\n      </React.Fragment>\\n    );\\n  }\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"full-height-and-width-wizard\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#full-height-and-width-wizard\",\n    \"aria-label\": \"full height and width wizard permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Full height and width wizard\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Button, Wizard } from '@patternfly/react-core';\\nimport SampleForm from './examples/SampleForm';\\n\\nclass SimpleWizard extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: false\\n    };\\n    this.toggleOpen = () => {\\n      this.setState({\\n        isOpen: !this.state.isOpen\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isOpen } = this.state;\\n\\n    const steps = [\\n      { name: 'Step 1', component: <p>Step 1</p> },\\n      { name: 'Step 2', component: <p>Step 2</p> },\\n      { name: 'Step 3', component: <p>Step 3</p> },\\n      { name: 'Step 4', component: <p>Step 4</p> },\\n      { name: 'Final Step', component: <p>Final Step</p>, hideCancelButton: true, nextButtonText: 'Close' }\\n    ];\\n\\n    return (\\n      <React.Fragment>\\n        <Button variant=\\\"primary\\\" onClick={this.toggleOpen}>\\n          Show Wizard\\n        </Button>\\n        {isOpen && (\\n          <Wizard\\n            isOpen={isOpen}\\n            isFullHeight\\n            isFullWidth\\n            onClose={this.toggleOpen}\\n            title=\\\"Simple Wizard\\\"\\n            description=\\\"Simple Wizard Description\\\"\\n            steps={steps}\\n          />\\n        )}\\n      </React.Fragment>\\n    );\\n  }\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"wizard---remember-last-step\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#wizard---remember-last-step\",\n    \"aria-label\": \"wizard   remember last step permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Wizard - remember last step\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport { Button, Wizard } from '@patternfly/react-core';\\n\\nclass SimpleWizard extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      step: 1,\\n      isOpen: false\\n    };\\n    this.toggleOpen = () => {\\n      this.setState({\\n        isOpen: !this.state.isOpen\\n      });\\n    };\\n    this.onMove = (curr, prev) => {\\n      this.setState({\\n        step: curr.id\\n      });\\n    }\\n    this.onSave = () => {\\n      this.setState({\\n        step: 1,\\n        isOpen: false,\\n      })\\n    }\\n  }\\n\\n  render() {\\n    const { isOpen, step } = this.state;\\n\\n    const steps = [\\n      { id: 1, name: 'Step 1', component: <p>Step 1</p> },\\n      { id: 2, name: 'Step 2', component: <p>Step 2</p> },\\n      { id: 3, name: 'Step 3', component: <p>Step 3</p> },\\n      { id: 4, name: 'Step 4', component: <p>Step 4</p> },\\n      { id: 5, name: 'Review', component: <p>Review Step</p>, nextButtonText: 'Finish' }\\n    ];\\n\\n    return (\\n      <React.Fragment>\\n        <Button variant=\\\"primary\\\" onClick={this.toggleOpen}>\\n          Show Wizard\\n        </Button>\\n        {isOpen && (\\n          <Wizard\\n            startAtStep={step}\\n            onNext={this.onMove}\\n            onBack={this.onMove}\\n            onSave={this.onSave}\\n            isOpen={isOpen}\\n            onClose={this.toggleOpen}\\n            title=\\\"Simple Wizard\\\"\\n            description=\\\"Simple Wizard Description\\\"\\n            steps={steps}\\n          />\\n        )}\\n      </React.Fragment>\\n    );\\n  }\\n}\\n\")));\n}\nMDXContent.isMDXComponent = true;"},"frontmatter":{"title":"Wizard","section":null,"cssPrefix":"pf-c-wizard"}},"metadata":{"edges":[{"node":{"path":"src/components/Wizard/WizardBody.tsx","name":"WizardBody","description":"","props":[{"name":"children","description":"","required":true,"type":{"name":"any"},"defaultValue":null},{"name":"hasBodyPadding","description":"","required":true,"type":{"name":"bool"},"defaultValue":null}]}},{"node":{"path":"src/components/Wizard/WizardHeader.tsx","name":"WizardHeader","description":"","props":[{"name":"onClose","description":"","required":false,"type":{"name":"func"},"defaultValue":null},{"name":"title","description":"","required":true,"type":{"name":"string"},"defaultValue":null},{"name":"description","description":"","required":false,"type":{"name":"string"},"defaultValue":null},{"name":"ariaLabelCloseButton","description":"","required":false,"type":{"name":"string"},"defaultValue":null},{"name":"titleId","description":"","required":false,"type":{"name":"string"},"defaultValue":null},{"name":"descriptionId","description":"","required":false,"type":{"name":"string"},"defaultValue":null}]}},{"node":{"path":"src/components/Wizard/WizardNav.tsx","name":"WizardNav","description":"","props":[{"name":"children","description":"","required":false,"type":{"name":"any"},"defaultValue":null},{"name":"ariaLabel","description":"","required":false,"type":{"name":"string"},"defaultValue":null},{"name":"isOpen","description":"","required":false,"type":{"name":"bool"},"defaultValue":null},{"name":"returnList","description":"","required":false,"type":{"name":"bool"},"defaultValue":null}]}},{"node":{"path":"src/components/Wizard/WizardNavItem.tsx","name":"WizardNavItem","description":"","props":[{"name":"children","description":"","required":false,"type":{"name":"node"},"defaultValue":null},{"name":"text","description":"","required":false,"type":{"name":"string"},"defaultValue":null},{"name":"isCurrent","description":"","required":false,"type":{"name":"bool"},"defaultValue":null},{"name":"isDisabled","description":"","required":false,"type":{"name":"bool"},"defaultValue":null},{"name":"step","description":"","required":true,"type":{"name":"number"},"defaultValue":null}]}},{"node":{"path":"src/components/Wizard/WizardToggle.tsx","name":"WizardToggle","description":"","props":[{"name":"nav","description":"","required":true,"type":{"name":"any"},"defaultValue":null},{"name":"steps","description":"","required":true,"type":{"name":"arrayOf"},"defaultValue":null},{"name":"activeStep","description":"","required":true,"type":{"name":"any"},"defaultValue":null},{"name":"children","description":"","required":true,"type":{"name":"node"},"defaultValue":null},{"name":"hasBodyPadding","description":"","required":true,"type":{"name":"bool"},"defaultValue":null},{"name":"isNavOpen","description":"","required":true,"type":{"name":"bool"},"defaultValue":null},{"name":"onNavToggle","description":"","required":true,"type":{"name":"func"},"defaultValue":null}]}}]},"description":{"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"reactUrl\": \"wizard\",\n  \"htmlUrl\": \"wizard\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"wizard\"), \" is a structured page used for presenting sequential, stepwise workflows. Wizards typically exist in a modal dialog, but may also be designed to occupy a full page.\"));\n}\nMDXContent.isMDXComponent = true;"}},"allGetStartedNavigationJson":{"edges":[{"node":{"text":"About","path":"/get-started/about"}},{"node":{"text":"Develop","path":"/get-started/developers"}},{"node":{"text":"Design","path":"/get-started/designers"}},{"node":{"text":"Migration guide","path":"/get-started/migrate"}},{"node":{"text":"Accessibility guide","path":"/get-started/accessibility-guide"}}]},"allDesignGuidelinesNavigationJson":{"edges":[{"node":{"text":"Styles","path":"/design-guidelines/styles/","subNav":[{"text":"Colors","path":"/design-guidelines/styles/colors"},{"text":"Colors for charts","path":"/design-guidelines/styles/chart-colors"},{"text":"Icons","path":"/design-guidelines/styles/icons"},{"text":"Typography","path":"/design-guidelines/styles/typography"},{"text":"Spacers","path":"/design-guidelines/styles/spacers"}]}},{"node":{"text":"Usage and behavior","path":"/design-guidelines/usage-and-behavior/","subNav":[{"text":"About modal","path":"/design-guidelines/usage-and-behavior/about-modal"},{"text":"Alerts and notifications","path":"/design-guidelines/usage-and-behavior/alerts-and-notifications"},{"text":"Buttons and links","path":"/design-guidelines/usage-and-behavior/buttons-and-links"},{"text":"Charts","path":"/design-guidelines/usage-and-behavior/charts"},{"text":"Data input","path":"/design-guidelines/usage-and-behavior/data-input"},{"text":"Empty state","path":"/design-guidelines/usage-and-behavior/empty-state"},{"text":"Filters","path":"/design-guidelines/usage-and-behavior/filters"},{"text":"Forms","path":"/design-guidelines/usage-and-behavior/forms"},{"text":"Lists and tables","path":"/design-guidelines/usage-and-behavior/lists-and-tables"},{"text":"Login","path":"/design-guidelines/usage-and-behavior/login"},{"text":"Modal dialog","path":"/design-guidelines/usage-and-behavior/modal"},{"text":"Navigation system","path":"/design-guidelines/usage-and-behavior/navigation-system"},{"text":"Progress bar","path":"/design-guidelines/usage-and-behavior/progress-bar"},{"text":"Toolbar","path":"/design-guidelines/usage-and-behavior/toolbar"},{"text":"Wizard","path":"/design-guidelines/usage-and-behavior/wizard"}]}},{"node":{"text":"Content","path":"/design-guidelines/content","subNav":[{"text":"Writing","path":"/design-guidelines/content/writing"},{"text":"Voice","path":"/design-guidelines/content/voice-and-tone"},{"text":"Style guide","path":"/design-guidelines/content/grammar-and-terminology"}]}}]}},"pageContext":{"title":"Wizard","fileAbsolutePath":"/home/travis/build/patternfly/patternfly-org/packages/patternfly-4/_repos/react-core/src/components/Wizard/Wizard.md","pathRegex":"/Wizard/.*/","reactUrl":"wizard"}}